{"version":3,"file":"static/js/949.3db6b82c.chunk.js","mappings":"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vF,EAAgB,QAElB,IADgC,mBAArBA,EAAgB,UAAiBA,EAAgB,QAAI,CAACA,EAAgB,UAC1EA,EAAgB,QAAEyC,QAmBPqqB,EAlBH9sB,EAAgB,QAAEqL,QAmBnCjF,EAAcsJ,QAAQod,GADxB,IAAsBA,EAdpB3hB,GAAqB/E,EACvB,CAs4NIggC,IACF,CA9BIz/B,EAAkB,IAIpBq/B,KAj5NJ,WACE,GAAIhmC,EAAe,OAEjB,IAD+B,mBAApBA,EAAe,SAAiBA,EAAe,OAAI,CAACA,EAAe,SACvEA,EAAe,OAAEyC,QAmCPqqB,EAlCH9sB,EAAe,OAAEqL,QAmCjCnF,EAAawJ,QAAQod,GADvB,IAAqBA,EA/BnB3hB,GAAqBjF,EACvB,CA24NEmgC,GAGI1/B,EAAkB,IAuBlB3G,EAAkB,WACpBA,EAAkB,UAAE,cACpBqlC,YAAW,WACTA,YAAW,WACTrlC,EAAkB,UAAE,GACtB,GAAG,GACHmmC,GACF,GAAG,IAGHA,IAEF5gC,KACF,CAyCA,GA7UwB,CACtB,MACA,cACA,YACA,eACA,YACA,eACA,mBACA,sBACA,kBACA,gBACA,oBACA,yBACA,oBACA,gBACA,kBACA,YACA,MACA,MACA,WACA,QACA,mBACA,aACA,aACA,YACA,eACA,cACA,cACA,mBACA,mBACA,qBACA,oBACA,cACA,aACA,aACA,4BACA,MACA,qBACA,kBACA,gCACA,6BACA,aACA,WACA,UACA,cACA,iBACA,WACA,MACA,YACA,UACA,iBACA,aACA,SACA,WACA,eACA,qBACA,gBACA,mBACA,oBACA,gBACA,eACA,UACA,YACA,cACA,YACA,kBACA,6BACA,mBACA,sBACA,WACA,WACA,OACA,UACA,cACA,oBACA,eACA,oBACA,eACA,kBACA,qBACA,mBACA,gBACA,eACA,gBACA,gBACA,mBACA,gBACA,gBACA,mBACA,sBACA,qBACA,WACA,WACA,qBACA,4BACA,0BACA,WACA,cACA,eACA,aACA,aACA,gBACA,UACA,WACA,qBACA,aACA,4BACA,qBACA,sDACA,6BACA,6BACA,sBACA,UACA,OACA,KACA,QACA,MACA,SACA,SACA,uBACA,4BACA,0BACA,KACA,qCACA,KACA,OACA,MACA,OACA,WACA,MACA,UACA,OACA,eACA,sBACA,gBACA,eACA,mBACA,mBACA,cACA,qBACA,oBACA,wBACA,sBACA,qBACA,sBACA,cACA,sBACA,aACA,sBACA,mBACA,uBACA,4BACA,4BACA,kBACA,uBACA,mBACA,qBACA,eACA,gCACA,mBACA,wBACA,mBACA,cACA,sBACA,wBACA,mBACA,8BACA,4BACA,6BACA,iBACA,UACA,uBACA,0BACA,qBACA,sBACA,2BACA,sCACA,yCACA,yBACA,oBACA,+BACA,+BACA,iCACA,iCACA,gBACA,qBACA,uBACA,uBACA,kBACA,kBACA,kBACA,mBACA,cACA,wBACA,8BACA,oBACA,qBACA,gBACA,wBACA,0BACA,sBACA,gBACA,mBACA,kBACA,6BACA,kBACA,gBACA,SACA,SACA,wBACA,gBACA,gBACA,aACA,sBACA,oBACA,QACA,eACA,oBACA,4BACA,sBACA,wBACA,0BACA,SAEgBnF,QAAQ6J,GAM1BpD,EAAwB,SAASy/B,IAE1BP,IAAWG,KACXH,KAAWl/B,EAAwBy/B,EAC1C,EAmGItmC,EAAgB,QAElB,IADgC,mBAArBA,EAAgB,UAAiBA,EAAgB,QAAI,CAACA,EAAgB,UAC1EA,EAAgB,QAAEyC,OAAS,GAChCzC,EAAgB,QAAE2b,KAAlB3b,GAUF,OANFkmC,KAMStmC,EAAQ2mC,KAGjB,CACC,EA57Oa,E","sources":["node_modules/hnswlib-wasm/lib/hnswlib.mjs"],"sourcesContent":["\nvar hnswlib = (() => {\n  var _scriptDir = import.meta.url;\n  \n  return (\nfunction(hnswlib = {})  {\n\n// include: shell.js\n// The Module object: Our interface to the outside world. We import\n// and export values on it. There are various ways Module can be used:\n// 1. Not defined. We create it here\n// 2. A function parameter, function(Module) { ..generated code.. }\n// 3. pre-run appended it, var Module = {}; ..generated code..\n// 4. External script tag defines var Module.\n// We need to check if Module already exists (e.g. case 3 above).\n// Substitution will be replaced with actual code on later stage of the build,\n// this way Closure Compiler will not mangle it (e.g. case 4. above).\n// Note that if you want to run closure, and also to use Module\n// after the generated code, you will need to define   var Module = {};\n// before the code. Then that object will be used in the code, and you\n// can continue to use Module afterwards as well.\nvar Module = typeof hnswlib != 'undefined' ? hnswlib : {};\n\n// Set up the promise that indicates the Module is initialized\nvar readyPromiseResolve, readyPromiseReject;\nModule['ready'] = new Promise(function(resolve, reject) {\n  readyPromiseResolve = resolve;\n  readyPromiseReject = reject;\n});\n[\"_main\",\"getExceptionMessage\",\"___get_exception_message\",\"_free\",\"___cpp_exception\",\"___cxa_increment_exception_refcount\",\"___cxa_decrement_exception_refcount\",\"___thrown_object_from_unwind_exception\",\"___getTypeName\",\"__embind_initialize_bindings\",\"_fflush\",\"onRuntimeInitialized\"].forEach((prop) => {\n  if (!Object.getOwnPropertyDescriptor(Module['ready'], prop)) {\n    Object.defineProperty(Module['ready'], prop, {\n      get: () => abort('You are getting ' + prop + ' on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js'),\n      set: () => abort('You are setting ' + prop + ' on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js'),\n    });\n  }\n});\n\n// --pre-jses are emitted after the Module integration code, so that they can\n// refer to Module (if they choose; they can also define Module)\n\n\n// Sometimes an existing Module object exists with properties\n// meant to overwrite the default module functionality. Here\n// we collect those properties and reapply _after_ we configure\n// the current environment's defaults to avoid having to be so\n// defensive during initialization.\nvar moduleOverrides = Object.assign({}, Module);\n\nvar arguments_ = [];\nvar thisProgram = './this.program';\nvar quit_ = (status, toThrow) => {\n  throw toThrow;\n};\n\n// Determine the runtime environment we are in. You can customize this by\n// setting the ENVIRONMENT setting at compile time (see settings.js).\n\nvar ENVIRONMENT_IS_WEB = true;\nvar ENVIRONMENT_IS_WORKER = false;\nvar ENVIRONMENT_IS_NODE = false;\nvar ENVIRONMENT_IS_SHELL = false;\n\nif (Module['ENVIRONMENT']) {\n  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -sENVIRONMENT=web or -sENVIRONMENT=node)');\n}\n\n// `/` should be present at the end if `scriptDirectory` is not empty\nvar scriptDirectory = '';\nfunction locateFile(path) {\n  if (Module['locateFile']) {\n    return Module['locateFile'](path, scriptDirectory);\n  }\n  return scriptDirectory + path;\n}\n\n// Hooks that are implemented differently in different runtime environments.\nvar read_,\n    readAsync,\n    readBinary,\n    setWindowTitle;\n\nif (ENVIRONMENT_IS_SHELL) {\n\n  if ((typeof process == 'object' && typeof require === 'function') || typeof window == 'object' || typeof importScripts == 'function') throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');\n\n  if (typeof read != 'undefined') {\n    read_ = function shell_read(f) {\n      const data = tryParseAsDataURI(f);\n      if (data) {\n        return intArrayToString(data);\n      }\n      return read(f);\n    };\n  }\n\n  readBinary = function readBinary(f) {\n    let data;\n    data = tryParseAsDataURI(f);\n    if (data) {\n      return data;\n    }\n    if (typeof readbuffer == 'function') {\n      return new Uint8Array(readbuffer(f));\n    }\n    data = read(f, 'binary');\n    assert(typeof data == 'object');\n    return data;\n  };\n\n  readAsync = function readAsync(f, onload, onerror) {\n    setTimeout(() => onload(readBinary(f)), 0);\n  };\n\n  if (typeof clearTimeout == 'undefined') {\n    globalThis.clearTimeout = (id) => {};\n  }\n\n  if (typeof scriptArgs != 'undefined') {\n    arguments_ = scriptArgs;\n  } else if (typeof arguments != 'undefined') {\n    arguments_ = arguments;\n  }\n\n  if (typeof quit == 'function') {\n    quit_ = (status, toThrow) => {\n      // Unlike node which has process.exitCode, d8 has no such mechanism. So we\n      // have no way to set the exit code and then let the program exit with\n      // that code when it naturally stops running (say, when all setTimeouts\n      // have completed). For that reason, we must call `quit` - the only way to\n      // set the exit code - but quit also halts immediately.  To increase\n      // consistency with node (and the web) we schedule the actual quit call\n      // using a setTimeout to give the current stack and any exception handlers\n      // a chance to run.  This enables features such as addOnPostRun (which\n      // expected to be able to run code after main returns).\n      setTimeout(() => {\n        if (!(toThrow instanceof ExitStatus)) {\n          let toLog = toThrow;\n          if (toThrow && typeof toThrow == 'object' && toThrow.stack) {\n            toLog = [toThrow, toThrow.stack];\n          }\n          err('exiting due to exception: ' + toLog);\n        }\n        quit(status);\n      });\n      throw toThrow;\n    };\n  }\n\n  if (typeof print != 'undefined') {\n    // Prefer to use print/printErr where they exist, as they usually work better.\n    if (typeof console == 'undefined') console = /** @type{!Console} */({});\n    console.log = /** @type{!function(this:Console, ...*): undefined} */ (print);\n    console.warn = console.error = /** @type{!function(this:Console, ...*): undefined} */ (typeof printErr != 'undefined' ? printErr : print);\n  }\n\n} else\n\n// Note that this includes Node.js workers when relevant (pthreads is enabled).\n// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and\n// ENVIRONMENT_IS_NODE.\nif (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {\n  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled\n    scriptDirectory = self.location.href;\n  } else if (typeof document != 'undefined' && document.currentScript) { // web\n    scriptDirectory = document.currentScript.src;\n  }\n  // When MODULARIZE, this JS may be executed later, after document.currentScript\n  // is gone, so we saved it, and we use it here instead of any other info.\n  if (_scriptDir) {\n    scriptDirectory = _scriptDir;\n  }\n  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.\n  // otherwise, slice off the final part of the url to find the script directory.\n  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,\n  // and scriptDirectory will correctly be replaced with an empty string.\n  // If scriptDirectory contains a query (starting with ?) or a fragment (starting with #),\n  // they are removed because they could contain a slash.\n  if (scriptDirectory.indexOf('blob:') !== 0) {\n    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.replace(/[?#].*/, \"\").lastIndexOf('/')+1);\n  } else {\n    scriptDirectory = '';\n  }\n\n  if (!(typeof window == 'object' || typeof importScripts == 'function')) throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');\n\n  // Differentiate the Web Worker from the Node Worker case, as reading must\n  // be done differently.\n  {\n// include: web_or_worker_shell_read.js\nread_ = (url) => {\n    try {\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', url, false);\n      xhr.send(null);\n      return xhr.responseText;\n    } catch (err) {\n      var data = tryParseAsDataURI(url);\n      if (data) {\n        return intArrayToString(data);\n      }\n      throw err;\n    }\n  }\n\n  if (ENVIRONMENT_IS_WORKER) {\n    readBinary = (url) => {\n      try {\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', url, false);\n        xhr.responseType = 'arraybuffer';\n        xhr.send(null);\n        return new Uint8Array(/** @type{!ArrayBuffer} */(xhr.response));\n      } catch (err) {\n        var data = tryParseAsDataURI(url);\n        if (data) {\n          return data;\n        }\n        throw err;\n      }\n    };\n  }\n\n  readAsync = (url, onload, onerror) => {\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', url, true);\n    xhr.responseType = 'arraybuffer';\n    xhr.onload = () => {\n      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0\n        onload(xhr.response);\n        return;\n      }\n      var data = tryParseAsDataURI(url);\n      if (data) {\n        onload(data.buffer);\n        return;\n      }\n      onerror();\n    };\n    xhr.onerror = onerror;\n    xhr.send(null);\n  }\n\n// end include: web_or_worker_shell_read.js\n  }\n\n  setWindowTitle = (title) => document.title = title;\n} else\n{\n  throw new Error('environment detection error');\n}\n\nvar out = Module['print'] || console.log.bind(console);\nvar err = Module['printErr'] || console.warn.bind(console);\n\n// Merge back in the overrides\nObject.assign(Module, moduleOverrides);\n// Free the object hierarchy contained in the overrides, this lets the GC\n// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.\nmoduleOverrides = null;\ncheckIncomingModuleAPI();\n\n// Emit code to handle expected values on the Module object. This applies Module.x\n// to the proper local x. This has two benefits: first, we only emit it if it is\n// expected to arrive, and second, by using a local everywhere else that can be\n// minified.\n\nif (Module['arguments']) arguments_ = Module['arguments'];legacyModuleProp('arguments', 'arguments_');\n\nif (Module['thisProgram']) thisProgram = Module['thisProgram'];legacyModuleProp('thisProgram', 'thisProgram');\n\nif (Module['quit']) quit_ = Module['quit'];legacyModuleProp('quit', 'quit_');\n\n// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message\n// Assertions on removed incoming Module JS APIs.\nassert(typeof Module['memoryInitializerPrefixURL'] == 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');\nassert(typeof Module['pthreadMainPrefixURL'] == 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');\nassert(typeof Module['cdInitializerPrefixURL'] == 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');\nassert(typeof Module['filePackagePrefixURL'] == 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');\nassert(typeof Module['read'] == 'undefined', 'Module.read option was removed (modify read_ in JS)');\nassert(typeof Module['readAsync'] == 'undefined', 'Module.readAsync option was removed (modify readAsync in JS)');\nassert(typeof Module['readBinary'] == 'undefined', 'Module.readBinary option was removed (modify readBinary in JS)');\nassert(typeof Module['setWindowTitle'] == 'undefined', 'Module.setWindowTitle option was removed (modify setWindowTitle in JS)');\nassert(typeof Module['TOTAL_MEMORY'] == 'undefined', 'Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY');\nlegacyModuleProp('read', 'read_');\nlegacyModuleProp('readAsync', 'readAsync');\nlegacyModuleProp('readBinary', 'readBinary');\nlegacyModuleProp('setWindowTitle', 'setWindowTitle');\n\nvar PROXYFS = 'PROXYFS is no longer included by default; build with -lproxyfs.js';\nvar WORKERFS = 'WORKERFS is no longer included by default; build with -lworkerfs.js';\nvar NODEFS = 'NODEFS is no longer included by default; build with -lnodefs.js';\n\nassert(!ENVIRONMENT_IS_WORKER, \"worker environment detected but not enabled at build time.  Add 'worker' to `-sENVIRONMENT` to enable.\");\n\nassert(!ENVIRONMENT_IS_NODE, \"node environment detected but not enabled at build time.  Add 'node' to `-sENVIRONMENT` to enable.\");\n\nassert(!ENVIRONMENT_IS_SHELL, \"shell environment detected but not enabled at build time.  Add 'shell' to `-sENVIRONMENT` to enable.\");\n\n\n// end include: shell.js\n// include: preamble.js\n// === Preamble library stuff ===\n\n// Documentation for the public APIs defined in this file must be updated in:\n//    site/source/docs/api_reference/preamble.js.rst\n// A prebuilt local version of the documentation is available at:\n//    site/build/text/docs/api_reference/preamble.js.txt\n// You can also build docs locally as HTML or other formats in site/\n// An online HTML version (which may be of a different version of Emscripten)\n//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html\n\nvar wasmBinary;\nif (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];legacyModuleProp('wasmBinary', 'wasmBinary');\nvar noExitRuntime = Module['noExitRuntime'] || true;legacyModuleProp('noExitRuntime', 'noExitRuntime');\n\nif (typeof WebAssembly != 'object') {\n  abort('no native wasm support detected');\n}\n\n// Wasm globals\n\nvar wasmMemory;\n\n//========================================\n// Runtime essentials\n//========================================\n\n// whether we are quitting the application. no code should run after this.\n// set in exit() and abort()\nvar ABORT = false;\n\n// set by exit() and abort().  Passed to 'onExit' handler.\n// NOTE: This is also used as the process return code code in shell environments\n// but only when noExitRuntime is false.\nvar EXITSTATUS;\n\n/** @type {function(*, string=)} */\nfunction assert(condition, text) {\n  if (!condition) {\n    abort('Assertion failed' + (text ? ': ' + text : ''));\n  }\n}\n\n// We used to include malloc/free by default in the past. Show a helpful error in\n// builds with assertions.\n\n// Memory management\n\nvar HEAP,\n/** @type {!Int8Array} */\n  HEAP8,\n/** @type {!Uint8Array} */\n  HEAPU8,\n/** @type {!Int16Array} */\n  HEAP16,\n/** @type {!Uint16Array} */\n  HEAPU16,\n/** @type {!Int32Array} */\n  HEAP32,\n/** @type {!Uint32Array} */\n  HEAPU32,\n/** @type {!Float32Array} */\n  HEAPF32,\n/** @type {!Float64Array} */\n  HEAPF64;\n\nfunction updateMemoryViews() {\n  var b = wasmMemory.buffer;\n  Module['HEAP8'] = HEAP8 = new Int8Array(b);\n  Module['HEAP16'] = HEAP16 = new Int16Array(b);\n  Module['HEAP32'] = HEAP32 = new Int32Array(b);\n  Module['HEAPU8'] = HEAPU8 = new Uint8Array(b);\n  Module['HEAPU16'] = HEAPU16 = new Uint16Array(b);\n  Module['HEAPU32'] = HEAPU32 = new Uint32Array(b);\n  Module['HEAPF32'] = HEAPF32 = new Float32Array(b);\n  Module['HEAPF64'] = HEAPF64 = new Float64Array(b);\n}\n\nassert(!Module['STACK_SIZE'], 'STACK_SIZE can no longer be set at runtime.  Use -sSTACK_SIZE at link time')\n\nassert(typeof Int32Array != 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray != undefined && Int32Array.prototype.set != undefined,\n       'JS engine does not provide full typed array support');\n\n// If memory is defined in wasm, the user can't provide it, or set INITIAL_MEMORY\nassert(!Module['wasmMemory'], 'Use of `wasmMemory` detected.  Use -sIMPORTED_MEMORY to define wasmMemory externally');\nassert(!Module['INITIAL_MEMORY'], 'Detected runtime INITIAL_MEMORY setting.  Use -sIMPORTED_MEMORY to define wasmMemory dynamically');\n\n// include: runtime_init_table.js\n// In regular non-RELOCATABLE mode the table is exported\n// from the wasm module and this will be assigned once\n// the exports are available.\nvar wasmTable;\n\n// end include: runtime_init_table.js\n// include: runtime_stack_check.js\n// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.\nfunction writeStackCookie() {\n  var max = _emscripten_stack_get_end();\n  assert((max & 3) == 0);\n  // If the stack ends at address zero we write our cookies 4 bytes into the\n  // stack.  This prevents interference with the (separate) address-zero check\n  // below.\n  if (max == 0) {\n    max += 4;\n  }\n  // The stack grow downwards towards _emscripten_stack_get_end.\n  // We write cookies to the final two words in the stack and detect if they are\n  // ever overwritten.\n  HEAPU32[((max)>>2)] = 0x02135467;\n  HEAPU32[(((max)+(4))>>2)] = 0x89BACDFE;\n  // Also test the global address 0 for integrity.\n  HEAPU32[0] = 0x63736d65; /* 'emsc' */\n}\n\nfunction checkStackCookie() {\n  if (ABORT) return;\n  var max = _emscripten_stack_get_end();\n  // See writeStackCookie().\n  if (max == 0) {\n    max += 4;\n  }\n  var cookie1 = HEAPU32[((max)>>2)];\n  var cookie2 = HEAPU32[(((max)+(4))>>2)];\n  if (cookie1 != 0x02135467 || cookie2 != 0x89BACDFE) {\n    abort('Stack overflow! Stack cookie has been overwritten at ' + ptrToString(max) + ', expected hex dwords 0x89BACDFE and 0x2135467, but received ' + ptrToString(cookie2) + ' ' + ptrToString(cookie1));\n  }\n  // Also test the global address 0 for integrity.\n  if (HEAPU32[0] !== 0x63736d65 /* 'emsc' */) {\n    abort('Runtime error: The application has corrupted its heap memory area (address zero)!');\n  }\n}\n\n// end include: runtime_stack_check.js\n// include: runtime_assertions.js\n// Endianness check\n(function() {\n  var h16 = new Int16Array(1);\n  var h8 = new Int8Array(h16.buffer);\n  h16[0] = 0x6373;\n  if (h8[0] !== 0x73 || h8[1] !== 0x63) throw 'Runtime error: expected the system to be little-endian! (Run with -sSUPPORT_BIG_ENDIAN to bypass)';\n})();\n\n// end include: runtime_assertions.js\nvar __ATPRERUN__  = []; // functions called before the runtime is initialized\nvar __ATINIT__    = []; // functions called during startup\nvar __ATEXIT__    = []; // functions called during shutdown\nvar __ATPOSTRUN__ = []; // functions called after the main() is called\n\nvar runtimeInitialized = false;\n\nvar runtimeKeepaliveCounter = 0;\n\nfunction keepRuntimeAlive() {\n  return noExitRuntime || runtimeKeepaliveCounter > 0;\n}\n\nfunction preRun() {\n  if (Module['preRun']) {\n    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];\n    while (Module['preRun'].length) {\n      addOnPreRun(Module['preRun'].shift());\n    }\n  }\n  callRuntimeCallbacks(__ATPRERUN__);\n}\n\nfunction initRuntime() {\n  assert(!runtimeInitialized);\n  runtimeInitialized = true;\n\n  checkStackCookie();\n\n  \nif (!Module[\"noFSInit\"] && !FS.init.initialized)\n  FS.init();\nFS.ignorePermissions = false;\n\nTTY.init();\n  callRuntimeCallbacks(__ATINIT__);\n}\n\nfunction postRun() {\n  checkStackCookie();\n\n  if (Module['postRun']) {\n    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];\n    while (Module['postRun'].length) {\n      addOnPostRun(Module['postRun'].shift());\n    }\n  }\n\n  callRuntimeCallbacks(__ATPOSTRUN__);\n}\n\nfunction addOnPreRun(cb) {\n  __ATPRERUN__.unshift(cb);\n}\n\nfunction addOnInit(cb) {\n  __ATINIT__.unshift(cb);\n}\n\nfunction addOnExit(cb) {\n}\n\nfunction addOnPostRun(cb) {\n  __ATPOSTRUN__.unshift(cb);\n}\n\n// include: runtime_math.js\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc\n\nassert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');\nassert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');\nassert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');\nassert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');\n\n// end include: runtime_math.js\n// A counter of dependencies for calling run(). If we need to\n// do asynchronous work before running, increment this and\n// decrement it. Incrementing must happen in a place like\n// Module.preRun (used by emcc to add file preloading).\n// Note that you can add dependencies in preRun, even though\n// it happens right before run - run will be postponed until\n// the dependencies are met.\nvar runDependencies = 0;\nvar runDependencyWatcher = null;\nvar dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled\nvar runDependencyTracking = {};\n\nfunction getUniqueRunDependency(id) {\n  var orig = id;\n  while (1) {\n    if (!runDependencyTracking[id]) return id;\n    id = orig + Math.random();\n  }\n}\n\nfunction addRunDependency(id) {\n  runDependencies++;\n\n  if (Module['monitorRunDependencies']) {\n    Module['monitorRunDependencies'](runDependencies);\n  }\n\n  if (id) {\n    assert(!runDependencyTracking[id]);\n    runDependencyTracking[id] = 1;\n    if (runDependencyWatcher === null && typeof setInterval != 'undefined') {\n      // Check for missing dependencies every few seconds\n      runDependencyWatcher = setInterval(function() {\n        if (ABORT) {\n          clearInterval(runDependencyWatcher);\n          runDependencyWatcher = null;\n          return;\n        }\n        var shown = false;\n        for (var dep in runDependencyTracking) {\n          if (!shown) {\n            shown = true;\n            err('still waiting on run dependencies:');\n          }\n          err('dependency: ' + dep);\n        }\n        if (shown) {\n          err('(end of list)');\n        }\n      }, 10000);\n    }\n  } else {\n    err('warning: run dependency added without ID');\n  }\n}\n\nfunction removeRunDependency(id) {\n  runDependencies--;\n\n  if (Module['monitorRunDependencies']) {\n    Module['monitorRunDependencies'](runDependencies);\n  }\n\n  if (id) {\n    assert(runDependencyTracking[id]);\n    delete runDependencyTracking[id];\n  } else {\n    err('warning: run dependency removed without ID');\n  }\n  if (runDependencies == 0) {\n    if (runDependencyWatcher !== null) {\n      clearInterval(runDependencyWatcher);\n      runDependencyWatcher = null;\n    }\n    if (dependenciesFulfilled) {\n      var callback = dependenciesFulfilled;\n      dependenciesFulfilled = null;\n      callback(); // can add another dependenciesFulfilled\n    }\n  }\n}\n\n/** @param {string|number=} what */\nfunction abort(what) {\n  if (Module['onAbort']) {\n    Module['onAbort'](what);\n  }\n\n  what = 'Aborted(' + what + ')';\n  // TODO(sbc): Should we remove printing and leave it up to whoever\n  // catches the exception?\n  err(what);\n\n  ABORT = true;\n  EXITSTATUS = 1;\n\n  // Use a wasm runtime error, because a JS error might be seen as a foreign\n  // exception, which means we'd run destructors on it. We need the error to\n  // simply make the program stop.\n  // FIXME This approach does not work in Wasm EH because it currently does not assume\n  // all RuntimeErrors are from traps; it decides whether a RuntimeError is from\n  // a trap or not based on a hidden field within the object. So at the moment\n  // we don't have a way of throwing a wasm trap from JS. TODO Make a JS API that\n  // allows this in the wasm spec.\n\n  // Suppress closure compiler warning here. Closure compiler's builtin extern\n  // defintion for WebAssembly.RuntimeError claims it takes no arguments even\n  // though it can.\n  // TODO(https://github.com/google/closure-compiler/pull/3913): Remove if/when upstream closure gets fixed.\n  // See above, in the meantime, we resort to wasm code for trapping.\n  //\n  // In case abort() is called before the module is initialized, Module['asm']\n  // and its exported '__trap' function is not available, in which case we throw\n  // a RuntimeError.\n  //\n  // We trap instead of throwing RuntimeError to prevent infinite-looping in\n  // Wasm EH code (because RuntimeError is considered as a foreign exception and\n  // caught by 'catch_all'), but in case throwing RuntimeError is fine because\n  // the module has not even been instantiated, even less running.\n  if (runtimeInitialized) {\n    ___trap();\n  }\n  /** @suppress {checkTypes} */\n  var e = new WebAssembly.RuntimeError(what);\n\n  readyPromiseReject(e);\n  // Throw the error whether or not MODULARIZE is set because abort is used\n  // in code paths apart from instantiation where an exception is expected\n  // to be thrown when abort is called.\n  throw e;\n}\n\n// include: memoryprofiler.js\n// end include: memoryprofiler.js\n// include: URIUtils.js\n// Prefix of data URIs emitted by SINGLE_FILE and related options.\nvar dataURIPrefix = 'data:application/octet-stream;base64,';\n\n// Indicates whether filename is a base64 data URI.\nfunction isDataURI(filename) {\n  // Prefix of data URIs emitted by SINGLE_FILE and related options.\n  return filename.startsWith(dataURIPrefix);\n}\n\n// Indicates whether filename is delivered via file protocol (as opposed to http/https)\nfunction isFileURI(filename) {\n  return filename.startsWith('file://');\n}\n\n// end include: URIUtils.js\n/** @param {boolean=} fixedasm */\nfunction createExportWrapper(name, fixedasm) {\n  return function() {\n    var displayName = name;\n    var asm = fixedasm;\n    if (!fixedasm) {\n      asm = Module['asm'];\n    }\n    assert(runtimeInitialized, 'native function `' + displayName + '` called before runtime initialization');\n    if (!asm[name]) {\n      assert(asm[name], 'exported native function `' + displayName + '` not found');\n    }\n    return asm[name].apply(null, arguments);\n  };\n}\n\n// include: runtime_exceptions.js\n// end include: runtime_exceptions.js\nvar wasmBinaryFile;\n  wasmBinaryFile = 'data:application/octet-stream;base64,';\n  if (!isDataURI(wasmBinaryFile)) {\n    wasmBinaryFile = locateFile(wasmBinaryFile);\n  }\n\nfunction getBinary(file) {\n  try {\n    if (file == wasmBinaryFile && wasmBinary) {\n      return new Uint8Array(wasmBinary);\n    }\n    var binary = tryParseAsDataURI(file);\n    if (binary) {\n      return binary;\n    }\n    if (readBinary) {\n      return readBinary(file);\n    }\n    throw \"both async and sync fetching of the wasm failed\";\n  }\n  catch (err) {\n    abort(err);\n  }\n}\n\nfunction getBinaryPromise(binaryFile) {\n  // If we don't have the binary yet, try to load it asynchronously.\n  // Fetch has some additional restrictions over XHR, like it can't be used on a file:// url.\n  // See https://github.com/github/fetch/pull/92#issuecomment-140665932\n  // Cordova or Electron apps are typically loaded from a file:// url.\n  // So use fetch if it is available and the url is not a file, otherwise fall back to XHR.\n  if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {\n    if (typeof fetch == 'function'\n    ) {\n      return fetch(binaryFile, { credentials: 'same-origin' }).then(function(response) {\n        if (!response['ok']) {\n          throw \"failed to load wasm binary file at '\" + binaryFile + \"'\";\n        }\n        return response['arrayBuffer']();\n      }).catch(function () {\n          return getBinary(binaryFile);\n      });\n    }\n  }\n\n  // Otherwise, getBinary should be able to get it synchronously\n  return Promise.resolve().then(function() { return getBinary(binaryFile); });\n}\n\nfunction instantiateArrayBuffer(binaryFile, imports, receiver) {\n  return getBinaryPromise(binaryFile).then(function(binary) {\n    return WebAssembly.instantiate(binary, imports);\n  }).then(function (instance) {\n    return instance;\n  }).then(receiver, function(reason) {\n    err('failed to asynchronously prepare wasm: ' + reason);\n\n    // Warn on some common problems.\n    if (isFileURI(wasmBinaryFile)) {\n      err('warning: Loading from a file URI (' + wasmBinaryFile + ') is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing');\n    }\n    abort(reason);\n  });\n}\n\nfunction instantiateAsync(binary, binaryFile, imports, callback) {\n  if (!binary &&\n      typeof WebAssembly.instantiateStreaming == 'function' &&\n      !isDataURI(binaryFile) &&\n      typeof fetch == 'function') {\n    return fetch(binaryFile, { credentials: 'same-origin' }).then(function(response) {\n      // Suppress closure warning here since the upstream definition for\n      // instantiateStreaming only allows Promise<Repsponse> rather than\n      // an actual Response.\n      // TODO(https://github.com/google/closure-compiler/pull/3913): Remove if/when upstream closure is fixed.\n      /** @suppress {checkTypes} */\n      var result = WebAssembly.instantiateStreaming(response, imports);\n\n      return result.then(\n        callback,\n        function(reason) {\n          // We expect the most common failure cause to be a bad MIME type for the binary,\n          // in which case falling back to ArrayBuffer instantiation should work.\n          err('wasm streaming compile failed: ' + reason);\n          err('falling back to ArrayBuffer instantiation');\n          return instantiateArrayBuffer(binaryFile, imports, callback);\n        });\n    });\n  } else {\n    return instantiateArrayBuffer(binaryFile, imports, callback);\n  }\n}\n\n// Create the wasm instance.\n// Receives the wasm imports, returns the exports.\nfunction createWasm() {\n  // prepare imports\n  var info = {\n    'env': wasmImports,\n    'wasi_snapshot_preview1': wasmImports,\n  };\n  // Load the wasm module and create an instance of using native support in the JS engine.\n  // handle a generated wasm instance, receiving its exports and\n  // performing other necessary setup\n  /** @param {WebAssembly.Module=} module*/\n  function receiveInstance(instance, module) {\n    var exports = instance.exports;\n\n    Module['asm'] = exports;\n\n    wasmMemory = Module['asm']['memory'];\n    assert(wasmMemory, \"memory not found in wasm exports\");\n    // This assertion doesn't hold when emscripten is run in --post-link\n    // mode.\n    // TODO(sbc): Read INITIAL_MEMORY out of the wasm file in post-link mode.\n    //assert(wasmMemory.buffer.byteLength === 16777216);\n    updateMemoryViews();\n\n    wasmTable = Module['asm']['__indirect_function_table'];\n    assert(wasmTable, \"table not found in wasm exports\");\n\n    addOnInit(Module['asm']['__wasm_call_ctors']);\n\n    removeRunDependency('wasm-instantiate');\n\n    return exports;\n  }\n  // wait for the pthread pool (if any)\n  addRunDependency('wasm-instantiate');\n\n  // Prefer streaming instantiation if available.\n  // Async compilation can be confusing when an error on the page overwrites Module\n  // (for example, if the order of elements is wrong, and the one defining Module is\n  // later), so we save Module and check it later.\n  var trueModule = Module;\n  function receiveInstantiationResult(result) {\n    // 'result' is a ResultObject object which has both the module and instance.\n    // receiveInstance() will swap in the exports (to Module.asm) so they can be called\n    assert(Module === trueModule, 'the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?');\n    trueModule = null;\n    // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.\n    // When the regression is fixed, can restore the above PTHREADS-enabled path.\n    receiveInstance(result['instance']);\n  }\n\n  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback\n  // to manually instantiate the Wasm module themselves. This allows pages to\n  // run the instantiation parallel to any other async startup actions they are\n  // performing.\n  // Also pthreads and wasm workers initialize the wasm instance through this\n  // path.\n  if (Module['instantiateWasm']) {\n\n    try {\n      return Module['instantiateWasm'](info, receiveInstance);\n    } catch(e) {\n      err('Module.instantiateWasm callback failed with error: ' + e);\n        // If instantiation fails, reject the module ready promise.\n        readyPromiseReject(e);\n    }\n  }\n\n  // If instantiation fails, reject the module ready promise.\n  instantiateAsync(wasmBinary, wasmBinaryFile, info, receiveInstantiationResult).catch(readyPromiseReject);\n  return {}; // no exports yet; we'll fill them in later\n}\n\n// Globals used by JS i64 conversions (see makeSetValue)\nvar tempDouble;\nvar tempI64;\n\n// include: runtime_debug.js\nfunction legacyModuleProp(prop, newName) {\n  if (!Object.getOwnPropertyDescriptor(Module, prop)) {\n    Object.defineProperty(Module, prop, {\n      configurable: true,\n      get: function() {\n        abort('Module.' + prop + ' has been replaced with plain ' + newName + ' (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)');\n      }\n    });\n  }\n}\n\nfunction ignoredModuleProp(prop) {\n  if (Object.getOwnPropertyDescriptor(Module, prop)) {\n    abort('`Module.' + prop + '` was supplied but `' + prop + '` not included in INCOMING_MODULE_JS_API');\n  }\n}\n\n// forcing the filesystem exports a few things by default\nfunction isExportedByForceFilesystem(name) {\n  return name === 'FS_createPath' ||\n         name === 'FS_createDataFile' ||\n         name === 'FS_createPreloadedFile' ||\n         name === 'FS_unlink' ||\n         name === 'addRunDependency' ||\n         // The old FS has some functionality that WasmFS lacks.\n         name === 'FS_createLazyFile' ||\n         name === 'FS_createDevice' ||\n         name === 'removeRunDependency';\n}\n\nfunction missingGlobal(sym, msg) {\n  if (typeof globalThis !== 'undefined') {\n    Object.defineProperty(globalThis, sym, {\n      configurable: true,\n      get: function() {\n        warnOnce('`' + sym + '` is not longer defined by emscripten. ' + msg);\n        return undefined;\n      }\n    });\n  }\n}\n\nmissingGlobal('buffer', 'Please use HEAP8.buffer or wasmMemory.buffer');\n\nfunction missingLibrarySymbol(sym) {\n  if (typeof globalThis !== 'undefined' && !Object.getOwnPropertyDescriptor(globalThis, sym)) {\n    Object.defineProperty(globalThis, sym, {\n      configurable: true,\n      get: function() {\n        // Can't `abort()` here because it would break code that does runtime\n        // checks.  e.g. `if (typeof SDL === 'undefined')`.\n        var msg = '`' + sym + '` is a library symbol and not included by default; add it to your library.js __deps or to DEFAULT_LIBRARY_FUNCS_TO_INCLUDE on the command line';\n        // DEFAULT_LIBRARY_FUNCS_TO_INCLUDE requires the name as it appears in\n        // library.js, which means $name for a JS name with no prefix, or name\n        // for a JS name like _name.\n        var librarySymbol = sym;\n        if (!librarySymbol.startsWith('_')) {\n          librarySymbol = '$' + sym;\n        }\n        msg += \" (e.g. -sDEFAULT_LIBRARY_FUNCS_TO_INCLUDE=\" + librarySymbol + \")\";\n        if (isExportedByForceFilesystem(sym)) {\n          msg += '. Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you';\n        }\n        warnOnce(msg);\n        return undefined;\n      }\n    });\n  }\n  // Any symbol that is not included from the JS libary is also (by definition)\n  // not exported on the Module object.\n  unexportedRuntimeSymbol(sym);\n}\n\nfunction unexportedRuntimeSymbol(sym) {\n  if (!Object.getOwnPropertyDescriptor(Module, sym)) {\n    Object.defineProperty(Module, sym, {\n      configurable: true,\n      get: function() {\n        var msg = \"'\" + sym + \"' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)\";\n        if (isExportedByForceFilesystem(sym)) {\n          msg += '. Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you';\n        }\n        abort(msg);\n      }\n    });\n  }\n}\n\n// Used by XXXXX_DEBUG settings to output debug messages.\nfunction dbg(text) {\n  // TODO(sbc): Make this configurable somehow.  Its not always convenient for\n  // logging to show up as errors.\n  console.error(text);\n}\n\n// end include: runtime_debug.js\n// === Body ===\n\nvar ASM_CONSTS = {\n  44983: ($0, $1) => { let type = UTF8ToString($0); let directory = UTF8ToString($1); let allocatedDir = _malloc(directory.length + 1); stringToUTF8(directory, allocatedDir, directory.length + 1); let jsAllocatedDir = UTF8ToString(allocatedDir); if (type == \"IDBFS\") { FS.mkdir(jsAllocatedDir); FS.mount(IDBFS, {}, jsAllocatedDir); console.log('EmscriptenFileSystemManager: Mounting IDBFS filesystem...\\n'); } else { throw new Error('Unsupported filesystem type, IDBFS is supported: ' + type); } _free(allocatedDir); }\n};\nfunction syncIdb_js(populateFromFS) { try { FS.syncfs(populateFromFS, function(err) { setTimeout(function() { if (err) { console.error('b. jsFS Error: syncing FS:', err); Module.setIdbfsSynced(false); } else { console.log('b. jsFS synced successfully'); Module.setIdbfsSynced(true); } }, 1); }); } catch (err) { Module.setIdbfsSynced(false); } }\n\n\n\n// end include: preamble.js\n\n  /** @constructor */\n  function ExitStatus(status) {\n      this.name = 'ExitStatus';\n      this.message = 'Program terminated with exit(' + status + ')';\n      this.status = status;\n    }\n\n  function callRuntimeCallbacks(callbacks) {\n      while (callbacks.length > 0) {\n        // Pass the module as the first argument.\n        callbacks.shift()(Module);\n      }\n    }\n\n  \n  function getCppExceptionTag() {\n      // In static linking, tags are defined within the wasm module and are\n      // exported, whereas in dynamic linking, tags are defined in library.js in\n      // JS code and wasm modules import them.\n      return Module['asm']['__cpp_exception'];\n    }\n  \n  function getCppExceptionThrownObjectFromWebAssemblyException(ex) {\n      // In Wasm EH, the value extracted from WebAssembly.Exception is a pointer\n      // to the unwind header. Convert it to the actual thrown value.\n      var unwind_header = ex.getArg(getCppExceptionTag(), 0);\n      return ___thrown_object_from_unwind_exception(unwind_header);\n    }\n  function decrementExceptionRefcount(ex) {\n      var ptr = getCppExceptionThrownObjectFromWebAssemblyException(ex);\n      ___cxa_decrement_exception_refcount(ptr);\n    }\n\n  function withStackSave(f) {\n      var stack = stackSave();\n      var ret = f();\n      stackRestore(stack);\n      return ret;\n    }\n  \n  \n  \n  function lengthBytesUTF8(str) {\n      var len = 0;\n      for (var i = 0; i < str.length; ++i) {\n        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code\n        // unit, not a Unicode code point of the character! So decode\n        // UTF16->UTF32->UTF8.\n        // See http://unicode.org/faq/utf_bom.html#utf16-3\n        var c = str.charCodeAt(i); // possibly a lead surrogate\n        if (c <= 0x7F) {\n          len++;\n        } else if (c <= 0x7FF) {\n          len += 2;\n        } else if (c >= 0xD800 && c <= 0xDFFF) {\n          len += 4; ++i;\n        } else {\n          len += 3;\n        }\n      }\n      return len;\n    }\n  \n  function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {\n      // Parameter maxBytesToWrite is not optional. Negative values, 0, null,\n      // undefined and false each don't write out any bytes.\n      if (!(maxBytesToWrite > 0))\n        return 0;\n  \n      var startIdx = outIdx;\n      var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.\n      for (var i = 0; i < str.length; ++i) {\n        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code\n        // unit, not a Unicode code point of the character! So decode\n        // UTF16->UTF32->UTF8.\n        // See http://unicode.org/faq/utf_bom.html#utf16-3\n        // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description\n        // and https://www.ietf.org/rfc/rfc2279.txt\n        // and https://tools.ietf.org/html/rfc3629\n        var u = str.charCodeAt(i); // possibly a lead surrogate\n        if (u >= 0xD800 && u <= 0xDFFF) {\n          var u1 = str.charCodeAt(++i);\n          u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);\n        }\n        if (u <= 0x7F) {\n          if (outIdx >= endIdx) break;\n          heap[outIdx++] = u;\n        } else if (u <= 0x7FF) {\n          if (outIdx + 1 >= endIdx) break;\n          heap[outIdx++] = 0xC0 | (u >> 6);\n          heap[outIdx++] = 0x80 | (u & 63);\n        } else if (u <= 0xFFFF) {\n          if (outIdx + 2 >= endIdx) break;\n          heap[outIdx++] = 0xE0 | (u >> 12);\n          heap[outIdx++] = 0x80 | ((u >> 6) & 63);\n          heap[outIdx++] = 0x80 | (u & 63);\n        } else {\n          if (outIdx + 3 >= endIdx) break;\n          if (u > 0x10FFFF) warnOnce('Invalid Unicode code point ' + ptrToString(u) + ' encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x10FFFF).');\n          heap[outIdx++] = 0xF0 | (u >> 18);\n          heap[outIdx++] = 0x80 | ((u >> 12) & 63);\n          heap[outIdx++] = 0x80 | ((u >> 6) & 63);\n          heap[outIdx++] = 0x80 | (u & 63);\n        }\n      }\n      // Null-terminate the pointer to the buffer.\n      heap[outIdx] = 0;\n      return outIdx - startIdx;\n    }\n  function stringToUTF8(str, outPtr, maxBytesToWrite) {\n      assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');\n      return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);\n    }\n  function stringToUTF8OnStack(str) {\n      var size = lengthBytesUTF8(str) + 1;\n      var ret = stackAlloc(size);\n      stringToUTF8(str, ret, size);\n      return ret;\n    }\n  \n  var UTF8Decoder = typeof TextDecoder != 'undefined' ? new TextDecoder('utf8') : undefined;\n  \n    /**\n     * Given a pointer 'idx' to a null-terminated UTF8-encoded string in the given\n     * array that contains uint8 values, returns a copy of that string as a\n     * Javascript String object.\n     * heapOrArray is either a regular array, or a JavaScript typed array view.\n     * @param {number} idx\n     * @param {number=} maxBytesToRead\n     * @return {string}\n     */\n  function UTF8ArrayToString(heapOrArray, idx, maxBytesToRead) {\n      var endIdx = idx + maxBytesToRead;\n      var endPtr = idx;\n      // TextDecoder needs to know the byte length in advance, it doesn't stop on\n      // null terminator by itself.  Also, use the length info to avoid running tiny\n      // strings through TextDecoder, since .subarray() allocates garbage.\n      // (As a tiny code save trick, compare endPtr against endIdx using a negation,\n      // so that undefined means Infinity)\n      while (heapOrArray[endPtr] && !(endPtr >= endIdx)) ++endPtr;\n  \n      if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) {\n        return UTF8Decoder.decode(heapOrArray.subarray(idx, endPtr));\n      }\n      var str = '';\n      // If building with TextDecoder, we have already computed the string length\n      // above, so test loop end condition against that\n      while (idx < endPtr) {\n        // For UTF8 byte structure, see:\n        // http://en.wikipedia.org/wiki/UTF-8#Description\n        // https://www.ietf.org/rfc/rfc2279.txt\n        // https://tools.ietf.org/html/rfc3629\n        var u0 = heapOrArray[idx++];\n        if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }\n        var u1 = heapOrArray[idx++] & 63;\n        if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }\n        var u2 = heapOrArray[idx++] & 63;\n        if ((u0 & 0xF0) == 0xE0) {\n          u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;\n        } else {\n          if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte ' + ptrToString(u0) + ' encountered when deserializing a UTF-8 string in wasm memory to a JS string!');\n          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heapOrArray[idx++] & 63);\n        }\n  \n        if (u0 < 0x10000) {\n          str += String.fromCharCode(u0);\n        } else {\n          var ch = u0 - 0x10000;\n          str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));\n        }\n      }\n      return str;\n    }\n  \n  \n    /**\n     * Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the\n     * emscripten HEAP, returns a copy of that string as a Javascript String object.\n     *\n     * @param {number} ptr\n     * @param {number=} maxBytesToRead - An optional length that specifies the\n     *   maximum number of bytes to read. You can omit this parameter to scan the\n     *   string until the first \u0000 byte. If maxBytesToRead is passed, and the string\n     *   at [ptr, ptr+maxBytesToReadr[ contains a null byte in the middle, then the\n     *   string will cut short at that byte index (i.e. maxBytesToRead will not\n     *   produce a string of exact length [ptr, ptr+maxBytesToRead[) N.B. mixing\n     *   frequent uses of UTF8ToString() with and without maxBytesToRead may throw\n     *   JS JIT optimizations off, so it is worth to consider consistently using one\n     * @return {string}\n     */\n  function UTF8ToString(ptr, maxBytesToRead) {\n      assert(typeof ptr == 'number');\n      return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';\n    }\n  function demangle(func) {\n      // If demangle has failed before, stop demangling any further function names\n      // This avoids an infinite recursion with malloc()->abort()->stackTrace()->demangle()->malloc()->...\n      demangle.recursionGuard = (demangle.recursionGuard|0)+1;\n      if (demangle.recursionGuard > 1) return func;\n      return withStackSave(function() {\n        try {\n          var s = func;\n          if (s.startsWith('__Z'))\n            s = s.substr(1);\n          var buf = stringToUTF8OnStack(s);\n          var status = stackAlloc(4);\n          var ret = ___cxa_demangle(buf, 0, 0, status);\n          if (HEAP32[((status)>>2)] === 0 && ret) {\n            return UTF8ToString(ret);\n          }\n          // otherwise, libcxxabi failed\n        } catch(e) {\n        } finally {\n          _free(ret);\n          if (demangle.recursionGuard < 2) --demangle.recursionGuard;\n        }\n        // failure when using libcxxabi, don't demangle\n        return func;\n      });\n    }\n\n  \n  \n  \n  \n  function getExceptionMessageCommon(ptr) {\n      return withStackSave(function() {\n        var type_addr_addr = stackAlloc(4);\n        var message_addr_addr = stackAlloc(4);\n        ___get_exception_message(ptr, type_addr_addr, message_addr_addr);\n        var type_addr = HEAPU32[((type_addr_addr)>>2)];\n        var message_addr = HEAPU32[((message_addr_addr)>>2)];\n        var type = UTF8ToString(type_addr);\n        _free(type_addr);\n        var message;\n        if (message_addr) {\n          message = UTF8ToString(message_addr);\n          _free(message_addr);\n        }\n        return [type, message];\n      });\n    }\n  function getExceptionMessage(ex) {\n      var ptr = getCppExceptionThrownObjectFromWebAssemblyException(ex);\n      return getExceptionMessageCommon(ptr);\n    }\n  Module[\"getExceptionMessage\"] = getExceptionMessage;\n\n  \n    /**\n     * @param {number} ptr\n     * @param {string} type\n     */\n  function getValue(ptr, type = 'i8') {\n    if (type.endsWith('*')) type = '*';\n    switch (type) {\n      case 'i1': return HEAP8[((ptr)>>0)];\n      case 'i8': return HEAP8[((ptr)>>0)];\n      case 'i16': return HEAP16[((ptr)>>1)];\n      case 'i32': return HEAP32[((ptr)>>2)];\n      case 'i64': return HEAP32[((ptr)>>2)];\n      case 'float': return HEAPF32[((ptr)>>2)];\n      case 'double': return HEAPF64[((ptr)>>3)];\n      case '*': return HEAPU32[((ptr)>>2)];\n      default: abort('invalid type for getValue: ' + type);\n    }\n  }\n\n  \n  function incrementExceptionRefcount(ex) {\n      var ptr = getCppExceptionThrownObjectFromWebAssemblyException(ex);\n      ___cxa_increment_exception_refcount(ptr);\n    }\n\n  function intArrayToString(array) {\n    var ret = [];\n    for (var i = 0; i < array.length; i++) {\n      var chr = array[i];\n      if (chr > 0xFF) {\n        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');\n        chr &= 0xFF;\n      }\n      ret.push(String.fromCharCode(chr));\n    }\n    return ret.join('');\n  }\n\n  function ptrToString(ptr) {\n      assert(typeof ptr === 'number');\n      return '0x' + ptr.toString(16).padStart(8, '0');\n    }\n\n  \n    /**\n     * @param {number} ptr\n     * @param {number} value\n     * @param {string} type\n     */\n  function setValue(ptr, value, type = 'i8') {\n    if (type.endsWith('*')) type = '*';\n    switch (type) {\n      case 'i1': HEAP8[((ptr)>>0)] = value; break;\n      case 'i8': HEAP8[((ptr)>>0)] = value; break;\n      case 'i16': HEAP16[((ptr)>>1)] = value; break;\n      case 'i32': HEAP32[((ptr)>>2)] = value; break;\n      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)] = tempI64[0],HEAP32[(((ptr)+(4))>>2)] = tempI64[1]); break;\n      case 'float': HEAPF32[((ptr)>>2)] = value; break;\n      case 'double': HEAPF64[((ptr)>>3)] = value; break;\n      case '*': HEAPU32[((ptr)>>2)] = value; break;\n      default: abort('invalid type for setValue: ' + type);\n    }\n  }\n\n  function jsStackTrace() {\n      var error = new Error();\n      if (!error.stack) {\n        // IE10+ special cases: It does have callstack info, but it is only\n        // populated if an Error object is thrown, so try that as a special-case.\n        try {\n          throw new Error();\n        } catch(e) {\n          error = e;\n        }\n        if (!error.stack) {\n          return '(no stack trace available)';\n        }\n      }\n      return error.stack.toString();\n    }\n  \n  function demangleAll(text) {\n      var regex =\n        /\\b_Z[\\w\\d_]+/g;\n      return text.replace(regex,\n        function(x) {\n          var y = demangle(x);\n          return x === y ? x : (y + ' [' + x + ']');\n        });\n    }\n  function stackTrace() {\n      var js = jsStackTrace();\n      if (Module['extraStackTrace']) js += '\\n' + Module['extraStackTrace']();\n      return demangleAll(js);\n    }\n\n  function warnOnce(text) {\n      if (!warnOnce.shown) warnOnce.shown = {};\n      if (!warnOnce.shown[text]) {\n        warnOnce.shown[text] = 1;\n        err(text);\n      }\n    }\n\n  function ___assert_fail(condition, filename, line, func) {\n      abort('Assertion failed: ' + UTF8ToString(condition) + ', at: ' + [filename ? UTF8ToString(filename) : 'unknown filename', line, func ? UTF8ToString(func) : 'unknown function']);\n    }\n\n  function setErrNo(value) {\n      HEAP32[((___errno_location())>>2)] = value;\n      return value;\n    }\n  \n  var PATH = {isAbs:(path) => path.charAt(0) === '/',splitPath:(filename) => {\n        var splitPathRe = /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\n        return splitPathRe.exec(filename).slice(1);\n      },normalizeArray:(parts, allowAboveRoot) => {\n        // if the path tries to go above the root, `up` ends up > 0\n        var up = 0;\n        for (var i = parts.length - 1; i >= 0; i--) {\n          var last = parts[i];\n          if (last === '.') {\n            parts.splice(i, 1);\n          } else if (last === '..') {\n            parts.splice(i, 1);\n            up++;\n          } else if (up) {\n            parts.splice(i, 1);\n            up--;\n          }\n        }\n        // if the path is allowed to go above the root, restore leading ..s\n        if (allowAboveRoot) {\n          for (; up; up--) {\n            parts.unshift('..');\n          }\n        }\n        return parts;\n      },normalize:(path) => {\n        var isAbsolute = PATH.isAbs(path),\n            trailingSlash = path.substr(-1) === '/';\n        // Normalize the path\n        path = PATH.normalizeArray(path.split('/').filter((p) => !!p), !isAbsolute).join('/');\n        if (!path && !isAbsolute) {\n          path = '.';\n        }\n        if (path && trailingSlash) {\n          path += '/';\n        }\n        return (isAbsolute ? '/' : '') + path;\n      },dirname:(path) => {\n        var result = PATH.splitPath(path),\n            root = result[0],\n            dir = result[1];\n        if (!root && !dir) {\n          // No dirname whatsoever\n          return '.';\n        }\n        if (dir) {\n          // It has a dirname, strip trailing slash\n          dir = dir.substr(0, dir.length - 1);\n        }\n        return root + dir;\n      },basename:(path) => {\n        // EMSCRIPTEN return '/'' for '/', not an empty string\n        if (path === '/') return '/';\n        path = PATH.normalize(path);\n        path = path.replace(/\\/$/, \"\");\n        var lastSlash = path.lastIndexOf('/');\n        if (lastSlash === -1) return path;\n        return path.substr(lastSlash+1);\n      },join:function() {\n        var paths = Array.prototype.slice.call(arguments);\n        return PATH.normalize(paths.join('/'));\n      },join2:(l, r) => {\n        return PATH.normalize(l + '/' + r);\n      }};\n  \n  function initRandomFill() {\n      if (typeof crypto == 'object' && typeof crypto['getRandomValues'] == 'function') {\n        // for modern web browsers\n        return (view) => crypto.getRandomValues(view);\n      } else\n      // we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096\n      abort(\"no cryptographic support found for randomDevice. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };\");\n    }\n  function randomFill(view) {\n      // Lazily init on the first invocation.\n      return (randomFill = initRandomFill())(view);\n    }\n  \n  \n  \n  var PATH_FS = {resolve:function() {\n        var resolvedPath = '',\n          resolvedAbsolute = false;\n        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n          var path = (i >= 0) ? arguments[i] : FS.cwd();\n          // Skip empty and invalid entries\n          if (typeof path != 'string') {\n            throw new TypeError('Arguments to path.resolve must be strings');\n          } else if (!path) {\n            return ''; // an invalid portion invalidates the whole thing\n          }\n          resolvedPath = path + '/' + resolvedPath;\n          resolvedAbsolute = PATH.isAbs(path);\n        }\n        // At this point the path should be resolved to a full absolute path, but\n        // handle relative paths to be safe (might happen when process.cwd() fails)\n        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter((p) => !!p), !resolvedAbsolute).join('/');\n        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n      },relative:(from, to) => {\n        from = PATH_FS.resolve(from).substr(1);\n        to = PATH_FS.resolve(to).substr(1);\n        function trim(arr) {\n          var start = 0;\n          for (; start < arr.length; start++) {\n            if (arr[start] !== '') break;\n          }\n          var end = arr.length - 1;\n          for (; end >= 0; end--) {\n            if (arr[end] !== '') break;\n          }\n          if (start > end) return [];\n          return arr.slice(start, end - start + 1);\n        }\n        var fromParts = trim(from.split('/'));\n        var toParts = trim(to.split('/'));\n        var length = Math.min(fromParts.length, toParts.length);\n        var samePartsLength = length;\n        for (var i = 0; i < length; i++) {\n          if (fromParts[i] !== toParts[i]) {\n            samePartsLength = i;\n            break;\n          }\n        }\n        var outputParts = [];\n        for (var i = samePartsLength; i < fromParts.length; i++) {\n          outputParts.push('..');\n        }\n        outputParts = outputParts.concat(toParts.slice(samePartsLength));\n        return outputParts.join('/');\n      }};\n  \n  \n  \n  /** @type {function(string, boolean=, number=)} */\n  function intArrayFromString(stringy, dontAddNull, length) {\n    var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;\n    var u8array = new Array(len);\n    var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);\n    if (dontAddNull) u8array.length = numBytesWritten;\n    return u8array;\n  }\n  var TTY = {ttys:[],init:function () {\n        // https://github.com/emscripten-core/emscripten/pull/1555\n        // if (ENVIRONMENT_IS_NODE) {\n        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY\n        //   // device, it always assumes it's a TTY device. because of this, we're forcing\n        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible\n        //   // with text files until FS.init can be refactored.\n        //   process.stdin.setEncoding('utf8');\n        // }\n      },shutdown:function() {\n        // https://github.com/emscripten-core/emscripten/pull/1555\n        // if (ENVIRONMENT_IS_NODE) {\n        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?\n        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation\n        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?\n        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle\n        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call\n        //   process.stdin.pause();\n        // }\n      },register:function(dev, ops) {\n        TTY.ttys[dev] = { input: [], output: [], ops: ops };\n        FS.registerDevice(dev, TTY.stream_ops);\n      },stream_ops:{open:function(stream) {\n          var tty = TTY.ttys[stream.node.rdev];\n          if (!tty) {\n            throw new FS.ErrnoError(43);\n          }\n          stream.tty = tty;\n          stream.seekable = false;\n        },close:function(stream) {\n          // flush any pending line data\n          stream.tty.ops.fsync(stream.tty);\n        },fsync:function(stream) {\n          stream.tty.ops.fsync(stream.tty);\n        },read:function(stream, buffer, offset, length, pos /* ignored */) {\n          if (!stream.tty || !stream.tty.ops.get_char) {\n            throw new FS.ErrnoError(60);\n          }\n          var bytesRead = 0;\n          for (var i = 0; i < length; i++) {\n            var result;\n            try {\n              result = stream.tty.ops.get_char(stream.tty);\n            } catch (e) {\n              throw new FS.ErrnoError(29);\n            }\n            if (result === undefined && bytesRead === 0) {\n              throw new FS.ErrnoError(6);\n            }\n            if (result === null || result === undefined) break;\n            bytesRead++;\n            buffer[offset+i] = result;\n          }\n          if (bytesRead) {\n            stream.node.timestamp = Date.now();\n          }\n          return bytesRead;\n        },write:function(stream, buffer, offset, length, pos) {\n          if (!stream.tty || !stream.tty.ops.put_char) {\n            throw new FS.ErrnoError(60);\n          }\n          try {\n            for (var i = 0; i < length; i++) {\n              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);\n            }\n          } catch (e) {\n            throw new FS.ErrnoError(29);\n          }\n          if (length) {\n            stream.node.timestamp = Date.now();\n          }\n          return i;\n        }},default_tty_ops:{get_char:function(tty) {\n          if (!tty.input.length) {\n            var result = null;\n            if (typeof window != 'undefined' &&\n              typeof window.prompt == 'function') {\n              // Browser.\n              result = window.prompt('Input: ');  // returns null on cancel\n              if (result !== null) {\n                result += '\\n';\n              }\n            } else if (typeof readline == 'function') {\n              // Command line.\n              result = readline();\n              if (result !== null) {\n                result += '\\n';\n              }\n            }\n            if (!result) {\n              return null;\n            }\n            tty.input = intArrayFromString(result, true);\n          }\n          return tty.input.shift();\n        },put_char:function(tty, val) {\n          if (val === null || val === 10) {\n            out(UTF8ArrayToString(tty.output, 0));\n            tty.output = [];\n          } else {\n            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.\n          }\n        },fsync:function(tty) {\n          if (tty.output && tty.output.length > 0) {\n            out(UTF8ArrayToString(tty.output, 0));\n            tty.output = [];\n          }\n        }},default_tty1_ops:{put_char:function(tty, val) {\n          if (val === null || val === 10) {\n            err(UTF8ArrayToString(tty.output, 0));\n            tty.output = [];\n          } else {\n            if (val != 0) tty.output.push(val);\n          }\n        },fsync:function(tty) {\n          if (tty.output && tty.output.length > 0) {\n            err(UTF8ArrayToString(tty.output, 0));\n            tty.output = [];\n          }\n        }}};\n  \n  \n  function zeroMemory(address, size) {\n      HEAPU8.fill(0, address, address + size);\n      return address;\n    }\n  \n  function alignMemory(size, alignment) {\n      assert(alignment, \"alignment argument is required\");\n      return Math.ceil(size / alignment) * alignment;\n    }\n  function mmapAlloc(size) {\n      abort('internal error: mmapAlloc called but `emscripten_builtin_memalign` native symbol not exported');\n    }\n  var MEMFS = {ops_table:null,mount:function(mount) {\n        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);\n      },createNode:function(parent, name, mode, dev) {\n        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {\n          // no supported\n          throw new FS.ErrnoError(63);\n        }\n        if (!MEMFS.ops_table) {\n          MEMFS.ops_table = {\n            dir: {\n              node: {\n                getattr: MEMFS.node_ops.getattr,\n                setattr: MEMFS.node_ops.setattr,\n                lookup: MEMFS.node_ops.lookup,\n                mknod: MEMFS.node_ops.mknod,\n                rename: MEMFS.node_ops.rename,\n                unlink: MEMFS.node_ops.unlink,\n                rmdir: MEMFS.node_ops.rmdir,\n                readdir: MEMFS.node_ops.readdir,\n                symlink: MEMFS.node_ops.symlink\n              },\n              stream: {\n                llseek: MEMFS.stream_ops.llseek\n              }\n            },\n            file: {\n              node: {\n                getattr: MEMFS.node_ops.getattr,\n                setattr: MEMFS.node_ops.setattr\n              },\n              stream: {\n                llseek: MEMFS.stream_ops.llseek,\n                read: MEMFS.stream_ops.read,\n                write: MEMFS.stream_ops.write,\n                allocate: MEMFS.stream_ops.allocate,\n                mmap: MEMFS.stream_ops.mmap,\n                msync: MEMFS.stream_ops.msync\n              }\n            },\n            link: {\n              node: {\n                getattr: MEMFS.node_ops.getattr,\n                setattr: MEMFS.node_ops.setattr,\n                readlink: MEMFS.node_ops.readlink\n              },\n              stream: {}\n            },\n            chrdev: {\n              node: {\n                getattr: MEMFS.node_ops.getattr,\n                setattr: MEMFS.node_ops.setattr\n              },\n              stream: FS.chrdev_stream_ops\n            }\n          };\n        }\n        var node = FS.createNode(parent, name, mode, dev);\n        if (FS.isDir(node.mode)) {\n          node.node_ops = MEMFS.ops_table.dir.node;\n          node.stream_ops = MEMFS.ops_table.dir.stream;\n          node.contents = {};\n        } else if (FS.isFile(node.mode)) {\n          node.node_ops = MEMFS.ops_table.file.node;\n          node.stream_ops = MEMFS.ops_table.file.stream;\n          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.\n          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred\n          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size\n          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.\n          node.contents = null; \n        } else if (FS.isLink(node.mode)) {\n          node.node_ops = MEMFS.ops_table.link.node;\n          node.stream_ops = MEMFS.ops_table.link.stream;\n        } else if (FS.isChrdev(node.mode)) {\n          node.node_ops = MEMFS.ops_table.chrdev.node;\n          node.stream_ops = MEMFS.ops_table.chrdev.stream;\n        }\n        node.timestamp = Date.now();\n        // add the new node to the parent\n        if (parent) {\n          parent.contents[name] = node;\n          parent.timestamp = node.timestamp;\n        }\n        return node;\n      },getFileDataAsTypedArray:function(node) {\n        if (!node.contents) return new Uint8Array(0);\n        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.\n        return new Uint8Array(node.contents);\n      },expandFileStorage:function(node, newCapacity) {\n        var prevCapacity = node.contents ? node.contents.length : 0;\n        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.\n        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.\n        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to\n        // avoid overshooting the allocation cap by a very large margin.\n        var CAPACITY_DOUBLING_MAX = 1024 * 1024;\n        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) >>> 0);\n        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.\n        var oldContents = node.contents;\n        node.contents = new Uint8Array(newCapacity); // Allocate new storage.\n        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.\n      },resizeFileStorage:function(node, newSize) {\n        if (node.usedBytes == newSize) return;\n        if (newSize == 0) {\n          node.contents = null; // Fully decommit when requesting a resize to zero.\n          node.usedBytes = 0;\n        } else {\n          var oldContents = node.contents;\n          node.contents = new Uint8Array(newSize); // Allocate new storage.\n          if (oldContents) {\n            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.\n          }\n          node.usedBytes = newSize;\n        }\n      },node_ops:{getattr:function(node) {\n          var attr = {};\n          // device numbers reuse inode numbers.\n          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;\n          attr.ino = node.id;\n          attr.mode = node.mode;\n          attr.nlink = 1;\n          attr.uid = 0;\n          attr.gid = 0;\n          attr.rdev = node.rdev;\n          if (FS.isDir(node.mode)) {\n            attr.size = 4096;\n          } else if (FS.isFile(node.mode)) {\n            attr.size = node.usedBytes;\n          } else if (FS.isLink(node.mode)) {\n            attr.size = node.link.length;\n          } else {\n            attr.size = 0;\n          }\n          attr.atime = new Date(node.timestamp);\n          attr.mtime = new Date(node.timestamp);\n          attr.ctime = new Date(node.timestamp);\n          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),\n          //       but this is not required by the standard.\n          attr.blksize = 4096;\n          attr.blocks = Math.ceil(attr.size / attr.blksize);\n          return attr;\n        },setattr:function(node, attr) {\n          if (attr.mode !== undefined) {\n            node.mode = attr.mode;\n          }\n          if (attr.timestamp !== undefined) {\n            node.timestamp = attr.timestamp;\n          }\n          if (attr.size !== undefined) {\n            MEMFS.resizeFileStorage(node, attr.size);\n          }\n        },lookup:function(parent, name) {\n          throw FS.genericErrors[44];\n        },mknod:function(parent, name, mode, dev) {\n          return MEMFS.createNode(parent, name, mode, dev);\n        },rename:function(old_node, new_dir, new_name) {\n          // if we're overwriting a directory at new_name, make sure it's empty.\n          if (FS.isDir(old_node.mode)) {\n            var new_node;\n            try {\n              new_node = FS.lookupNode(new_dir, new_name);\n            } catch (e) {\n            }\n            if (new_node) {\n              for (var i in new_node.contents) {\n                throw new FS.ErrnoError(55);\n              }\n            }\n          }\n          // do the internal rewiring\n          delete old_node.parent.contents[old_node.name];\n          old_node.parent.timestamp = Date.now()\n          old_node.name = new_name;\n          new_dir.contents[new_name] = old_node;\n          new_dir.timestamp = old_node.parent.timestamp;\n          old_node.parent = new_dir;\n        },unlink:function(parent, name) {\n          delete parent.contents[name];\n          parent.timestamp = Date.now();\n        },rmdir:function(parent, name) {\n          var node = FS.lookupNode(parent, name);\n          for (var i in node.contents) {\n            throw new FS.ErrnoError(55);\n          }\n          delete parent.contents[name];\n          parent.timestamp = Date.now();\n        },readdir:function(node) {\n          var entries = ['.', '..'];\n          for (var key in node.contents) {\n            if (!node.contents.hasOwnProperty(key)) {\n              continue;\n            }\n            entries.push(key);\n          }\n          return entries;\n        },symlink:function(parent, newname, oldpath) {\n          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);\n          node.link = oldpath;\n          return node;\n        },readlink:function(node) {\n          if (!FS.isLink(node.mode)) {\n            throw new FS.ErrnoError(28);\n          }\n          return node.link;\n        }},stream_ops:{read:function(stream, buffer, offset, length, position) {\n          var contents = stream.node.contents;\n          if (position >= stream.node.usedBytes) return 0;\n          var size = Math.min(stream.node.usedBytes - position, length);\n          assert(size >= 0);\n          if (size > 8 && contents.subarray) { // non-trivial, and typed array\n            buffer.set(contents.subarray(position, position + size), offset);\n          } else {\n            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];\n          }\n          return size;\n        },write:function(stream, buffer, offset, length, position, canOwn) {\n          // The data buffer should be a typed array view\n          assert(!(buffer instanceof ArrayBuffer));\n          // If the buffer is located in main memory (HEAP), and if\n          // memory can grow, we can't hold on to references of the\n          // memory buffer, as they may get invalidated. That means we\n          // need to do copy its contents.\n          if (buffer.buffer === HEAP8.buffer) {\n            canOwn = false;\n          }\n  \n          if (!length) return 0;\n          var node = stream.node;\n          node.timestamp = Date.now();\n  \n          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?\n            if (canOwn) {\n              assert(position === 0, 'canOwn must imply no weird position inside the file');\n              node.contents = buffer.subarray(offset, offset + length);\n              node.usedBytes = length;\n              return length;\n            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.\n              node.contents = buffer.slice(offset, offset + length);\n              node.usedBytes = length;\n              return length;\n            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?\n              node.contents.set(buffer.subarray(offset, offset + length), position);\n              return length;\n            }\n          }\n  \n          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.\n          MEMFS.expandFileStorage(node, position+length);\n          if (node.contents.subarray && buffer.subarray) {\n            // Use typed array write which is available.\n            node.contents.set(buffer.subarray(offset, offset + length), position);\n          } else {\n            for (var i = 0; i < length; i++) {\n             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.\n            }\n          }\n          node.usedBytes = Math.max(node.usedBytes, position + length);\n          return length;\n        },llseek:function(stream, offset, whence) {\n          var position = offset;\n          if (whence === 1) {\n            position += stream.position;\n          } else if (whence === 2) {\n            if (FS.isFile(stream.node.mode)) {\n              position += stream.node.usedBytes;\n            }\n          }\n          if (position < 0) {\n            throw new FS.ErrnoError(28);\n          }\n          return position;\n        },allocate:function(stream, offset, length) {\n          MEMFS.expandFileStorage(stream.node, offset + length);\n          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);\n        },mmap:function(stream, length, position, prot, flags) {\n          if (!FS.isFile(stream.node.mode)) {\n            throw new FS.ErrnoError(43);\n          }\n          var ptr;\n          var allocated;\n          var contents = stream.node.contents;\n          // Only make a new copy when MAP_PRIVATE is specified.\n          if (!(flags & 2) && contents.buffer === HEAP8.buffer) {\n            // We can't emulate MAP_SHARED when the file is not backed by the\n            // buffer we're mapping to (e.g. the HEAP buffer).\n            allocated = false;\n            ptr = contents.byteOffset;\n          } else {\n            // Try to avoid unnecessary slices.\n            if (position > 0 || position + length < contents.length) {\n              if (contents.subarray) {\n                contents = contents.subarray(position, position + length);\n              } else {\n                contents = Array.prototype.slice.call(contents, position, position + length);\n              }\n            }\n            allocated = true;\n            ptr = mmapAlloc(length);\n            if (!ptr) {\n              throw new FS.ErrnoError(48);\n            }\n            HEAP8.set(contents, ptr);\n          }\n          return { ptr: ptr, allocated: allocated };\n        },msync:function(stream, buffer, offset, length, mmapFlags) {\n          MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);\n          // should we check if bytesWritten and length are the same?\n          return 0;\n        }}};\n  \n  /** @param {boolean=} noRunDep */\n  function asyncLoad(url, onload, onerror, noRunDep) {\n      var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';\n      readAsync(url, (arrayBuffer) => {\n        assert(arrayBuffer, 'Loading data file \"' + url + '\" failed (no arrayBuffer).');\n        onload(new Uint8Array(arrayBuffer));\n        if (dep) removeRunDependency(dep);\n      }, (event) => {\n        if (onerror) {\n          onerror();\n        } else {\n          throw 'Loading data file \"' + url + '\" failed.';\n        }\n      });\n      if (dep) addRunDependency(dep);\n    }\n  \n  \n  \n  \n  \n  \n  var IDBFS = {dbs:{},indexedDB:() => {\n        if (typeof indexedDB != 'undefined') return indexedDB;\n        var ret = null;\n        if (typeof window == 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;\n        assert(ret, 'IDBFS used, but indexedDB not supported');\n        return ret;\n      },DB_VERSION:21,DB_STORE_NAME:\"FILE_DATA\",mount:function(mount) {\n        // reuse all of the core MEMFS functionality\n        return MEMFS.mount.apply(null, arguments);\n      },syncfs:(mount, populate, callback) => {\n        IDBFS.getLocalSet(mount, (err, local) => {\n          if (err) return callback(err);\n  \n          IDBFS.getRemoteSet(mount, (err, remote) => {\n            if (err) return callback(err);\n  \n            var src = populate ? remote : local;\n            var dst = populate ? local : remote;\n  \n            IDBFS.reconcile(src, dst, callback);\n          });\n        });\n      },quit:() => {\n        Object.values(IDBFS.dbs).forEach((value) => value.close());\n        IDBFS.dbs = {};\n      },getDB:(name, callback) => {\n        // check the cache first\n        var db = IDBFS.dbs[name];\n        if (db) {\n          return callback(null, db);\n        }\n  \n        var req;\n        try {\n          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);\n        } catch (e) {\n          return callback(e);\n        }\n        if (!req) {\n          return callback(\"Unable to connect to IndexedDB\");\n        }\n        req.onupgradeneeded = (e) => {\n          var db = /** @type {IDBDatabase} */ (e.target.result);\n          var transaction = e.target.transaction;\n  \n          var fileStore;\n  \n          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {\n            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);\n          } else {\n            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);\n          }\n  \n          if (!fileStore.indexNames.contains('timestamp')) {\n            fileStore.createIndex('timestamp', 'timestamp', { unique: false });\n          }\n        };\n        req.onsuccess = () => {\n          db = /** @type {IDBDatabase} */ (req.result);\n  \n          // add to the cache\n          IDBFS.dbs[name] = db;\n          callback(null, db);\n        };\n        req.onerror = (e) => {\n          callback(this.error);\n          e.preventDefault();\n        };\n      },getLocalSet:(mount, callback) => {\n        var entries = {};\n  \n        function isRealDir(p) {\n          return p !== '.' && p !== '..';\n        };\n        function toAbsolute(root) {\n          return (p) => {\n            return PATH.join2(root, p);\n          }\n        };\n  \n        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));\n  \n        while (check.length) {\n          var path = check.pop();\n          var stat;\n  \n          try {\n            stat = FS.stat(path);\n          } catch (e) {\n            return callback(e);\n          }\n  \n          if (FS.isDir(stat.mode)) {\n            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));\n          }\n  \n          entries[path] = { 'timestamp': stat.mtime };\n        }\n  \n        return callback(null, { type: 'local', entries: entries });\n      },getRemoteSet:(mount, callback) => {\n        var entries = {};\n  \n        IDBFS.getDB(mount.mountpoint, (err, db) => {\n          if (err) return callback(err);\n  \n          try {\n            var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');\n            transaction.onerror = (e) => {\n              callback(this.error);\n              e.preventDefault();\n            };\n  \n            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);\n            var index = store.index('timestamp');\n  \n            index.openKeyCursor().onsuccess = (event) => {\n              var cursor = event.target.result;\n  \n              if (!cursor) {\n                return callback(null, { type: 'remote', db: db, entries: entries });\n              }\n  \n              entries[cursor.primaryKey] = { 'timestamp': cursor.key };\n  \n              cursor.continue();\n            };\n          } catch (e) {\n            return callback(e);\n          }\n        });\n      },loadLocalEntry:(path, callback) => {\n        var stat, node;\n  \n        try {\n          var lookup = FS.lookupPath(path);\n          node = lookup.node;\n          stat = FS.stat(path);\n        } catch (e) {\n          return callback(e);\n        }\n  \n        if (FS.isDir(stat.mode)) {\n          return callback(null, { 'timestamp': stat.mtime, 'mode': stat.mode });\n        } else if (FS.isFile(stat.mode)) {\n          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.\n          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.\n          node.contents = MEMFS.getFileDataAsTypedArray(node);\n          return callback(null, { 'timestamp': stat.mtime, 'mode': stat.mode, 'contents': node.contents });\n        } else {\n          return callback(new Error('node type not supported'));\n        }\n      },storeLocalEntry:(path, entry, callback) => {\n        try {\n          if (FS.isDir(entry['mode'])) {\n            FS.mkdirTree(path, entry['mode']);\n          } else if (FS.isFile(entry['mode'])) {\n            FS.writeFile(path, entry['contents'], { canOwn: true });\n          } else {\n            return callback(new Error('node type not supported'));\n          }\n  \n          FS.chmod(path, entry['mode']);\n          FS.utime(path, entry['timestamp'], entry['timestamp']);\n        } catch (e) {\n          return callback(e);\n        }\n  \n        callback(null);\n      },removeLocalEntry:(path, callback) => {\n        try {\n          var stat = FS.stat(path);\n  \n          if (FS.isDir(stat.mode)) {\n            FS.rmdir(path);\n          } else if (FS.isFile(stat.mode)) {\n            FS.unlink(path);\n          }\n        } catch (e) {\n          return callback(e);\n        }\n  \n        callback(null);\n      },loadRemoteEntry:(store, path, callback) => {\n        var req = store.get(path);\n        req.onsuccess = (event) => { callback(null, event.target.result); };\n        req.onerror = (e) => {\n          callback(this.error);\n          e.preventDefault();\n        };\n      },storeRemoteEntry:(store, path, entry, callback) => {\n        try {\n          var req = store.put(entry, path);\n        } catch (e) {\n          callback(e);\n          return;\n        }\n        req.onsuccess = () => { callback(null); };\n        req.onerror = (e) => {\n          callback(this.error);\n          e.preventDefault();\n        };\n      },removeRemoteEntry:(store, path, callback) => {\n        var req = store.delete(path);\n        req.onsuccess = () => { callback(null); };\n        req.onerror = (e) => {\n          callback(this.error);\n          e.preventDefault();\n        };\n      },reconcile:(src, dst, callback) => {\n        var total = 0;\n  \n        var create = [];\n        Object.keys(src.entries).forEach(function (key) {\n          var e = src.entries[key];\n          var e2 = dst.entries[key];\n          if (!e2 || e['timestamp'].getTime() != e2['timestamp'].getTime()) {\n            create.push(key);\n            total++;\n          }\n        });\n  \n        var remove = [];\n        Object.keys(dst.entries).forEach(function (key) {\n          if (!src.entries[key]) {\n            remove.push(key);\n            total++;\n          }\n        });\n  \n        if (!total) {\n          return callback(null);\n        }\n  \n        var errored = false;\n        var db = src.type === 'remote' ? src.db : dst.db;\n        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');\n        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);\n  \n        function done(err) {\n          if (err && !errored) {\n            errored = true;\n            return callback(err);\n          }\n        };\n  \n        transaction.onerror = (e) => {\n          done(this.error);\n          e.preventDefault();\n        };\n  \n        transaction.oncomplete = (e) => {\n          if (!errored) {\n            callback(null);\n          }\n        };\n  \n        // sort paths in ascending order so directory entries are created\n        // before the files inside them\n        create.sort().forEach((path) => {\n          if (dst.type === 'local') {\n            IDBFS.loadRemoteEntry(store, path, (err, entry) => {\n              if (err) return done(err);\n              IDBFS.storeLocalEntry(path, entry, done);\n            });\n          } else {\n            IDBFS.loadLocalEntry(path, (err, entry) => {\n              if (err) return done(err);\n              IDBFS.storeRemoteEntry(store, path, entry, done);\n            });\n          }\n        });\n  \n        // sort paths in descending order so files are deleted before their\n        // parent directories\n        remove.sort().reverse().forEach((path) => {\n          if (dst.type === 'local') {\n            IDBFS.removeLocalEntry(path, done);\n          } else {\n            IDBFS.removeRemoteEntry(store, path, done);\n          }\n        });\n      }};\n  \n  var ERRNO_MESSAGES = {0:\"Success\",1:\"Arg list too long\",2:\"Permission denied\",3:\"Address already in use\",4:\"Address not available\",5:\"Address family not supported by protocol family\",6:\"No more processes\",7:\"Socket already connected\",8:\"Bad file number\",9:\"Trying to read unreadable message\",10:\"Mount device busy\",11:\"Operation canceled\",12:\"No children\",13:\"Connection aborted\",14:\"Connection refused\",15:\"Connection reset by peer\",16:\"File locking deadlock error\",17:\"Destination address required\",18:\"Math arg out of domain of func\",19:\"Quota exceeded\",20:\"File exists\",21:\"Bad address\",22:\"File too large\",23:\"Host is unreachable\",24:\"Identifier removed\",25:\"Illegal byte sequence\",26:\"Connection already in progress\",27:\"Interrupted system call\",28:\"Invalid argument\",29:\"I/O error\",30:\"Socket is already connected\",31:\"Is a directory\",32:\"Too many symbolic links\",33:\"Too many open files\",34:\"Too many links\",35:\"Message too long\",36:\"Multihop attempted\",37:\"File or path name too long\",38:\"Network interface is not configured\",39:\"Connection reset by network\",40:\"Network is unreachable\",41:\"Too many open files in system\",42:\"No buffer space available\",43:\"No such device\",44:\"No such file or directory\",45:\"Exec format error\",46:\"No record locks available\",47:\"The link has been severed\",48:\"Not enough core\",49:\"No message of desired type\",50:\"Protocol not available\",51:\"No space left on device\",52:\"Function not implemented\",53:\"Socket is not connected\",54:\"Not a directory\",55:\"Directory not empty\",56:\"State not recoverable\",57:\"Socket operation on non-socket\",59:\"Not a typewriter\",60:\"No such device or address\",61:\"Value too large for defined data type\",62:\"Previous owner died\",63:\"Not super-user\",64:\"Broken pipe\",65:\"Protocol error\",66:\"Unknown protocol\",67:\"Protocol wrong type for socket\",68:\"Math result not representable\",69:\"Read only file system\",70:\"Illegal seek\",71:\"No such process\",72:\"Stale file handle\",73:\"Connection timed out\",74:\"Text file busy\",75:\"Cross-device link\",100:\"Device not a stream\",101:\"Bad font file fmt\",102:\"Invalid slot\",103:\"Invalid request code\",104:\"No anode\",105:\"Block device required\",106:\"Channel number out of range\",107:\"Level 3 halted\",108:\"Level 3 reset\",109:\"Link number out of range\",110:\"Protocol driver not attached\",111:\"No CSI structure available\",112:\"Level 2 halted\",113:\"Invalid exchange\",114:\"Invalid request descriptor\",115:\"Exchange full\",116:\"No data (for no delay io)\",117:\"Timer expired\",118:\"Out of streams resources\",119:\"Machine is not on the network\",120:\"Package not installed\",121:\"The object is remote\",122:\"Advertise error\",123:\"Srmount error\",124:\"Communication error on send\",125:\"Cross mount point (not really error)\",126:\"Given log. name not unique\",127:\"f.d. invalid for this operation\",128:\"Remote address changed\",129:\"Can   access a needed shared lib\",130:\"Accessing a corrupted shared lib\",131:\".lib section in a.out corrupted\",132:\"Attempting to link in too many libs\",133:\"Attempting to exec a shared library\",135:\"Streams pipe error\",136:\"Too many users\",137:\"Socket type not supported\",138:\"Not supported\",139:\"Protocol family not supported\",140:\"Can't send after socket shutdown\",141:\"Too many references\",142:\"Host is down\",148:\"No medium (in tape drive)\",156:\"Level 2 not synchronized\"};\n  \n  var ERRNO_CODES = {};\n  \n  var FS = {root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:\"/\",initialized:false,ignorePermissions:true,ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,lookupPath:(path, opts = {}) => {\n        path = PATH_FS.resolve(path);\n  \n        if (!path) return { path: '', node: null };\n  \n        var defaults = {\n          follow_mount: true,\n          recurse_count: 0\n        };\n        opts = Object.assign(defaults, opts)\n  \n        if (opts.recurse_count > 8) {  // max recursive lookup of 8\n          throw new FS.ErrnoError(32);\n        }\n  \n        // split the absolute path\n        var parts = path.split('/').filter((p) => !!p);\n  \n        // start at the root\n        var current = FS.root;\n        var current_path = '/';\n  \n        for (var i = 0; i < parts.length; i++) {\n          var islast = (i === parts.length-1);\n          if (islast && opts.parent) {\n            // stop resolving\n            break;\n          }\n  \n          current = FS.lookupNode(current, parts[i]);\n          current_path = PATH.join2(current_path, parts[i]);\n  \n          // jump to the mount's root node if this is a mountpoint\n          if (FS.isMountpoint(current)) {\n            if (!islast || (islast && opts.follow_mount)) {\n              current = current.mounted.root;\n            }\n          }\n  \n          // by default, lookupPath will not follow a symlink if it is the final path component.\n          // setting opts.follow = true will override this behavior.\n          if (!islast || opts.follow) {\n            var count = 0;\n            while (FS.isLink(current.mode)) {\n              var link = FS.readlink(current_path);\n              current_path = PATH_FS.resolve(PATH.dirname(current_path), link);\n  \n              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count + 1 });\n              current = lookup.node;\n  \n              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).\n                throw new FS.ErrnoError(32);\n              }\n            }\n          }\n        }\n  \n        return { path: current_path, node: current };\n      },getPath:(node) => {\n        var path;\n        while (true) {\n          if (FS.isRoot(node)) {\n            var mount = node.mount.mountpoint;\n            if (!path) return mount;\n            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;\n          }\n          path = path ? node.name + '/' + path : node.name;\n          node = node.parent;\n        }\n      },hashName:(parentid, name) => {\n        var hash = 0;\n  \n        for (var i = 0; i < name.length; i++) {\n          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;\n        }\n        return ((parentid + hash) >>> 0) % FS.nameTable.length;\n      },hashAddNode:(node) => {\n        var hash = FS.hashName(node.parent.id, node.name);\n        node.name_next = FS.nameTable[hash];\n        FS.nameTable[hash] = node;\n      },hashRemoveNode:(node) => {\n        var hash = FS.hashName(node.parent.id, node.name);\n        if (FS.nameTable[hash] === node) {\n          FS.nameTable[hash] = node.name_next;\n        } else {\n          var current = FS.nameTable[hash];\n          while (current) {\n            if (current.name_next === node) {\n              current.name_next = node.name_next;\n              break;\n            }\n            current = current.name_next;\n          }\n        }\n      },lookupNode:(parent, name) => {\n        var errCode = FS.mayLookup(parent);\n        if (errCode) {\n          throw new FS.ErrnoError(errCode, parent);\n        }\n        var hash = FS.hashName(parent.id, name);\n        for (var node = FS.nameTable[hash]; node; node = node.name_next) {\n          var nodeName = node.name;\n          if (node.parent.id === parent.id && nodeName === name) {\n            return node;\n          }\n        }\n        // if we failed to find it in the cache, call into the VFS\n        return FS.lookup(parent, name);\n      },createNode:(parent, name, mode, rdev) => {\n        assert(typeof parent == 'object')\n        var node = new FS.FSNode(parent, name, mode, rdev);\n  \n        FS.hashAddNode(node);\n  \n        return node;\n      },destroyNode:(node) => {\n        FS.hashRemoveNode(node);\n      },isRoot:(node) => {\n        return node === node.parent;\n      },isMountpoint:(node) => {\n        return !!node.mounted;\n      },isFile:(mode) => {\n        return (mode & 61440) === 32768;\n      },isDir:(mode) => {\n        return (mode & 61440) === 16384;\n      },isLink:(mode) => {\n        return (mode & 61440) === 40960;\n      },isChrdev:(mode) => {\n        return (mode & 61440) === 8192;\n      },isBlkdev:(mode) => {\n        return (mode & 61440) === 24576;\n      },isFIFO:(mode) => {\n        return (mode & 61440) === 4096;\n      },isSocket:(mode) => {\n        return (mode & 49152) === 49152;\n      },flagModes:{\"r\":0,\"r+\":2,\"w\":577,\"w+\":578,\"a\":1089,\"a+\":1090},modeStringToFlags:(str) => {\n        var flags = FS.flagModes[str];\n        if (typeof flags == 'undefined') {\n          throw new Error('Unknown file open mode: ' + str);\n        }\n        return flags;\n      },flagsToPermissionString:(flag) => {\n        var perms = ['r', 'w', 'rw'][flag & 3];\n        if ((flag & 512)) {\n          perms += 'w';\n        }\n        return perms;\n      },nodePermissions:(node, perms) => {\n        if (FS.ignorePermissions) {\n          return 0;\n        }\n        // return 0 if any user, group or owner bits are set.\n        if (perms.includes('r') && !(node.mode & 292)) {\n          return 2;\n        } else if (perms.includes('w') && !(node.mode & 146)) {\n          return 2;\n        } else if (perms.includes('x') && !(node.mode & 73)) {\n          return 2;\n        }\n        return 0;\n      },mayLookup:(dir) => {\n        var errCode = FS.nodePermissions(dir, 'x');\n        if (errCode) return errCode;\n        if (!dir.node_ops.lookup) return 2;\n        return 0;\n      },mayCreate:(dir, name) => {\n        try {\n          var node = FS.lookupNode(dir, name);\n          return 20;\n        } catch (e) {\n        }\n        return FS.nodePermissions(dir, 'wx');\n      },mayDelete:(dir, name, isdir) => {\n        var node;\n        try {\n          node = FS.lookupNode(dir, name);\n        } catch (e) {\n          return e.errno;\n        }\n        var errCode = FS.nodePermissions(dir, 'wx');\n        if (errCode) {\n          return errCode;\n        }\n        if (isdir) {\n          if (!FS.isDir(node.mode)) {\n            return 54;\n          }\n          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {\n            return 10;\n          }\n        } else {\n          if (FS.isDir(node.mode)) {\n            return 31;\n          }\n        }\n        return 0;\n      },mayOpen:(node, flags) => {\n        if (!node) {\n          return 44;\n        }\n        if (FS.isLink(node.mode)) {\n          return 32;\n        } else if (FS.isDir(node.mode)) {\n          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write\n              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)\n            return 31;\n          }\n        }\n        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));\n      },MAX_OPEN_FDS:4096,nextfd:(fd_start = 0, fd_end = FS.MAX_OPEN_FDS) => {\n        for (var fd = fd_start; fd <= fd_end; fd++) {\n          if (!FS.streams[fd]) {\n            return fd;\n          }\n        }\n        throw new FS.ErrnoError(33);\n      },getStream:(fd) => FS.streams[fd],createStream:(stream, fd_start, fd_end) => {\n        if (!FS.FSStream) {\n          FS.FSStream = /** @constructor */ function() {\n            this.shared = { };\n          };\n          FS.FSStream.prototype = {};\n          Object.defineProperties(FS.FSStream.prototype, {\n            object: {\n              /** @this {FS.FSStream} */\n              get: function() { return this.node; },\n              /** @this {FS.FSStream} */\n              set: function(val) { this.node = val; }\n            },\n            isRead: {\n              /** @this {FS.FSStream} */\n              get: function() { return (this.flags & 2097155) !== 1; }\n            },\n            isWrite: {\n              /** @this {FS.FSStream} */\n              get: function() { return (this.flags & 2097155) !== 0; }\n            },\n            isAppend: {\n              /** @this {FS.FSStream} */\n              get: function() { return (this.flags & 1024); }\n            },\n            flags: {\n              /** @this {FS.FSStream} */\n              get: function() { return this.shared.flags; },\n              /** @this {FS.FSStream} */\n              set: function(val) { this.shared.flags = val; },\n            },\n            position : {\n              /** @this {FS.FSStream} */\n              get: function() { return this.shared.position; },\n              /** @this {FS.FSStream} */\n              set: function(val) { this.shared.position = val; },\n            },\n          });\n        }\n        // clone it, so we can return an instance of FSStream\n        stream = Object.assign(new FS.FSStream(), stream);\n        var fd = FS.nextfd(fd_start, fd_end);\n        stream.fd = fd;\n        FS.streams[fd] = stream;\n        return stream;\n      },closeStream:(fd) => {\n        FS.streams[fd] = null;\n      },chrdev_stream_ops:{open:(stream) => {\n          var device = FS.getDevice(stream.node.rdev);\n          // override node's stream ops with the device's\n          stream.stream_ops = device.stream_ops;\n          // forward the open call\n          if (stream.stream_ops.open) {\n            stream.stream_ops.open(stream);\n          }\n        },llseek:() => {\n          throw new FS.ErrnoError(70);\n        }},major:(dev) => ((dev) >> 8),minor:(dev) => ((dev) & 0xff),makedev:(ma, mi) => ((ma) << 8 | (mi)),registerDevice:(dev, ops) => {\n        FS.devices[dev] = { stream_ops: ops };\n      },getDevice:(dev) => FS.devices[dev],getMounts:(mount) => {\n        var mounts = [];\n        var check = [mount];\n  \n        while (check.length) {\n          var m = check.pop();\n  \n          mounts.push(m);\n  \n          check.push.apply(check, m.mounts);\n        }\n  \n        return mounts;\n      },syncfs:(populate, callback) => {\n        if (typeof populate == 'function') {\n          callback = populate;\n          populate = false;\n        }\n  \n        FS.syncFSRequests++;\n  \n        if (FS.syncFSRequests > 1) {\n          err('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');\n        }\n  \n        var mounts = FS.getMounts(FS.root.mount);\n        var completed = 0;\n  \n        function doCallback(errCode) {\n          assert(FS.syncFSRequests > 0);\n          FS.syncFSRequests--;\n          return callback(errCode);\n        }\n  \n        function done(errCode) {\n          if (errCode) {\n            if (!done.errored) {\n              done.errored = true;\n              return doCallback(errCode);\n            }\n            return;\n          }\n          if (++completed >= mounts.length) {\n            doCallback(null);\n          }\n        };\n  \n        // sync all mounts\n        mounts.forEach((mount) => {\n          if (!mount.type.syncfs) {\n            return done(null);\n          }\n          mount.type.syncfs(mount, populate, done);\n        });\n      },mount:(type, opts, mountpoint) => {\n        if (typeof type == 'string') {\n          // The filesystem was not included, and instead we have an error\n          // message stored in the variable.\n          throw type;\n        }\n        var root = mountpoint === '/';\n        var pseudo = !mountpoint;\n        var node;\n  \n        if (root && FS.root) {\n          throw new FS.ErrnoError(10);\n        } else if (!root && !pseudo) {\n          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });\n  \n          mountpoint = lookup.path;  // use the absolute path\n          node = lookup.node;\n  \n          if (FS.isMountpoint(node)) {\n            throw new FS.ErrnoError(10);\n          }\n  \n          if (!FS.isDir(node.mode)) {\n            throw new FS.ErrnoError(54);\n          }\n        }\n  \n        var mount = {\n          type: type,\n          opts: opts,\n          mountpoint: mountpoint,\n          mounts: []\n        };\n  \n        // create a root node for the fs\n        var mountRoot = type.mount(mount);\n        mountRoot.mount = mount;\n        mount.root = mountRoot;\n  \n        if (root) {\n          FS.root = mountRoot;\n        } else if (node) {\n          // set as a mountpoint\n          node.mounted = mount;\n  \n          // add the new mount to the current mount's children\n          if (node.mount) {\n            node.mount.mounts.push(mount);\n          }\n        }\n  \n        return mountRoot;\n      },unmount:(mountpoint) => {\n        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });\n  \n        if (!FS.isMountpoint(lookup.node)) {\n          throw new FS.ErrnoError(28);\n        }\n  \n        // destroy the nodes for this mount, and all its child mounts\n        var node = lookup.node;\n        var mount = node.mounted;\n        var mounts = FS.getMounts(mount);\n  \n        Object.keys(FS.nameTable).forEach((hash) => {\n          var current = FS.nameTable[hash];\n  \n          while (current) {\n            var next = current.name_next;\n  \n            if (mounts.includes(current.mount)) {\n              FS.destroyNode(current);\n            }\n  \n            current = next;\n          }\n        });\n  \n        // no longer a mountpoint\n        node.mounted = null;\n  \n        // remove this mount from the child mounts\n        var idx = node.mount.mounts.indexOf(mount);\n        assert(idx !== -1);\n        node.mount.mounts.splice(idx, 1);\n      },lookup:(parent, name) => {\n        return parent.node_ops.lookup(parent, name);\n      },mknod:(path, mode, dev) => {\n        var lookup = FS.lookupPath(path, { parent: true });\n        var parent = lookup.node;\n        var name = PATH.basename(path);\n        if (!name || name === '.' || name === '..') {\n          throw new FS.ErrnoError(28);\n        }\n        var errCode = FS.mayCreate(parent, name);\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        if (!parent.node_ops.mknod) {\n          throw new FS.ErrnoError(63);\n        }\n        return parent.node_ops.mknod(parent, name, mode, dev);\n      },create:(path, mode) => {\n        mode = mode !== undefined ? mode : 438 /* 0666 */;\n        mode &= 4095;\n        mode |= 32768;\n        return FS.mknod(path, mode, 0);\n      },mkdir:(path, mode) => {\n        mode = mode !== undefined ? mode : 511 /* 0777 */;\n        mode &= 511 | 512;\n        mode |= 16384;\n        return FS.mknod(path, mode, 0);\n      },mkdirTree:(path, mode) => {\n        var dirs = path.split('/');\n        var d = '';\n        for (var i = 0; i < dirs.length; ++i) {\n          if (!dirs[i]) continue;\n          d += '/' + dirs[i];\n          try {\n            FS.mkdir(d, mode);\n          } catch(e) {\n            if (e.errno != 20) throw e;\n          }\n        }\n      },mkdev:(path, mode, dev) => {\n        if (typeof dev == 'undefined') {\n          dev = mode;\n          mode = 438 /* 0666 */;\n        }\n        mode |= 8192;\n        return FS.mknod(path, mode, dev);\n      },symlink:(oldpath, newpath) => {\n        if (!PATH_FS.resolve(oldpath)) {\n          throw new FS.ErrnoError(44);\n        }\n        var lookup = FS.lookupPath(newpath, { parent: true });\n        var parent = lookup.node;\n        if (!parent) {\n          throw new FS.ErrnoError(44);\n        }\n        var newname = PATH.basename(newpath);\n        var errCode = FS.mayCreate(parent, newname);\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        if (!parent.node_ops.symlink) {\n          throw new FS.ErrnoError(63);\n        }\n        return parent.node_ops.symlink(parent, newname, oldpath);\n      },rename:(old_path, new_path) => {\n        var old_dirname = PATH.dirname(old_path);\n        var new_dirname = PATH.dirname(new_path);\n        var old_name = PATH.basename(old_path);\n        var new_name = PATH.basename(new_path);\n        // parents must exist\n        var lookup, old_dir, new_dir;\n  \n        // let the errors from non existant directories percolate up\n        lookup = FS.lookupPath(old_path, { parent: true });\n        old_dir = lookup.node;\n        lookup = FS.lookupPath(new_path, { parent: true });\n        new_dir = lookup.node;\n  \n        if (!old_dir || !new_dir) throw new FS.ErrnoError(44);\n        // need to be part of the same mount\n        if (old_dir.mount !== new_dir.mount) {\n          throw new FS.ErrnoError(75);\n        }\n        // source must exist\n        var old_node = FS.lookupNode(old_dir, old_name);\n        // old path should not be an ancestor of the new path\n        var relative = PATH_FS.relative(old_path, new_dirname);\n        if (relative.charAt(0) !== '.') {\n          throw new FS.ErrnoError(28);\n        }\n        // new path should not be an ancestor of the old path\n        relative = PATH_FS.relative(new_path, old_dirname);\n        if (relative.charAt(0) !== '.') {\n          throw new FS.ErrnoError(55);\n        }\n        // see if the new path already exists\n        var new_node;\n        try {\n          new_node = FS.lookupNode(new_dir, new_name);\n        } catch (e) {\n          // not fatal\n        }\n        // early out if nothing needs to change\n        if (old_node === new_node) {\n          return;\n        }\n        // we'll need to delete the old entry\n        var isdir = FS.isDir(old_node.mode);\n        var errCode = FS.mayDelete(old_dir, old_name, isdir);\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        // need delete permissions if we'll be overwriting.\n        // need create permissions if new doesn't already exist.\n        errCode = new_node ?\n          FS.mayDelete(new_dir, new_name, isdir) :\n          FS.mayCreate(new_dir, new_name);\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        if (!old_dir.node_ops.rename) {\n          throw new FS.ErrnoError(63);\n        }\n        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {\n          throw new FS.ErrnoError(10);\n        }\n        // if we are going to change the parent, check write permissions\n        if (new_dir !== old_dir) {\n          errCode = FS.nodePermissions(old_dir, 'w');\n          if (errCode) {\n            throw new FS.ErrnoError(errCode);\n          }\n        }\n        // remove the node from the lookup hash\n        FS.hashRemoveNode(old_node);\n        // do the underlying fs rename\n        try {\n          old_dir.node_ops.rename(old_node, new_dir, new_name);\n        } catch (e) {\n          throw e;\n        } finally {\n          // add the node back to the hash (in case node_ops.rename\n          // changed its name)\n          FS.hashAddNode(old_node);\n        }\n      },rmdir:(path) => {\n        var lookup = FS.lookupPath(path, { parent: true });\n        var parent = lookup.node;\n        var name = PATH.basename(path);\n        var node = FS.lookupNode(parent, name);\n        var errCode = FS.mayDelete(parent, name, true);\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        if (!parent.node_ops.rmdir) {\n          throw new FS.ErrnoError(63);\n        }\n        if (FS.isMountpoint(node)) {\n          throw new FS.ErrnoError(10);\n        }\n        parent.node_ops.rmdir(parent, name);\n        FS.destroyNode(node);\n      },readdir:(path) => {\n        var lookup = FS.lookupPath(path, { follow: true });\n        var node = lookup.node;\n        if (!node.node_ops.readdir) {\n          throw new FS.ErrnoError(54);\n        }\n        return node.node_ops.readdir(node);\n      },unlink:(path) => {\n        var lookup = FS.lookupPath(path, { parent: true });\n        var parent = lookup.node;\n        if (!parent) {\n          throw new FS.ErrnoError(44);\n        }\n        var name = PATH.basename(path);\n        var node = FS.lookupNode(parent, name);\n        var errCode = FS.mayDelete(parent, name, false);\n        if (errCode) {\n          // According to POSIX, we should map EISDIR to EPERM, but\n          // we instead do what Linux does (and we must, as we use\n          // the musl linux libc).\n          throw new FS.ErrnoError(errCode);\n        }\n        if (!parent.node_ops.unlink) {\n          throw new FS.ErrnoError(63);\n        }\n        if (FS.isMountpoint(node)) {\n          throw new FS.ErrnoError(10);\n        }\n        parent.node_ops.unlink(parent, name);\n        FS.destroyNode(node);\n      },readlink:(path) => {\n        var lookup = FS.lookupPath(path);\n        var link = lookup.node;\n        if (!link) {\n          throw new FS.ErrnoError(44);\n        }\n        if (!link.node_ops.readlink) {\n          throw new FS.ErrnoError(28);\n        }\n        return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));\n      },stat:(path, dontFollow) => {\n        var lookup = FS.lookupPath(path, { follow: !dontFollow });\n        var node = lookup.node;\n        if (!node) {\n          throw new FS.ErrnoError(44);\n        }\n        if (!node.node_ops.getattr) {\n          throw new FS.ErrnoError(63);\n        }\n        return node.node_ops.getattr(node);\n      },lstat:(path) => {\n        return FS.stat(path, true);\n      },chmod:(path, mode, dontFollow) => {\n        var node;\n        if (typeof path == 'string') {\n          var lookup = FS.lookupPath(path, { follow: !dontFollow });\n          node = lookup.node;\n        } else {\n          node = path;\n        }\n        if (!node.node_ops.setattr) {\n          throw new FS.ErrnoError(63);\n        }\n        node.node_ops.setattr(node, {\n          mode: (mode & 4095) | (node.mode & ~4095),\n          timestamp: Date.now()\n        });\n      },lchmod:(path, mode) => {\n        FS.chmod(path, mode, true);\n      },fchmod:(fd, mode) => {\n        var stream = FS.getStream(fd);\n        if (!stream) {\n          throw new FS.ErrnoError(8);\n        }\n        FS.chmod(stream.node, mode);\n      },chown:(path, uid, gid, dontFollow) => {\n        var node;\n        if (typeof path == 'string') {\n          var lookup = FS.lookupPath(path, { follow: !dontFollow });\n          node = lookup.node;\n        } else {\n          node = path;\n        }\n        if (!node.node_ops.setattr) {\n          throw new FS.ErrnoError(63);\n        }\n        node.node_ops.setattr(node, {\n          timestamp: Date.now()\n          // we ignore the uid / gid for now\n        });\n      },lchown:(path, uid, gid) => {\n        FS.chown(path, uid, gid, true);\n      },fchown:(fd, uid, gid) => {\n        var stream = FS.getStream(fd);\n        if (!stream) {\n          throw new FS.ErrnoError(8);\n        }\n        FS.chown(stream.node, uid, gid);\n      },truncate:(path, len) => {\n        if (len < 0) {\n          throw new FS.ErrnoError(28);\n        }\n        var node;\n        if (typeof path == 'string') {\n          var lookup = FS.lookupPath(path, { follow: true });\n          node = lookup.node;\n        } else {\n          node = path;\n        }\n        if (!node.node_ops.setattr) {\n          throw new FS.ErrnoError(63);\n        }\n        if (FS.isDir(node.mode)) {\n          throw new FS.ErrnoError(31);\n        }\n        if (!FS.isFile(node.mode)) {\n          throw new FS.ErrnoError(28);\n        }\n        var errCode = FS.nodePermissions(node, 'w');\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        node.node_ops.setattr(node, {\n          size: len,\n          timestamp: Date.now()\n        });\n      },ftruncate:(fd, len) => {\n        var stream = FS.getStream(fd);\n        if (!stream) {\n          throw new FS.ErrnoError(8);\n        }\n        if ((stream.flags & 2097155) === 0) {\n          throw new FS.ErrnoError(28);\n        }\n        FS.truncate(stream.node, len);\n      },utime:(path, atime, mtime) => {\n        var lookup = FS.lookupPath(path, { follow: true });\n        var node = lookup.node;\n        node.node_ops.setattr(node, {\n          timestamp: Math.max(atime, mtime)\n        });\n      },open:(path, flags, mode) => {\n        if (path === \"\") {\n          throw new FS.ErrnoError(44);\n        }\n        flags = typeof flags == 'string' ? FS.modeStringToFlags(flags) : flags;\n        mode = typeof mode == 'undefined' ? 438 /* 0666 */ : mode;\n        if ((flags & 64)) {\n          mode = (mode & 4095) | 32768;\n        } else {\n          mode = 0;\n        }\n        var node;\n        if (typeof path == 'object') {\n          node = path;\n        } else {\n          path = PATH.normalize(path);\n          try {\n            var lookup = FS.lookupPath(path, {\n              follow: !(flags & 131072)\n            });\n            node = lookup.node;\n          } catch (e) {\n            // ignore\n          }\n        }\n        // perhaps we need to create the node\n        var created = false;\n        if ((flags & 64)) {\n          if (node) {\n            // if O_CREAT and O_EXCL are set, error out if the node already exists\n            if ((flags & 128)) {\n              throw new FS.ErrnoError(20);\n            }\n          } else {\n            // node doesn't exist, try to create it\n            node = FS.mknod(path, mode, 0);\n            created = true;\n          }\n        }\n        if (!node) {\n          throw new FS.ErrnoError(44);\n        }\n        // can't truncate a device\n        if (FS.isChrdev(node.mode)) {\n          flags &= ~512;\n        }\n        // if asked only for a directory, then this must be one\n        if ((flags & 65536) && !FS.isDir(node.mode)) {\n          throw new FS.ErrnoError(54);\n        }\n        // check permissions, if this is not a file we just created now (it is ok to\n        // create and write to a file with read-only permissions; it is read-only\n        // for later use)\n        if (!created) {\n          var errCode = FS.mayOpen(node, flags);\n          if (errCode) {\n            throw new FS.ErrnoError(errCode);\n          }\n        }\n        // do truncation if necessary\n        if ((flags & 512) && !created) {\n          FS.truncate(node, 0);\n        }\n        // we've already handled these, don't pass down to the underlying vfs\n        flags &= ~(128 | 512 | 131072);\n  \n        // register the stream with the filesystem\n        var stream = FS.createStream({\n          node: node,\n          path: FS.getPath(node),  // we want the absolute path to the node\n          flags: flags,\n          seekable: true,\n          position: 0,\n          stream_ops: node.stream_ops,\n          // used by the file family libc calls (fopen, fwrite, ferror, etc.)\n          ungotten: [],\n          error: false\n        });\n        // call the new stream's open function\n        if (stream.stream_ops.open) {\n          stream.stream_ops.open(stream);\n        }\n        if (Module['logReadFiles'] && !(flags & 1)) {\n          if (!FS.readFiles) FS.readFiles = {};\n          if (!(path in FS.readFiles)) {\n            FS.readFiles[path] = 1;\n          }\n        }\n        return stream;\n      },close:(stream) => {\n        if (FS.isClosed(stream)) {\n          throw new FS.ErrnoError(8);\n        }\n        if (stream.getdents) stream.getdents = null; // free readdir state\n        try {\n          if (stream.stream_ops.close) {\n            stream.stream_ops.close(stream);\n          }\n        } catch (e) {\n          throw e;\n        } finally {\n          FS.closeStream(stream.fd);\n        }\n        stream.fd = null;\n      },isClosed:(stream) => {\n        return stream.fd === null;\n      },llseek:(stream, offset, whence) => {\n        if (FS.isClosed(stream)) {\n          throw new FS.ErrnoError(8);\n        }\n        if (!stream.seekable || !stream.stream_ops.llseek) {\n          throw new FS.ErrnoError(70);\n        }\n        if (whence != 0 && whence != 1 && whence != 2) {\n          throw new FS.ErrnoError(28);\n        }\n        stream.position = stream.stream_ops.llseek(stream, offset, whence);\n        stream.ungotten = [];\n        return stream.position;\n      },read:(stream, buffer, offset, length, position) => {\n        if (length < 0 || position < 0) {\n          throw new FS.ErrnoError(28);\n        }\n        if (FS.isClosed(stream)) {\n          throw new FS.ErrnoError(8);\n        }\n        if ((stream.flags & 2097155) === 1) {\n          throw new FS.ErrnoError(8);\n        }\n        if (FS.isDir(stream.node.mode)) {\n          throw new FS.ErrnoError(31);\n        }\n        if (!stream.stream_ops.read) {\n          throw new FS.ErrnoError(28);\n        }\n        var seeking = typeof position != 'undefined';\n        if (!seeking) {\n          position = stream.position;\n        } else if (!stream.seekable) {\n          throw new FS.ErrnoError(70);\n        }\n        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);\n        if (!seeking) stream.position += bytesRead;\n        return bytesRead;\n      },write:(stream, buffer, offset, length, position, canOwn) => {\n        if (length < 0 || position < 0) {\n          throw new FS.ErrnoError(28);\n        }\n        if (FS.isClosed(stream)) {\n          throw new FS.ErrnoError(8);\n        }\n        if ((stream.flags & 2097155) === 0) {\n          throw new FS.ErrnoError(8);\n        }\n        if (FS.isDir(stream.node.mode)) {\n          throw new FS.ErrnoError(31);\n        }\n        if (!stream.stream_ops.write) {\n          throw new FS.ErrnoError(28);\n        }\n        if (stream.seekable && stream.flags & 1024) {\n          // seek to the end before writing in append mode\n          FS.llseek(stream, 0, 2);\n        }\n        var seeking = typeof position != 'undefined';\n        if (!seeking) {\n          position = stream.position;\n        } else if (!stream.seekable) {\n          throw new FS.ErrnoError(70);\n        }\n        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);\n        if (!seeking) stream.position += bytesWritten;\n        return bytesWritten;\n      },allocate:(stream, offset, length) => {\n        if (FS.isClosed(stream)) {\n          throw new FS.ErrnoError(8);\n        }\n        if (offset < 0 || length <= 0) {\n          throw new FS.ErrnoError(28);\n        }\n        if ((stream.flags & 2097155) === 0) {\n          throw new FS.ErrnoError(8);\n        }\n        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {\n          throw new FS.ErrnoError(43);\n        }\n        if (!stream.stream_ops.allocate) {\n          throw new FS.ErrnoError(138);\n        }\n        stream.stream_ops.allocate(stream, offset, length);\n      },mmap:(stream, length, position, prot, flags) => {\n        // User requests writing to file (prot & PROT_WRITE != 0).\n        // Checking if we have permissions to write to the file unless\n        // MAP_PRIVATE flag is set. According to POSIX spec it is possible\n        // to write to file opened in read-only mode with MAP_PRIVATE flag,\n        // as all modifications will be visible only in the memory of\n        // the current process.\n        if ((prot & 2) !== 0\n            && (flags & 2) === 0\n            && (stream.flags & 2097155) !== 2) {\n          throw new FS.ErrnoError(2);\n        }\n        if ((stream.flags & 2097155) === 1) {\n          throw new FS.ErrnoError(2);\n        }\n        if (!stream.stream_ops.mmap) {\n          throw new FS.ErrnoError(43);\n        }\n        return stream.stream_ops.mmap(stream, length, position, prot, flags);\n      },msync:(stream, buffer, offset, length, mmapFlags) => {\n        if (!stream.stream_ops.msync) {\n          return 0;\n        }\n        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);\n      },munmap:(stream) => 0,ioctl:(stream, cmd, arg) => {\n        if (!stream.stream_ops.ioctl) {\n          throw new FS.ErrnoError(59);\n        }\n        return stream.stream_ops.ioctl(stream, cmd, arg);\n      },readFile:(path, opts = {}) => {\n        opts.flags = opts.flags || 0;\n        opts.encoding = opts.encoding || 'binary';\n        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {\n          throw new Error('Invalid encoding type \"' + opts.encoding + '\"');\n        }\n        var ret;\n        var stream = FS.open(path, opts.flags);\n        var stat = FS.stat(path);\n        var length = stat.size;\n        var buf = new Uint8Array(length);\n        FS.read(stream, buf, 0, length, 0);\n        if (opts.encoding === 'utf8') {\n          ret = UTF8ArrayToString(buf, 0);\n        } else if (opts.encoding === 'binary') {\n          ret = buf;\n        }\n        FS.close(stream);\n        return ret;\n      },writeFile:(path, data, opts = {}) => {\n        opts.flags = opts.flags || 577;\n        var stream = FS.open(path, opts.flags, opts.mode);\n        if (typeof data == 'string') {\n          var buf = new Uint8Array(lengthBytesUTF8(data)+1);\n          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);\n          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);\n        } else if (ArrayBuffer.isView(data)) {\n          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);\n        } else {\n          throw new Error('Unsupported data type');\n        }\n        FS.close(stream);\n      },cwd:() => FS.currentPath,chdir:(path) => {\n        var lookup = FS.lookupPath(path, { follow: true });\n        if (lookup.node === null) {\n          throw new FS.ErrnoError(44);\n        }\n        if (!FS.isDir(lookup.node.mode)) {\n          throw new FS.ErrnoError(54);\n        }\n        var errCode = FS.nodePermissions(lookup.node, 'x');\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        FS.currentPath = lookup.path;\n      },createDefaultDirectories:() => {\n        FS.mkdir('/tmp');\n        FS.mkdir('/home');\n        FS.mkdir('/home/web_user');\n      },createDefaultDevices:() => {\n        // create /dev\n        FS.mkdir('/dev');\n        // setup /dev/null\n        FS.registerDevice(FS.makedev(1, 3), {\n          read: () => 0,\n          write: (stream, buffer, offset, length, pos) => length,\n        });\n        FS.mkdev('/dev/null', FS.makedev(1, 3));\n        // setup /dev/tty and /dev/tty1\n        // stderr needs to print output using err() rather than out()\n        // so we register a second tty just for it.\n        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);\n        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);\n        FS.mkdev('/dev/tty', FS.makedev(5, 0));\n        FS.mkdev('/dev/tty1', FS.makedev(6, 0));\n        // setup /dev/[u]random\n        // use a buffer to avoid overhead of individual crypto calls per byte\n        var randomBuffer = new Uint8Array(1024), randomLeft = 0;\n        var randomByte = () => {\n          if (randomLeft === 0) {\n            randomLeft = randomFill(randomBuffer).byteLength;\n          }\n          return randomBuffer[--randomLeft];\n        };\n        FS.createDevice('/dev', 'random', randomByte);\n        FS.createDevice('/dev', 'urandom', randomByte);\n        // we're not going to emulate the actual shm device,\n        // just create the tmp dirs that reside in it commonly\n        FS.mkdir('/dev/shm');\n        FS.mkdir('/dev/shm/tmp');\n      },createSpecialDirectories:() => {\n        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the\n        // name of the stream for fd 6 (see test_unistd_ttyname)\n        FS.mkdir('/proc');\n        var proc_self = FS.mkdir('/proc/self');\n        FS.mkdir('/proc/self/fd');\n        FS.mount({\n          mount: () => {\n            var node = FS.createNode(proc_self, 'fd', 16384 | 511 /* 0777 */, 73);\n            node.node_ops = {\n              lookup: (parent, name) => {\n                var fd = +name;\n                var stream = FS.getStream(fd);\n                if (!stream) throw new FS.ErrnoError(8);\n                var ret = {\n                  parent: null,\n                  mount: { mountpoint: 'fake' },\n                  node_ops: { readlink: () => stream.path },\n                };\n                ret.parent = ret; // make it look like a simple root node\n                return ret;\n              }\n            };\n            return node;\n          }\n        }, {}, '/proc/self/fd');\n      },createStandardStreams:() => {\n        // TODO deprecate the old functionality of a single\n        // input / output callback and that utilizes FS.createDevice\n        // and instead require a unique set of stream ops\n  \n        // by default, we symlink the standard streams to the\n        // default tty devices. however, if the standard streams\n        // have been overwritten we create a unique device for\n        // them instead.\n        if (Module['stdin']) {\n          FS.createDevice('/dev', 'stdin', Module['stdin']);\n        } else {\n          FS.symlink('/dev/tty', '/dev/stdin');\n        }\n        if (Module['stdout']) {\n          FS.createDevice('/dev', 'stdout', null, Module['stdout']);\n        } else {\n          FS.symlink('/dev/tty', '/dev/stdout');\n        }\n        if (Module['stderr']) {\n          FS.createDevice('/dev', 'stderr', null, Module['stderr']);\n        } else {\n          FS.symlink('/dev/tty1', '/dev/stderr');\n        }\n  \n        // open default streams for the stdin, stdout and stderr devices\n        var stdin = FS.open('/dev/stdin', 0);\n        var stdout = FS.open('/dev/stdout', 1);\n        var stderr = FS.open('/dev/stderr', 1);\n        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');\n        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');\n        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');\n      },ensureErrnoError:() => {\n        if (FS.ErrnoError) return;\n        FS.ErrnoError = /** @this{Object} */ function ErrnoError(errno, node) {\n          // We set the `name` property to be able to identify `FS.ErrnoError`\n          // - the `name` is a standard ECMA-262 property of error objects. Kind of good to have it anyway.\n          // - when using PROXYFS, an error can come from an underlying FS\n          // as different FS objects have their own FS.ErrnoError each,\n          // the test `err instanceof FS.ErrnoError` won't detect an error coming from another filesystem, causing bugs.\n          // we'll use the reliable test `err.name == \"ErrnoError\"` instead\n          this.name = 'ErrnoError';\n          this.node = node;\n          this.setErrno = /** @this{Object} */ function(errno) {\n            this.errno = errno;\n            for (var key in ERRNO_CODES) {\n              if (ERRNO_CODES[key] === errno) {\n                this.code = key;\n                break;\n              }\n            }\n          };\n          this.setErrno(errno);\n          this.message = ERRNO_MESSAGES[errno];\n  \n          // Try to get a maximally helpful stack trace. On Node.js, getting Error.stack\n          // now ensures it shows what we want.\n          if (this.stack) {\n            // Define the stack property for Node.js 4, which otherwise errors on the next line.\n            Object.defineProperty(this, \"stack\", { value: (new Error).stack, writable: true });\n            this.stack = demangleAll(this.stack);\n          }\n        };\n        FS.ErrnoError.prototype = new Error();\n        FS.ErrnoError.prototype.constructor = FS.ErrnoError;\n        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)\n        [44].forEach((code) => {\n          FS.genericErrors[code] = new FS.ErrnoError(code);\n          FS.genericErrors[code].stack = '<generic error, no stack>';\n        });\n      },staticInit:() => {\n        FS.ensureErrnoError();\n  \n        FS.nameTable = new Array(4096);\n  \n        FS.mount(MEMFS, {}, '/');\n  \n        FS.createDefaultDirectories();\n        FS.createDefaultDevices();\n        FS.createSpecialDirectories();\n  \n        FS.filesystems = {\n          'MEMFS': MEMFS,\n          'IDBFS': IDBFS,\n        };\n      },init:(input, output, error) => {\n        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');\n        FS.init.initialized = true;\n  \n        FS.ensureErrnoError();\n  \n        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here\n        Module['stdin'] = input || Module['stdin'];\n        Module['stdout'] = output || Module['stdout'];\n        Module['stderr'] = error || Module['stderr'];\n  \n        FS.createStandardStreams();\n      },quit:() => {\n        FS.init.initialized = false;\n        // force-flush all streams, so we get musl std streams printed out\n        _fflush(0);\n        // close all of our streams\n        for (var i = 0; i < FS.streams.length; i++) {\n          var stream = FS.streams[i];\n          if (!stream) {\n            continue;\n          }\n          FS.close(stream);\n        }\n      },getMode:(canRead, canWrite) => {\n        var mode = 0;\n        if (canRead) mode |= 292 | 73;\n        if (canWrite) mode |= 146;\n        return mode;\n      },findObject:(path, dontResolveLastLink) => {\n        var ret = FS.analyzePath(path, dontResolveLastLink);\n        if (!ret.exists) {\n          return null;\n        }\n        return ret.object;\n      },analyzePath:(path, dontResolveLastLink) => {\n        // operate from within the context of the symlink's target\n        try {\n          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });\n          path = lookup.path;\n        } catch (e) {\n        }\n        var ret = {\n          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,\n          parentExists: false, parentPath: null, parentObject: null\n        };\n        try {\n          var lookup = FS.lookupPath(path, { parent: true });\n          ret.parentExists = true;\n          ret.parentPath = lookup.path;\n          ret.parentObject = lookup.node;\n          ret.name = PATH.basename(path);\n          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });\n          ret.exists = true;\n          ret.path = lookup.path;\n          ret.object = lookup.node;\n          ret.name = lookup.node.name;\n          ret.isRoot = lookup.path === '/';\n        } catch (e) {\n          ret.error = e.errno;\n        };\n        return ret;\n      },createPath:(parent, path, canRead, canWrite) => {\n        parent = typeof parent == 'string' ? parent : FS.getPath(parent);\n        var parts = path.split('/').reverse();\n        while (parts.length) {\n          var part = parts.pop();\n          if (!part) continue;\n          var current = PATH.join2(parent, part);\n          try {\n            FS.mkdir(current);\n          } catch (e) {\n            // ignore EEXIST\n          }\n          parent = current;\n        }\n        return current;\n      },createFile:(parent, name, properties, canRead, canWrite) => {\n        var path = PATH.join2(typeof parent == 'string' ? parent : FS.getPath(parent), name);\n        var mode = FS.getMode(canRead, canWrite);\n        return FS.create(path, mode);\n      },createDataFile:(parent, name, data, canRead, canWrite, canOwn) => {\n        var path = name;\n        if (parent) {\n          parent = typeof parent == 'string' ? parent : FS.getPath(parent);\n          path = name ? PATH.join2(parent, name) : parent;\n        }\n        var mode = FS.getMode(canRead, canWrite);\n        var node = FS.create(path, mode);\n        if (data) {\n          if (typeof data == 'string') {\n            var arr = new Array(data.length);\n            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);\n            data = arr;\n          }\n          // make sure we can write to the file\n          FS.chmod(node, mode | 146);\n          var stream = FS.open(node, 577);\n          FS.write(stream, data, 0, data.length, 0, canOwn);\n          FS.close(stream);\n          FS.chmod(node, mode);\n        }\n        return node;\n      },createDevice:(parent, name, input, output) => {\n        var path = PATH.join2(typeof parent == 'string' ? parent : FS.getPath(parent), name);\n        var mode = FS.getMode(!!input, !!output);\n        if (!FS.createDevice.major) FS.createDevice.major = 64;\n        var dev = FS.makedev(FS.createDevice.major++, 0);\n        // Create a fake device that a set of stream ops to emulate\n        // the old behavior.\n        FS.registerDevice(dev, {\n          open: (stream) => {\n            stream.seekable = false;\n          },\n          close: (stream) => {\n            // flush any pending line data\n            if (output && output.buffer && output.buffer.length) {\n              output(10);\n            }\n          },\n          read: (stream, buffer, offset, length, pos /* ignored */) => {\n            var bytesRead = 0;\n            for (var i = 0; i < length; i++) {\n              var result;\n              try {\n                result = input();\n              } catch (e) {\n                throw new FS.ErrnoError(29);\n              }\n              if (result === undefined && bytesRead === 0) {\n                throw new FS.ErrnoError(6);\n              }\n              if (result === null || result === undefined) break;\n              bytesRead++;\n              buffer[offset+i] = result;\n            }\n            if (bytesRead) {\n              stream.node.timestamp = Date.now();\n            }\n            return bytesRead;\n          },\n          write: (stream, buffer, offset, length, pos) => {\n            for (var i = 0; i < length; i++) {\n              try {\n                output(buffer[offset+i]);\n              } catch (e) {\n                throw new FS.ErrnoError(29);\n              }\n            }\n            if (length) {\n              stream.node.timestamp = Date.now();\n            }\n            return i;\n          }\n        });\n        return FS.mkdev(path, mode, dev);\n      },forceLoadFile:(obj) => {\n        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;\n        if (typeof XMLHttpRequest != 'undefined') {\n          throw new Error(\"Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.\");\n        } else if (read_) {\n          // Command-line.\n          try {\n            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as\n            //          read() will try to parse UTF8.\n            obj.contents = intArrayFromString(read_(obj.url), true);\n            obj.usedBytes = obj.contents.length;\n          } catch (e) {\n            throw new FS.ErrnoError(29);\n          }\n        } else {\n          throw new Error('Cannot load without read() or XMLHttpRequest.');\n        }\n      },createLazyFile:(parent, name, url, canRead, canWrite) => {\n        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.\n        /** @constructor */\n        function LazyUint8Array() {\n          this.lengthKnown = false;\n          this.chunks = []; // Loaded chunks. Index is the chunk number\n        }\n        LazyUint8Array.prototype.get = /** @this{Object} */ function LazyUint8Array_get(idx) {\n          if (idx > this.length-1 || idx < 0) {\n            return undefined;\n          }\n          var chunkOffset = idx % this.chunkSize;\n          var chunkNum = (idx / this.chunkSize)|0;\n          return this.getter(chunkNum)[chunkOffset];\n        };\n        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {\n          this.getter = getter;\n        };\n        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {\n          // Find length\n          var xhr = new XMLHttpRequest();\n          xhr.open('HEAD', url, false);\n          xhr.send(null);\n          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error(\"Couldn't load \" + url + \". Status: \" + xhr.status);\n          var datalength = Number(xhr.getResponseHeader(\"Content-length\"));\n          var header;\n          var hasByteServing = (header = xhr.getResponseHeader(\"Accept-Ranges\")) && header === \"bytes\";\n          var usesGzip = (header = xhr.getResponseHeader(\"Content-Encoding\")) && header === \"gzip\";\n  \n          var chunkSize = 1024*1024; // Chunk size in bytes\n  \n          if (!hasByteServing) chunkSize = datalength;\n  \n          // Function to get a range from the remote URL.\n          var doXHR = (from, to) => {\n            if (from > to) throw new Error(\"invalid range (\" + from + \", \" + to + \") or no bytes requested!\");\n            if (to > datalength-1) throw new Error(\"only \" + datalength + \" bytes available! programmer error!\");\n  \n            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.\n            var xhr = new XMLHttpRequest();\n            xhr.open('GET', url, false);\n            if (datalength !== chunkSize) xhr.setRequestHeader(\"Range\", \"bytes=\" + from + \"-\" + to);\n  \n            // Some hints to the browser that we want binary data.\n            xhr.responseType = 'arraybuffer';\n            if (xhr.overrideMimeType) {\n              xhr.overrideMimeType('text/plain; charset=x-user-defined');\n            }\n  \n            xhr.send(null);\n            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error(\"Couldn't load \" + url + \". Status: \" + xhr.status);\n            if (xhr.response !== undefined) {\n              return new Uint8Array(/** @type{Array<number>} */(xhr.response || []));\n            }\n            return intArrayFromString(xhr.responseText || '', true);\n          };\n          var lazyArray = this;\n          lazyArray.setDataGetter((chunkNum) => {\n            var start = chunkNum * chunkSize;\n            var end = (chunkNum+1) * chunkSize - 1; // including this byte\n            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block\n            if (typeof lazyArray.chunks[chunkNum] == 'undefined') {\n              lazyArray.chunks[chunkNum] = doXHR(start, end);\n            }\n            if (typeof lazyArray.chunks[chunkNum] == 'undefined') throw new Error('doXHR failed!');\n            return lazyArray.chunks[chunkNum];\n          });\n  \n          if (usesGzip || !datalength) {\n            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length\n            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file\n            datalength = this.getter(0).length;\n            chunkSize = datalength;\n            out(\"LazyFiles on gzip forces download of the whole file when length is accessed\");\n          }\n  \n          this._length = datalength;\n          this._chunkSize = chunkSize;\n          this.lengthKnown = true;\n        };\n        if (typeof XMLHttpRequest != 'undefined') {\n          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';\n          var lazyArray = new LazyUint8Array();\n          Object.defineProperties(lazyArray, {\n            length: {\n              get: /** @this{Object} */ function() {\n                if (!this.lengthKnown) {\n                  this.cacheLength();\n                }\n                return this._length;\n              }\n            },\n            chunkSize: {\n              get: /** @this{Object} */ function() {\n                if (!this.lengthKnown) {\n                  this.cacheLength();\n                }\n                return this._chunkSize;\n              }\n            }\n          });\n  \n          var properties = { isDevice: false, contents: lazyArray };\n        } else {\n          var properties = { isDevice: false, url: url };\n        }\n  \n        var node = FS.createFile(parent, name, properties, canRead, canWrite);\n        // This is a total hack, but I want to get this lazy file code out of the\n        // core of MEMFS. If we want to keep this lazy file concept I feel it should\n        // be its own thin LAZYFS proxying calls to MEMFS.\n        if (properties.contents) {\n          node.contents = properties.contents;\n        } else if (properties.url) {\n          node.contents = null;\n          node.url = properties.url;\n        }\n        // Add a function that defers querying the file size until it is asked the first time.\n        Object.defineProperties(node, {\n          usedBytes: {\n            get: /** @this {FSNode} */ function() { return this.contents.length; }\n          }\n        });\n        // override each stream op with one that tries to force load the lazy file first\n        var stream_ops = {};\n        var keys = Object.keys(node.stream_ops);\n        keys.forEach((key) => {\n          var fn = node.stream_ops[key];\n          stream_ops[key] = function forceLoadLazyFile() {\n            FS.forceLoadFile(node);\n            return fn.apply(null, arguments);\n          };\n        });\n        function writeChunks(stream, buffer, offset, length, position) {\n          var contents = stream.node.contents;\n          if (position >= contents.length)\n            return 0;\n          var size = Math.min(contents.length - position, length);\n          assert(size >= 0);\n          if (contents.slice) { // normal array\n            for (var i = 0; i < size; i++) {\n              buffer[offset + i] = contents[position + i];\n            }\n          } else {\n            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR\n              buffer[offset + i] = contents.get(position + i);\n            }\n          }\n          return size;\n        }\n        // use a custom read function\n        stream_ops.read = (stream, buffer, offset, length, position) => {\n          FS.forceLoadFile(node);\n          return writeChunks(stream, buffer, offset, length, position)\n        };\n        // use a custom mmap function\n        stream_ops.mmap = (stream, length, position, prot, flags) => {\n          FS.forceLoadFile(node);\n          var ptr = mmapAlloc(length);\n          if (!ptr) {\n            throw new FS.ErrnoError(48);\n          }\n          writeChunks(stream, HEAP8, ptr, length, position);\n          return { ptr: ptr, allocated: true };\n        };\n        node.stream_ops = stream_ops;\n        return node;\n      },createPreloadedFile:(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) => {\n        // TODO we should allow people to just pass in a complete filename instead\n        // of parent and name being that we just join them anyways\n        var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;\n        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname\n        function processData(byteArray) {\n          function finish(byteArray) {\n            if (preFinish) preFinish();\n            if (!dontCreateFile) {\n              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);\n            }\n            if (onload) onload();\n            removeRunDependency(dep);\n          }\n          if (Browser.handledByPreloadPlugin(byteArray, fullname, finish, () => {\n            if (onerror) onerror();\n            removeRunDependency(dep);\n          })) {\n            return;\n          }\n          finish(byteArray);\n        }\n        addRunDependency(dep);\n        if (typeof url == 'string') {\n          asyncLoad(url, (byteArray) => processData(byteArray), onerror);\n        } else {\n          processData(url);\n        }\n      },absolutePath:() => {\n        abort('FS.absolutePath has been removed; use PATH_FS.resolve instead');\n      },createFolder:() => {\n        abort('FS.createFolder has been removed; use FS.mkdir instead');\n      },createLink:() => {\n        abort('FS.createLink has been removed; use FS.symlink instead');\n      },joinPath:() => {\n        abort('FS.joinPath has been removed; use PATH.join instead');\n      },mmapAlloc:() => {\n        abort('FS.mmapAlloc has been replaced by the top level function mmapAlloc');\n      },standardizePath:() => {\n        abort('FS.standardizePath has been removed; use PATH.normalize instead');\n      }};\n  \n  var SYSCALLS = {DEFAULT_POLLMASK:5,calculateAt:function(dirfd, path, allowEmpty) {\n        if (PATH.isAbs(path)) {\n          return path;\n        }\n        // relative path\n        var dir;\n        if (dirfd === -100) {\n          dir = FS.cwd();\n        } else {\n          var dirstream = SYSCALLS.getStreamFromFD(dirfd);\n          dir = dirstream.path;\n        }\n        if (path.length == 0) {\n          if (!allowEmpty) {\n            throw new FS.ErrnoError(44);;\n          }\n          return dir;\n        }\n        return PATH.join2(dir, path);\n      },doStat:function(func, path, buf) {\n        try {\n          var stat = func(path);\n        } catch (e) {\n          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {\n            // an error occurred while trying to look up the path; we should just report ENOTDIR\n            return -54;\n          }\n          throw e;\n        }\n        HEAP32[((buf)>>2)] = stat.dev;\n        HEAP32[(((buf)+(8))>>2)] = stat.ino;\n        HEAP32[(((buf)+(12))>>2)] = stat.mode;\n        HEAPU32[(((buf)+(16))>>2)] = stat.nlink;\n        HEAP32[(((buf)+(20))>>2)] = stat.uid;\n        HEAP32[(((buf)+(24))>>2)] = stat.gid;\n        HEAP32[(((buf)+(28))>>2)] = stat.rdev;\n        (tempI64 = [stat.size>>>0,(tempDouble=stat.size,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(40))>>2)] = tempI64[0],HEAP32[(((buf)+(44))>>2)] = tempI64[1]);\n        HEAP32[(((buf)+(48))>>2)] = 4096;\n        HEAP32[(((buf)+(52))>>2)] = stat.blocks;\n        var atime = stat.atime.getTime();\n        var mtime = stat.mtime.getTime();\n        var ctime = stat.ctime.getTime();\n        (tempI64 = [Math.floor(atime / 1000)>>>0,(tempDouble=Math.floor(atime / 1000),(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(56))>>2)] = tempI64[0],HEAP32[(((buf)+(60))>>2)] = tempI64[1]);\n        HEAPU32[(((buf)+(64))>>2)] = (atime % 1000) * 1000;\n        (tempI64 = [Math.floor(mtime / 1000)>>>0,(tempDouble=Math.floor(mtime / 1000),(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(72))>>2)] = tempI64[0],HEAP32[(((buf)+(76))>>2)] = tempI64[1]);\n        HEAPU32[(((buf)+(80))>>2)] = (mtime % 1000) * 1000;\n        (tempI64 = [Math.floor(ctime / 1000)>>>0,(tempDouble=Math.floor(ctime / 1000),(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(88))>>2)] = tempI64[0],HEAP32[(((buf)+(92))>>2)] = tempI64[1]);\n        HEAPU32[(((buf)+(96))>>2)] = (ctime % 1000) * 1000;\n        (tempI64 = [stat.ino>>>0,(tempDouble=stat.ino,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(104))>>2)] = tempI64[0],HEAP32[(((buf)+(108))>>2)] = tempI64[1]);\n        return 0;\n      },doMsync:function(addr, stream, len, flags, offset) {\n        if (!FS.isFile(stream.node.mode)) {\n          throw new FS.ErrnoError(43);\n        }\n        if (flags & 2) {\n          // MAP_PRIVATE calls need not to be synced back to underlying fs\n          return 0;\n        }\n        var buffer = HEAPU8.slice(addr, addr + len);\n        FS.msync(stream, buffer, offset, len, flags);\n      },varargs:undefined,get:function() {\n        assert(SYSCALLS.varargs != undefined);\n        SYSCALLS.varargs += 4;\n        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];\n        return ret;\n      },getStr:function(ptr) {\n        var ret = UTF8ToString(ptr);\n        return ret;\n      },getStreamFromFD:function(fd) {\n        var stream = FS.getStream(fd);\n        if (!stream) throw new FS.ErrnoError(8);\n        return stream;\n      }};\n  function ___syscall_fcntl64(fd, cmd, varargs) {\n  SYSCALLS.varargs = varargs;\n  try {\n  \n      var stream = SYSCALLS.getStreamFromFD(fd);\n      switch (cmd) {\n        case 0: {\n          var arg = SYSCALLS.get();\n          if (arg < 0) {\n            return -28;\n          }\n          var newStream;\n          newStream = FS.createStream(stream, arg);\n          return newStream.fd;\n        }\n        case 1:\n        case 2:\n          return 0;  // FD_CLOEXEC makes no sense for a single process.\n        case 3:\n          return stream.flags;\n        case 4: {\n          var arg = SYSCALLS.get();\n          stream.flags |= arg;\n          return 0;\n        }\n        case 5:\n        /* case 5: Currently in musl F_GETLK64 has same value as F_GETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */ {\n          \n          var arg = SYSCALLS.get();\n          var offset = 0;\n          // We're always unlocked.\n          HEAP16[(((arg)+(offset))>>1)] = 2;\n          return 0;\n        }\n        case 6:\n        case 7:\n        /* case 6: Currently in musl F_SETLK64 has same value as F_SETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */\n        /* case 7: Currently in musl F_SETLKW64 has same value as F_SETLKW, so omitted to avoid duplicate case blocks. If that changes, uncomment this */\n          \n          \n          return 0; // Pretend that the locking is successful.\n        case 16:\n        case 8:\n          return -28; // These are for sockets. We don't have them fully implemented yet.\n        case 9:\n          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fcntl() returns that, and we set errno ourselves.\n          setErrNo(28);\n          return -1;\n        default: {\n          return -28;\n        }\n      }\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  }\n\n  function ___syscall_fstat64(fd, buf) {\n  try {\n  \n      var stream = SYSCALLS.getStreamFromFD(fd);\n      return SYSCALLS.doStat(FS.stat, stream.path, buf);\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  }\n\n  function ___syscall_ioctl(fd, op, varargs) {\n  SYSCALLS.varargs = varargs;\n  try {\n  \n      var stream = SYSCALLS.getStreamFromFD(fd);\n      switch (op) {\n        case 21509:\n        case 21505: {\n          if (!stream.tty) return -59;\n          return 0;\n        }\n        case 21510:\n        case 21511:\n        case 21512:\n        case 21506:\n        case 21507:\n        case 21508: {\n          if (!stream.tty) return -59;\n          return 0; // no-op, not actually adjusting terminal settings\n        }\n        case 21519: {\n          if (!stream.tty) return -59;\n          var argp = SYSCALLS.get();\n          HEAP32[((argp)>>2)] = 0;\n          return 0;\n        }\n        case 21520: {\n          if (!stream.tty) return -59;\n          return -28; // not supported\n        }\n        case 21531: {\n          var argp = SYSCALLS.get();\n          return FS.ioctl(stream, op, argp);\n        }\n        case 21523: {\n          // TODO: in theory we should write to the winsize struct that gets\n          // passed in, but for now musl doesn't read anything on it\n          if (!stream.tty) return -59;\n          return 0;\n        }\n        case 21524: {\n          // TODO: technically, this ioctl call should change the window size.\n          // but, since emscripten doesn't have any concept of a terminal window\n          // yet, we'll just silently throw it away as we do TIOCGWINSZ\n          if (!stream.tty) return -59;\n          return 0;\n        }\n        default: return -28; // not supported\n      }\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  }\n\n  function ___syscall_lstat64(path, buf) {\n  try {\n  \n      path = SYSCALLS.getStr(path);\n      return SYSCALLS.doStat(FS.lstat, path, buf);\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  }\n\n  function ___syscall_newfstatat(dirfd, path, buf, flags) {\n  try {\n  \n      path = SYSCALLS.getStr(path);\n      var nofollow = flags & 256;\n      var allowEmpty = flags & 4096;\n      flags = flags & (~6400);\n      assert(!flags, 'unknown flags in __syscall_newfstatat: ' + flags);\n      path = SYSCALLS.calculateAt(dirfd, path, allowEmpty);\n      return SYSCALLS.doStat(nofollow ? FS.lstat : FS.stat, path, buf);\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  }\n\n  function ___syscall_openat(dirfd, path, flags, varargs) {\n  SYSCALLS.varargs = varargs;\n  try {\n  \n      path = SYSCALLS.getStr(path);\n      path = SYSCALLS.calculateAt(dirfd, path);\n      var mode = varargs ? SYSCALLS.get() : 0;\n      return FS.open(path, flags, mode).fd;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  }\n\n  function ___syscall_stat64(path, buf) {\n  try {\n  \n      path = SYSCALLS.getStr(path);\n      return SYSCALLS.doStat(FS.stat, path, buf);\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  }\n\n  \n  function ___throw_exception_with_stack_trace(ex) {\n      var e = new WebAssembly.Exception(getCppExceptionTag(), [ex], {traceStack: true});\n      e.message = getExceptionMessage(e);\n      // The generated stack trace will be in the form of:\n      //\n      // Error\n      //     at ___throw_exception_with_stack_trace(test.js:1139:13)\n      //     at __cxa_throw (wasm://wasm/009a7c9a:wasm-function[1551]:0x24367)\n      //     ...\n      //\n      // Remove this JS function name, which is in the second line, from the stack\n      // trace. Note that .stack does not yet exist in all browsers (see #18828).\n      if (e.stack) {\n        var arr = e.stack.split('\\n');\n        arr.splice(1,1);\n        e.stack = arr.join('\\n');\n      }\n      throw e;\n    }\n\n  function __embind_register_bigint(primitiveType, name, size, minRange, maxRange) {}\n\n  function getShiftFromSize(size) {\n      switch (size) {\n          case 1: return 0;\n          case 2: return 1;\n          case 4: return 2;\n          case 8: return 3;\n          default:\n              throw new TypeError('Unknown type size: ' + size);\n      }\n    }\n  \n  function embind_init_charCodes() {\n      var codes = new Array(256);\n      for (var i = 0; i < 256; ++i) {\n          codes[i] = String.fromCharCode(i);\n      }\n      embind_charCodes = codes;\n    }\n  var embind_charCodes = undefined;\n  function readLatin1String(ptr) {\n      var ret = \"\";\n      var c = ptr;\n      while (HEAPU8[c]) {\n          ret += embind_charCodes[HEAPU8[c++]];\n      }\n      return ret;\n    }\n  \n  var awaitingDependencies = {};\n  \n  var registeredTypes = {};\n  \n  var typeDependencies = {};\n  \n  var char_0 = 48;\n  \n  var char_9 = 57;\n  function makeLegalFunctionName(name) {\n      if (undefined === name) {\n        return '_unknown';\n      }\n      name = name.replace(/[^a-zA-Z0-9_]/g, '$');\n      var f = name.charCodeAt(0);\n      if (f >= char_0 && f <= char_9) {\n        return '_' + name;\n      }\n      return name;\n    }\n  function createNamedFunction(name, body) {\n      name = makeLegalFunctionName(name);\n      // Use an abject with a computed property name to create a new function with\n      // a name specified at runtime, but without using `new Function` or `eval`.\n      return {\n        [name]: function() {\n          return body.apply(this, arguments);\n        }\n      }[name];\n    }\n  function extendError(baseErrorType, errorName) {\n      var errorClass = createNamedFunction(errorName, function(message) {\n        this.name = errorName;\n        this.message = message;\n  \n        var stack = (new Error(message)).stack;\n        if (stack !== undefined) {\n          this.stack = this.toString() + '\\n' +\n              stack.replace(/^Error(:[^\\n]*)?\\n/, '');\n        }\n      });\n      errorClass.prototype = Object.create(baseErrorType.prototype);\n      errorClass.prototype.constructor = errorClass;\n      errorClass.prototype.toString = function() {\n        if (this.message === undefined) {\n          return this.name;\n        } else {\n          return this.name + ': ' + this.message;\n        }\n      };\n  \n      return errorClass;\n    }\n  var BindingError = undefined;\n  function throwBindingError(message) {\n      throw new BindingError(message);\n    }\n  \n  \n  \n  \n  var InternalError = undefined;\n  function throwInternalError(message) {\n      throw new InternalError(message);\n    }\n  function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {\n      myTypes.forEach(function(type) {\n          typeDependencies[type] = dependentTypes;\n      });\n  \n      function onComplete(typeConverters) {\n          var myTypeConverters = getTypeConverters(typeConverters);\n          if (myTypeConverters.length !== myTypes.length) {\n              throwInternalError('Mismatched type converter count');\n          }\n          for (var i = 0; i < myTypes.length; ++i) {\n              registerType(myTypes[i], myTypeConverters[i]);\n          }\n      }\n  \n      var typeConverters = new Array(dependentTypes.length);\n      var unregisteredTypes = [];\n      var registered = 0;\n      dependentTypes.forEach((dt, i) => {\n        if (registeredTypes.hasOwnProperty(dt)) {\n          typeConverters[i] = registeredTypes[dt];\n        } else {\n          unregisteredTypes.push(dt);\n          if (!awaitingDependencies.hasOwnProperty(dt)) {\n            awaitingDependencies[dt] = [];\n          }\n          awaitingDependencies[dt].push(() => {\n            typeConverters[i] = registeredTypes[dt];\n            ++registered;\n            if (registered === unregisteredTypes.length) {\n              onComplete(typeConverters);\n            }\n          });\n        }\n      });\n      if (0 === unregisteredTypes.length) {\n        onComplete(typeConverters);\n      }\n    }\n  /** @param {Object=} options */\n  function registerType(rawType, registeredInstance, options = {}) {\n      if (!('argPackAdvance' in registeredInstance)) {\n          throw new TypeError('registerType registeredInstance requires argPackAdvance');\n      }\n  \n      var name = registeredInstance.name;\n      if (!rawType) {\n          throwBindingError('type \"' + name + '\" must have a positive integer typeid pointer');\n      }\n      if (registeredTypes.hasOwnProperty(rawType)) {\n          if (options.ignoreDuplicateRegistrations) {\n              return;\n          } else {\n              throwBindingError(\"Cannot register type '\" + name + \"' twice\");\n          }\n      }\n  \n      registeredTypes[rawType] = registeredInstance;\n      delete typeDependencies[rawType];\n  \n      if (awaitingDependencies.hasOwnProperty(rawType)) {\n        var callbacks = awaitingDependencies[rawType];\n        delete awaitingDependencies[rawType];\n        callbacks.forEach((cb) => cb());\n      }\n    }\n  function __embind_register_bool(rawType, name, size, trueValue, falseValue) {\n      var shift = getShiftFromSize(size);\n  \n      name = readLatin1String(name);\n      registerType(rawType, {\n          name: name,\n          'fromWireType': function(wt) {\n              // ambiguous emscripten ABI: sometimes return values are\n              // true or false, and sometimes integers (0 or 1)\n              return !!wt;\n          },\n          'toWireType': function(destructors, o) {\n              return o ? trueValue : falseValue;\n          },\n          'argPackAdvance': 8,\n          'readValueFromPointer': function(pointer) {\n              // TODO: if heap is fixed (like in asm.js) this could be executed outside\n              var heap;\n              if (size === 1) {\n                  heap = HEAP8;\n              } else if (size === 2) {\n                  heap = HEAP16;\n              } else if (size === 4) {\n                  heap = HEAP32;\n              } else {\n                  throw new TypeError(\"Unknown boolean type size: \" + name);\n              }\n              return this['fromWireType'](heap[pointer >> shift]);\n          },\n          destructorFunction: null, // This type does not need a destructor\n      });\n    }\n\n  \n  function ClassHandle_isAliasOf(other) {\n      if (!(this instanceof ClassHandle)) {\n        return false;\n      }\n      if (!(other instanceof ClassHandle)) {\n        return false;\n      }\n  \n      var leftClass = this.$$.ptrType.registeredClass;\n      var left = this.$$.ptr;\n      var rightClass = other.$$.ptrType.registeredClass;\n      var right = other.$$.ptr;\n  \n      while (leftClass.baseClass) {\n        left = leftClass.upcast(left);\n        leftClass = leftClass.baseClass;\n      }\n  \n      while (rightClass.baseClass) {\n        right = rightClass.upcast(right);\n        rightClass = rightClass.baseClass;\n      }\n  \n      return leftClass === rightClass && left === right;\n    }\n  \n  function shallowCopyInternalPointer(o) {\n      return {\n        count: o.count,\n        deleteScheduled: o.deleteScheduled,\n        preservePointerOnDelete: o.preservePointerOnDelete,\n        ptr: o.ptr,\n        ptrType: o.ptrType,\n        smartPtr: o.smartPtr,\n        smartPtrType: o.smartPtrType,\n      };\n    }\n  \n  function throwInstanceAlreadyDeleted(obj) {\n      function getInstanceTypeName(handle) {\n        return handle.$$.ptrType.registeredClass.name;\n      }\n      throwBindingError(getInstanceTypeName(obj) + ' instance already deleted');\n    }\n  \n  var finalizationRegistry = false;\n  \n  function detachFinalizer(handle) {}\n  \n  function runDestructor($$) {\n      if ($$.smartPtr) {\n        $$.smartPtrType.rawDestructor($$.smartPtr);\n      } else {\n        $$.ptrType.registeredClass.rawDestructor($$.ptr);\n      }\n    }\n  function releaseClassHandle($$) {\n      $$.count.value -= 1;\n      var toDelete = 0 === $$.count.value;\n      if (toDelete) {\n        runDestructor($$);\n      }\n    }\n  \n  function downcastPointer(ptr, ptrClass, desiredClass) {\n      if (ptrClass === desiredClass) {\n        return ptr;\n      }\n      if (undefined === desiredClass.baseClass) {\n        return null; // no conversion\n      }\n  \n      var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);\n      if (rv === null) {\n        return null;\n      }\n      return desiredClass.downcast(rv);\n    }\n  \n  var registeredPointers = {};\n  \n  function getInheritedInstanceCount() {\n      return Object.keys(registeredInstances).length;\n    }\n  \n  function getLiveInheritedInstances() {\n      var rv = [];\n      for (var k in registeredInstances) {\n        if (registeredInstances.hasOwnProperty(k)) {\n          rv.push(registeredInstances[k]);\n        }\n      }\n      return rv;\n    }\n  \n  var deletionQueue = [];\n  function flushPendingDeletes() {\n      while (deletionQueue.length) {\n        var obj = deletionQueue.pop();\n        obj.$$.deleteScheduled = false;\n        obj['delete']();\n      }\n    }\n  \n  var delayFunction = undefined;\n  \n  \n  function setDelayFunction(fn) {\n      delayFunction = fn;\n      if (deletionQueue.length && delayFunction) {\n        delayFunction(flushPendingDeletes);\n      }\n    }\n  function init_embind() {\n      Module['getInheritedInstanceCount'] = getInheritedInstanceCount;\n      Module['getLiveInheritedInstances'] = getLiveInheritedInstances;\n      Module['flushPendingDeletes'] = flushPendingDeletes;\n      Module['setDelayFunction'] = setDelayFunction;\n    }\n  var registeredInstances = {};\n  \n  function getBasestPointer(class_, ptr) {\n      if (ptr === undefined) {\n          throwBindingError('ptr should not be undefined');\n      }\n      while (class_.baseClass) {\n          ptr = class_.upcast(ptr);\n          class_ = class_.baseClass;\n      }\n      return ptr;\n    }\n  function getInheritedInstance(class_, ptr) {\n      ptr = getBasestPointer(class_, ptr);\n      return registeredInstances[ptr];\n    }\n  \n  \n  function makeClassHandle(prototype, record) {\n      if (!record.ptrType || !record.ptr) {\n        throwInternalError('makeClassHandle requires ptr and ptrType');\n      }\n      var hasSmartPtrType = !!record.smartPtrType;\n      var hasSmartPtr = !!record.smartPtr;\n      if (hasSmartPtrType !== hasSmartPtr) {\n        throwInternalError('Both smartPtrType and smartPtr must be specified');\n      }\n      record.count = { value: 1 };\n      return attachFinalizer(Object.create(prototype, {\n        $$: {\n            value: record,\n        },\n      }));\n    }\n  function RegisteredPointer_fromWireType(ptr) {\n      // ptr is a raw pointer (or a raw smartpointer)\n  \n      // rawPointer is a maybe-null raw pointer\n      var rawPointer = this.getPointee(ptr);\n      if (!rawPointer) {\n        this.destructor(ptr);\n        return null;\n      }\n  \n      var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);\n      if (undefined !== registeredInstance) {\n        // JS object has been neutered, time to repopulate it\n        if (0 === registeredInstance.$$.count.value) {\n          registeredInstance.$$.ptr = rawPointer;\n          registeredInstance.$$.smartPtr = ptr;\n          return registeredInstance['clone']();\n        } else {\n          // else, just increment reference count on existing object\n          // it already has a reference to the smart pointer\n          var rv = registeredInstance['clone']();\n          this.destructor(ptr);\n          return rv;\n        }\n      }\n  \n      function makeDefaultHandle() {\n        if (this.isSmartPointer) {\n          return makeClassHandle(this.registeredClass.instancePrototype, {\n            ptrType: this.pointeeType,\n            ptr: rawPointer,\n            smartPtrType: this,\n            smartPtr: ptr,\n          });\n        } else {\n          return makeClassHandle(this.registeredClass.instancePrototype, {\n            ptrType: this,\n            ptr: ptr,\n          });\n        }\n      }\n  \n      var actualType = this.registeredClass.getActualType(rawPointer);\n      var registeredPointerRecord = registeredPointers[actualType];\n      if (!registeredPointerRecord) {\n        return makeDefaultHandle.call(this);\n      }\n  \n      var toType;\n      if (this.isConst) {\n        toType = registeredPointerRecord.constPointerType;\n      } else {\n        toType = registeredPointerRecord.pointerType;\n      }\n      var dp = downcastPointer(\n          rawPointer,\n          this.registeredClass,\n          toType.registeredClass);\n      if (dp === null) {\n        return makeDefaultHandle.call(this);\n      }\n      if (this.isSmartPointer) {\n        return makeClassHandle(toType.registeredClass.instancePrototype, {\n          ptrType: toType,\n          ptr: dp,\n          smartPtrType: this,\n          smartPtr: ptr,\n        });\n      } else {\n        return makeClassHandle(toType.registeredClass.instancePrototype, {\n          ptrType: toType,\n          ptr: dp,\n        });\n      }\n    }\n  function attachFinalizer(handle) {\n      if ('undefined' === typeof FinalizationRegistry) {\n        attachFinalizer = (handle) => handle;\n        return handle;\n      }\n      // If the running environment has a FinalizationRegistry (see\n      // https://github.com/tc39/proposal-weakrefs), then attach finalizers\n      // for class handles.  We check for the presence of FinalizationRegistry\n      // at run-time, not build-time.\n      finalizationRegistry = new FinalizationRegistry((info) => {\n        console.warn(info.leakWarning.stack.replace(/^Error: /, ''));\n        releaseClassHandle(info.$$);\n      });\n      attachFinalizer = (handle) => {\n        var $$ = handle.$$;\n        var hasSmartPtr = !!$$.smartPtr;\n        if (hasSmartPtr) {\n          // We should not call the destructor on raw pointers in case other code expects the pointee to live\n          var info = { $$: $$ };\n          // Create a warning as an Error instance in advance so that we can store\n          // the current stacktrace and point to it when / if a leak is detected.\n          // This is more useful than the empty stacktrace of `FinalizationRegistry`\n          // callback.\n          var cls = $$.ptrType.registeredClass;\n          info.leakWarning = new Error(\"Embind found a leaked C++ instance \" + cls.name + \" <\" + ptrToString($$.ptr) + \">.\\n\" +\n          \"We'll free it automatically in this case, but this functionality is not reliable across various environments.\\n\" +\n          \"Make sure to invoke .delete() manually once you're done with the instance instead.\\n\" +\n          \"Originally allocated\"); // `.stack` will add \"at ...\" after this sentence\n          if ('captureStackTrace' in Error) {\n            Error.captureStackTrace(info.leakWarning, RegisteredPointer_fromWireType);\n          }\n          finalizationRegistry.register(handle, info, handle);\n        }\n        return handle;\n      };\n      detachFinalizer = (handle) => finalizationRegistry.unregister(handle);\n      return attachFinalizer(handle);\n    }\n  function ClassHandle_clone() {\n      if (!this.$$.ptr) {\n        throwInstanceAlreadyDeleted(this);\n      }\n  \n      if (this.$$.preservePointerOnDelete) {\n        this.$$.count.value += 1;\n        return this;\n      } else {\n        var clone = attachFinalizer(Object.create(Object.getPrototypeOf(this), {\n          $$: {\n            value: shallowCopyInternalPointer(this.$$),\n          }\n        }));\n  \n        clone.$$.count.value += 1;\n        clone.$$.deleteScheduled = false;\n        return clone;\n      }\n    }\n  \n  \n  \n  \n  function ClassHandle_delete() {\n      if (!this.$$.ptr) {\n        throwInstanceAlreadyDeleted(this);\n      }\n  \n      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {\n        throwBindingError('Object already scheduled for deletion');\n      }\n  \n      detachFinalizer(this);\n      releaseClassHandle(this.$$);\n  \n      if (!this.$$.preservePointerOnDelete) {\n        this.$$.smartPtr = undefined;\n        this.$$.ptr = undefined;\n      }\n    }\n  \n  function ClassHandle_isDeleted() {\n      return !this.$$.ptr;\n    }\n  \n  \n  \n  function ClassHandle_deleteLater() {\n      if (!this.$$.ptr) {\n        throwInstanceAlreadyDeleted(this);\n      }\n      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {\n        throwBindingError('Object already scheduled for deletion');\n      }\n      deletionQueue.push(this);\n      if (deletionQueue.length === 1 && delayFunction) {\n        delayFunction(flushPendingDeletes);\n      }\n      this.$$.deleteScheduled = true;\n      return this;\n    }\n  function init_ClassHandle() {\n      ClassHandle.prototype['isAliasOf'] = ClassHandle_isAliasOf;\n      ClassHandle.prototype['clone'] = ClassHandle_clone;\n      ClassHandle.prototype['delete'] = ClassHandle_delete;\n      ClassHandle.prototype['isDeleted'] = ClassHandle_isDeleted;\n      ClassHandle.prototype['deleteLater'] = ClassHandle_deleteLater;\n    }\n  function ClassHandle() {\n    }\n  \n  \n  \n  function ensureOverloadTable(proto, methodName, humanName) {\n      if (undefined === proto[methodName].overloadTable) {\n        var prevFunc = proto[methodName];\n        // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.\n        proto[methodName] = function() {\n          // TODO This check can be removed in -O3 level \"unsafe\" optimizations.\n          if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {\n              throwBindingError(\"Function '\" + humanName + \"' called with an invalid number of arguments (\" + arguments.length + \") - expects one of (\" + proto[methodName].overloadTable + \")!\");\n          }\n          return proto[methodName].overloadTable[arguments.length].apply(this, arguments);\n        };\n        // Move the previous function into the overload table.\n        proto[methodName].overloadTable = [];\n        proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;\n      }\n    }\n  \n  /** @param {number=} numArguments */\n  function exposePublicSymbol(name, value, numArguments) {\n      if (Module.hasOwnProperty(name)) {\n        if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {\n          throwBindingError(\"Cannot register public name '\" + name + \"' twice\");\n        }\n  \n        // We are exposing a function with the same name as an existing function. Create an overload table and a function selector\n        // that routes between the two.\n        ensureOverloadTable(Module, name, name);\n        if (Module.hasOwnProperty(numArguments)) {\n            throwBindingError(\"Cannot register multiple overloads of a function with the same number of arguments (\" + numArguments + \")!\");\n        }\n        // Add the new function into the overload table.\n        Module[name].overloadTable[numArguments] = value;\n      }\n      else {\n        Module[name] = value;\n        if (undefined !== numArguments) {\n          Module[name].numArguments = numArguments;\n        }\n      }\n    }\n  \n  \n  \n  /** @constructor */\n  function RegisteredClass(name,\n                               constructor,\n                               instancePrototype,\n                               rawDestructor,\n                               baseClass,\n                               getActualType,\n                               upcast,\n                               downcast) {\n      this.name = name;\n      this.constructor = constructor;\n      this.instancePrototype = instancePrototype;\n      this.rawDestructor = rawDestructor;\n      this.baseClass = baseClass;\n      this.getActualType = getActualType;\n      this.upcast = upcast;\n      this.downcast = downcast;\n      this.pureVirtualFunctions = [];\n    }\n  \n  \n  function upcastPointer(ptr, ptrClass, desiredClass) {\n      while (ptrClass !== desiredClass) {\n        if (!ptrClass.upcast) {\n          throwBindingError(\"Expected null or instance of \" + desiredClass.name + \", got an instance of \" + ptrClass.name);\n        }\n        ptr = ptrClass.upcast(ptr);\n        ptrClass = ptrClass.baseClass;\n      }\n      return ptr;\n    }\n  function constNoSmartPtrRawPointerToWireType(destructors, handle) {\n      if (handle === null) {\n        if (this.isReference) {\n          throwBindingError('null is not a valid ' + this.name);\n        }\n        return 0;\n      }\n  \n      if (!handle.$$) {\n        throwBindingError('Cannot pass \"' + embindRepr(handle) + '\" as a ' + this.name);\n      }\n      if (!handle.$$.ptr) {\n        throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);\n      }\n      var handleClass = handle.$$.ptrType.registeredClass;\n      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);\n      return ptr;\n    }\n  \n  \n  function genericPointerToWireType(destructors, handle) {\n      var ptr;\n      if (handle === null) {\n        if (this.isReference) {\n          throwBindingError('null is not a valid ' + this.name);\n        }\n  \n        if (this.isSmartPointer) {\n          ptr = this.rawConstructor();\n          if (destructors !== null) {\n            destructors.push(this.rawDestructor, ptr);\n          }\n          return ptr;\n        } else {\n          return 0;\n        }\n      }\n  \n      if (!handle.$$) {\n        throwBindingError('Cannot pass \"' + embindRepr(handle) + '\" as a ' + this.name);\n      }\n      if (!handle.$$.ptr) {\n        throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);\n      }\n      if (!this.isConst && handle.$$.ptrType.isConst) {\n        throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);\n      }\n      var handleClass = handle.$$.ptrType.registeredClass;\n      ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);\n  \n      if (this.isSmartPointer) {\n        // TODO: this is not strictly true\n        // We could support BY_EMVAL conversions from raw pointers to smart pointers\n        // because the smart pointer can hold a reference to the handle\n        if (undefined === handle.$$.smartPtr) {\n          throwBindingError('Passing raw pointer to smart pointer is illegal');\n        }\n  \n        switch (this.sharingPolicy) {\n          case 0: // NONE\n            // no upcasting\n            if (handle.$$.smartPtrType === this) {\n              ptr = handle.$$.smartPtr;\n            } else {\n              throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);\n            }\n            break;\n  \n          case 1: // INTRUSIVE\n            ptr = handle.$$.smartPtr;\n            break;\n  \n          case 2: // BY_EMVAL\n            if (handle.$$.smartPtrType === this) {\n              ptr = handle.$$.smartPtr;\n            } else {\n              var clonedHandle = handle['clone']();\n              ptr = this.rawShare(\n                ptr,\n                Emval.toHandle(function() {\n                  clonedHandle['delete']();\n                })\n              );\n              if (destructors !== null) {\n                destructors.push(this.rawDestructor, ptr);\n              }\n            }\n            break;\n  \n          default:\n            throwBindingError('Unsupporting sharing policy');\n        }\n      }\n      return ptr;\n    }\n  \n  \n  function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {\n      if (handle === null) {\n        if (this.isReference) {\n          throwBindingError('null is not a valid ' + this.name);\n        }\n        return 0;\n      }\n  \n      if (!handle.$$) {\n        throwBindingError('Cannot pass \"' + embindRepr(handle) + '\" as a ' + this.name);\n      }\n      if (!handle.$$.ptr) {\n        throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);\n      }\n      if (handle.$$.ptrType.isConst) {\n          throwBindingError('Cannot convert argument of type ' + handle.$$.ptrType.name + ' to parameter type ' + this.name);\n      }\n      var handleClass = handle.$$.ptrType.registeredClass;\n      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);\n      return ptr;\n    }\n  \n  function simpleReadValueFromPointer(pointer) {\n      return this['fromWireType'](HEAP32[((pointer)>>2)]);\n    }\n  \n  function RegisteredPointer_getPointee(ptr) {\n      if (this.rawGetPointee) {\n        ptr = this.rawGetPointee(ptr);\n      }\n      return ptr;\n    }\n  \n  function RegisteredPointer_destructor(ptr) {\n      if (this.rawDestructor) {\n        this.rawDestructor(ptr);\n      }\n    }\n  \n  function RegisteredPointer_deleteObject(handle) {\n      if (handle !== null) {\n        handle['delete']();\n      }\n    }\n  \n  function init_RegisteredPointer() {\n      RegisteredPointer.prototype.getPointee = RegisteredPointer_getPointee;\n      RegisteredPointer.prototype.destructor = RegisteredPointer_destructor;\n      RegisteredPointer.prototype['argPackAdvance'] = 8;\n      RegisteredPointer.prototype['readValueFromPointer'] = simpleReadValueFromPointer;\n      RegisteredPointer.prototype['deleteObject'] = RegisteredPointer_deleteObject;\n      RegisteredPointer.prototype['fromWireType'] = RegisteredPointer_fromWireType;\n    }\n  /** @constructor\n      @param {*=} pointeeType,\n      @param {*=} sharingPolicy,\n      @param {*=} rawGetPointee,\n      @param {*=} rawConstructor,\n      @param {*=} rawShare,\n      @param {*=} rawDestructor,\n       */\n  function RegisteredPointer(\n      name,\n      registeredClass,\n      isReference,\n      isConst,\n  \n      // smart pointer properties\n      isSmartPointer,\n      pointeeType,\n      sharingPolicy,\n      rawGetPointee,\n      rawConstructor,\n      rawShare,\n      rawDestructor\n    ) {\n      this.name = name;\n      this.registeredClass = registeredClass;\n      this.isReference = isReference;\n      this.isConst = isConst;\n  \n      // smart pointer properties\n      this.isSmartPointer = isSmartPointer;\n      this.pointeeType = pointeeType;\n      this.sharingPolicy = sharingPolicy;\n      this.rawGetPointee = rawGetPointee;\n      this.rawConstructor = rawConstructor;\n      this.rawShare = rawShare;\n      this.rawDestructor = rawDestructor;\n  \n      if (!isSmartPointer && registeredClass.baseClass === undefined) {\n        if (isConst) {\n          this['toWireType'] = constNoSmartPtrRawPointerToWireType;\n          this.destructorFunction = null;\n        } else {\n          this['toWireType'] = nonConstNoSmartPtrRawPointerToWireType;\n          this.destructorFunction = null;\n        }\n      } else {\n        this['toWireType'] = genericPointerToWireType;\n        // Here we must leave this.destructorFunction undefined, since whether genericPointerToWireType returns\n        // a pointer that needs to be freed up is runtime-dependent, and cannot be evaluated at registration time.\n        // TODO: Create an alternative mechanism that allows removing the use of var destructors = []; array in\n        //       craftInvokerFunction altogether.\n      }\n    }\n  \n  /** @param {number=} numArguments */\n  function replacePublicSymbol(name, value, numArguments) {\n      if (!Module.hasOwnProperty(name)) {\n        throwInternalError('Replacing nonexistant public symbol');\n      }\n      // If there's an overload table for this symbol, replace the symbol in the overload table instead.\n      if (undefined !== Module[name].overloadTable && undefined !== numArguments) {\n        Module[name].overloadTable[numArguments] = value;\n      }\n      else {\n        Module[name] = value;\n        Module[name].argCount = numArguments;\n      }\n    }\n  \n  \n  \n  function dynCallLegacy(sig, ptr, args) {\n      assert(('dynCall_' + sig) in Module, 'bad function pointer type - dynCall function not found for sig \\'' + sig + '\\'');\n      if (args && args.length) {\n        // j (64-bit integer) must be passed in as two numbers [low 32, high 32].\n        assert(args.length === sig.substring(1).replace(/j/g, '--').length);\n      } else {\n        assert(sig.length == 1);\n      }\n      var f = Module['dynCall_' + sig];\n      return args && args.length ? f.apply(null, [ptr].concat(args)) : f.call(null, ptr);\n    }\n  \n  var wasmTableMirror = [];\n  \n  function getWasmTableEntry(funcPtr) {\n      var func = wasmTableMirror[funcPtr];\n      if (!func) {\n        if (funcPtr >= wasmTableMirror.length) wasmTableMirror.length = funcPtr + 1;\n        wasmTableMirror[funcPtr] = func = wasmTable.get(funcPtr);\n      }\n      assert(wasmTable.get(funcPtr) == func, \"JavaScript-side Wasm function table mirror is out of date!\");\n      return func;\n    }\n  \n  /** @param {Object=} args */\n  function dynCall(sig, ptr, args) {\n      // Without WASM_BIGINT support we cannot directly call function with i64 as\n      // part of thier signature, so we rely the dynCall functions generated by\n      // wasm-emscripten-finalize\n      if (sig.includes('j')) {\n        return dynCallLegacy(sig, ptr, args);\n      }\n      assert(getWasmTableEntry(ptr), 'missing table entry in dynCall: ' + ptr);\n      var rtn = getWasmTableEntry(ptr).apply(null, args);\n      return rtn;\n    }\n  \n  function getDynCaller(sig, ptr) {\n      assert(sig.includes('j') || sig.includes('p'), 'getDynCaller should only be called with i64 sigs')\n      var argCache = [];\n      return function() {\n        argCache.length = 0;\n        Object.assign(argCache, arguments);\n        return dynCall(sig, ptr, argCache);\n      };\n    }\n  \n  \n  function embind__requireFunction(signature, rawFunction) {\n      signature = readLatin1String(signature);\n  \n      function makeDynCaller() {\n        if (signature.includes('j')) {\n          return getDynCaller(signature, rawFunction);\n        }\n        return getWasmTableEntry(rawFunction);\n      }\n  \n      var fp = makeDynCaller();\n      if (typeof fp != \"function\") {\n          throwBindingError(\"unknown function pointer with signature \" + signature + \": \" + rawFunction);\n      }\n      return fp;\n    }\n  \n  \n  \n  var UnboundTypeError = undefined;\n  \n  \n  function getTypeName(type) {\n      var ptr = ___getTypeName(type);\n      var rv = readLatin1String(ptr);\n      _free(ptr);\n      return rv;\n    }\n  function throwUnboundTypeError(message, types) {\n      var unboundTypes = [];\n      var seen = {};\n      function visit(type) {\n        if (seen[type]) {\n          return;\n        }\n        if (registeredTypes[type]) {\n          return;\n        }\n        if (typeDependencies[type]) {\n          typeDependencies[type].forEach(visit);\n          return;\n        }\n        unboundTypes.push(type);\n        seen[type] = true;\n      }\n      types.forEach(visit);\n  \n      throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));\n    }\n  \n  function __embind_register_class(rawType,\n                                     rawPointerType,\n                                     rawConstPointerType,\n                                     baseClassRawType,\n                                     getActualTypeSignature,\n                                     getActualType,\n                                     upcastSignature,\n                                     upcast,\n                                     downcastSignature,\n                                     downcast,\n                                     name,\n                                     destructorSignature,\n                                     rawDestructor) {\n      name = readLatin1String(name);\n      getActualType = embind__requireFunction(getActualTypeSignature, getActualType);\n      if (upcast) {\n        upcast = embind__requireFunction(upcastSignature, upcast);\n      }\n      if (downcast) {\n        downcast = embind__requireFunction(downcastSignature, downcast);\n      }\n      rawDestructor = embind__requireFunction(destructorSignature, rawDestructor);\n      var legalFunctionName = makeLegalFunctionName(name);\n  \n      exposePublicSymbol(legalFunctionName, function() {\n        // this code cannot run if baseClassRawType is zero\n        throwUnboundTypeError('Cannot construct ' + name + ' due to unbound types', [baseClassRawType]);\n      });\n  \n      whenDependentTypesAreResolved(\n        [rawType, rawPointerType, rawConstPointerType],\n        baseClassRawType ? [baseClassRawType] : [],\n        function(base) {\n          base = base[0];\n  \n          var baseClass;\n          var basePrototype;\n          if (baseClassRawType) {\n            baseClass = base.registeredClass;\n            basePrototype = baseClass.instancePrototype;\n          } else {\n            basePrototype = ClassHandle.prototype;\n          }\n  \n          var constructor = createNamedFunction(legalFunctionName, function() {\n            if (Object.getPrototypeOf(this) !== instancePrototype) {\n              throw new BindingError(\"Use 'new' to construct \" + name);\n            }\n            if (undefined === registeredClass.constructor_body) {\n              throw new BindingError(name + \" has no accessible constructor\");\n            }\n            var body = registeredClass.constructor_body[arguments.length];\n            if (undefined === body) {\n              throw new BindingError(\"Tried to invoke ctor of \" + name + \" with invalid number of parameters (\" + arguments.length + \") - expected (\" + Object.keys(registeredClass.constructor_body).toString() + \") parameters instead!\");\n            }\n            return body.apply(this, arguments);\n          });\n  \n          var instancePrototype = Object.create(basePrototype, {\n            constructor: { value: constructor },\n          });\n  \n          constructor.prototype = instancePrototype;\n  \n          var registeredClass = new RegisteredClass(name,\n                                                    constructor,\n                                                    instancePrototype,\n                                                    rawDestructor,\n                                                    baseClass,\n                                                    getActualType,\n                                                    upcast,\n                                                    downcast);\n  \n          var referenceConverter = new RegisteredPointer(name,\n                                                         registeredClass,\n                                                         true,\n                                                         false,\n                                                         false);\n  \n          var pointerConverter = new RegisteredPointer(name + '*',\n                                                       registeredClass,\n                                                       false,\n                                                       false,\n                                                       false);\n  \n          var constPointerConverter = new RegisteredPointer(name + ' const*',\n                                                            registeredClass,\n                                                            false,\n                                                            true,\n                                                            false);\n  \n          registeredPointers[rawType] = {\n            pointerType: pointerConverter,\n            constPointerType: constPointerConverter\n          };\n  \n          replacePublicSymbol(legalFunctionName, constructor);\n  \n          return [referenceConverter, pointerConverter, constPointerConverter];\n        }\n      );\n    }\n\n  \n  function runDestructors(destructors) {\n      while (destructors.length) {\n        var ptr = destructors.pop();\n        var del = destructors.pop();\n        del(ptr);\n      }\n    }\n  \n  \n  function newFunc(constructor, argumentList) {\n      if (!(constructor instanceof Function)) {\n        throw new TypeError('new_ called with constructor type ' + typeof(constructor) + \" which is not a function\");\n      }\n      /*\n       * Previously, the following line was just:\n       *   function dummy() {};\n       * Unfortunately, Chrome was preserving 'dummy' as the object's name, even\n       * though at creation, the 'dummy' has the correct constructor name.  Thus,\n       * objects created with IMVU.new would show up in the debugger as 'dummy',\n       * which isn't very helpful.  Using IMVU.createNamedFunction addresses the\n       * issue.  Doublely-unfortunately, there's no way to write a test for this\n       * behavior.  -NRD 2013.02.22\n       */\n      var dummy = createNamedFunction(constructor.name || 'unknownFunctionName', function(){});\n      dummy.prototype = constructor.prototype;\n      var obj = new dummy;\n  \n      var r = constructor.apply(obj, argumentList);\n      return (r instanceof Object) ? r : obj;\n    }\n  function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc, isAsync) {\n      // humanName: a human-readable string name for the function to be generated.\n      // argTypes: An array that contains the embind type objects for all types in the function signature.\n      //    argTypes[0] is the type object for the function return value.\n      //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.\n      //    argTypes[2...] are the actual function parameters.\n      // classType: The embind type object for the class to be bound, or null if this is not a method of a class.\n      // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.\n      // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.\n      var argCount = argTypes.length;\n  \n      if (argCount < 2) {\n        throwBindingError(\"argTypes array size mismatch! Must at least get return value and 'this' types!\");\n      }\n  \n      assert(!isAsync, 'Async bindings are only supported with JSPI.');\n  \n      var isClassMethodFunc = (argTypes[1] !== null && classType !== null);\n  \n      // Free functions with signature \"void function()\" do not need an invoker that marshalls between wire types.\n  // TODO: This omits argument count check - enable only at -O3 or similar.\n  //    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == \"void\" && !isClassMethodFunc) {\n  //       return FUNCTION_TABLE[fn];\n  //    }\n  \n      // Determine if we need to use a dynamic stack to store the destructors for the function parameters.\n      // TODO: Remove this completely once all function invokers are being dynamically generated.\n      var needsDestructorStack = false;\n  \n      for (var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.\n        if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack\n          needsDestructorStack = true;\n          break;\n        }\n      }\n  \n      var returns = (argTypes[0].name !== \"void\");\n  \n      var argsList = \"\";\n      var argsListWired = \"\";\n      for (var i = 0; i < argCount - 2; ++i) {\n        argsList += (i!==0?\", \":\"\")+\"arg\"+i;\n        argsListWired += (i!==0?\", \":\"\")+\"arg\"+i+\"Wired\";\n      }\n  \n      var invokerFnBody =\n          \"return function \"+makeLegalFunctionName(humanName)+\"(\"+argsList+\") {\\n\" +\n          \"if (arguments.length !== \"+(argCount - 2)+\") {\\n\" +\n              \"throwBindingError('function \"+humanName+\" called with ' + arguments.length + ' arguments, expected \"+(argCount - 2)+\" args!');\\n\" +\n          \"}\\n\";\n  \n      if (needsDestructorStack) {\n        invokerFnBody += \"var destructors = [];\\n\";\n      }\n  \n      var dtorStack = needsDestructorStack ? \"destructors\" : \"null\";\n      var args1 = [\"throwBindingError\", \"invoker\", \"fn\", \"runDestructors\", \"retType\", \"classParam\"];\n      var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];\n  \n      if (isClassMethodFunc) {\n        invokerFnBody += \"var thisWired = classParam.toWireType(\"+dtorStack+\", this);\\n\";\n      }\n  \n      for (var i = 0; i < argCount - 2; ++i) {\n        invokerFnBody += \"var arg\"+i+\"Wired = argType\"+i+\".toWireType(\"+dtorStack+\", arg\"+i+\"); // \"+argTypes[i+2].name+\"\\n\";\n        args1.push(\"argType\"+i);\n        args2.push(argTypes[i+2]);\n      }\n  \n      if (isClassMethodFunc) {\n        argsListWired = \"thisWired\" + (argsListWired.length > 0 ? \", \" : \"\") + argsListWired;\n      }\n  \n      invokerFnBody +=\n          (returns || isAsync ? \"var rv = \":\"\") + \"invoker(fn\"+(argsListWired.length>0?\", \":\"\")+argsListWired+\");\\n\";\n  \n      if (needsDestructorStack) {\n        invokerFnBody += \"runDestructors(destructors);\\n\";\n      } else {\n        for (var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.\n          var paramName = (i === 1 ? \"thisWired\" : (\"arg\"+(i - 2)+\"Wired\"));\n          if (argTypes[i].destructorFunction !== null) {\n            invokerFnBody += paramName+\"_dtor(\"+paramName+\"); // \"+argTypes[i].name+\"\\n\";\n            args1.push(paramName+\"_dtor\");\n            args2.push(argTypes[i].destructorFunction);\n          }\n        }\n      }\n  \n      if (returns) {\n        invokerFnBody += \"var ret = retType.fromWireType(rv);\\n\" +\n                         \"return ret;\\n\";\n      } else {\n      }\n  \n      invokerFnBody += \"}\\n\";\n  \n      args1.push(invokerFnBody);\n  \n      return newFunc(Function, args1).apply(null, args2);\n    }\n  \n  \n  function heap32VectorToArray(count, firstElement) {\n      var array = [];\n      for (var i = 0; i < count; i++) {\n          // TODO(https://github.com/emscripten-core/emscripten/issues/17310):\n          // Find a way to hoist the `>> 2` or `>> 3` out of this loop.\n          array.push(HEAPU32[(((firstElement)+(i * 4))>>2)]);\n      }\n      return array;\n    }\n  \n  \n  \n  \n  function __embind_register_class_class_function(rawClassType,\n                                                    methodName,\n                                                    argCount,\n                                                    rawArgTypesAddr,\n                                                    invokerSignature,\n                                                    rawInvoker,\n                                                    fn,\n                                                    isAsync) {\n      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);\n      methodName = readLatin1String(methodName);\n      rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);\n      whenDependentTypesAreResolved([], [rawClassType], function(classType) {\n        classType = classType[0];\n        var humanName = classType.name + '.' + methodName;\n  \n        function unboundTypesHandler() {\n          throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);\n        }\n  \n        if (methodName.startsWith(\"@@\")) {\n          methodName = Symbol[methodName.substring(2)];\n        }\n  \n        var proto = classType.registeredClass.constructor;\n        if (undefined === proto[methodName]) {\n          // This is the first function to be registered with this name.\n          unboundTypesHandler.argCount = argCount-1;\n          proto[methodName] = unboundTypesHandler;\n        } else {\n          // There was an existing function with the same name registered. Set up\n          // a function overload routing table.\n          ensureOverloadTable(proto, methodName, humanName);\n          proto[methodName].overloadTable[argCount-1] = unboundTypesHandler;\n        }\n  \n        whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {\n          // Replace the initial unbound-types-handler stub with the proper\n          // function. If multiple overloads are registered, the function handlers\n          // go into an overload table.\n          var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);\n          var func = craftInvokerFunction(humanName, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn, isAsync);\n          if (undefined === proto[methodName].overloadTable) {\n            func.argCount = argCount-1;\n            proto[methodName] = func;\n          } else {\n            proto[methodName].overloadTable[argCount-1] = func;\n          }\n          return [];\n        });\n        return [];\n      });\n    }\n\n  \n  \n  \n  \n  \n  \n  function __embind_register_class_constructor(\n      rawClassType,\n      argCount,\n      rawArgTypesAddr,\n      invokerSignature,\n      invoker,\n      rawConstructor\n    ) {\n      assert(argCount > 0);\n      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);\n      invoker = embind__requireFunction(invokerSignature, invoker);\n      var args = [rawConstructor];\n      var destructors = [];\n  \n      whenDependentTypesAreResolved([], [rawClassType], function(classType) {\n        classType = classType[0];\n        var humanName = 'constructor ' + classType.name;\n  \n        if (undefined === classType.registeredClass.constructor_body) {\n          classType.registeredClass.constructor_body = [];\n        }\n        if (undefined !== classType.registeredClass.constructor_body[argCount - 1]) {\n          throw new BindingError(\"Cannot register multiple constructors with identical number of parameters (\" + (argCount-1) + \") for class '\" + classType.name + \"'! Overload resolution is currently only performed using the parameter count, not actual type info!\");\n        }\n        classType.registeredClass.constructor_body[argCount - 1] = () => {\n          throwUnboundTypeError('Cannot construct ' + classType.name + ' due to unbound types', rawArgTypes);\n        };\n  \n        whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {\n          // Insert empty slot for context type (argTypes[1]).\n          argTypes.splice(1, 0, null);\n          classType.registeredClass.constructor_body[argCount - 1] = craftInvokerFunction(humanName, argTypes, null, invoker, rawConstructor);\n          return [];\n        });\n        return [];\n      });\n    }\n\n  \n  \n  \n  \n  \n  function __embind_register_class_function(rawClassType,\n                                              methodName,\n                                              argCount,\n                                              rawArgTypesAddr, // [ReturnType, ThisType, Args...]\n                                              invokerSignature,\n                                              rawInvoker,\n                                              context,\n                                              isPureVirtual,\n                                              isAsync) {\n      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);\n      methodName = readLatin1String(methodName);\n      rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);\n  \n      whenDependentTypesAreResolved([], [rawClassType], function(classType) {\n        classType = classType[0];\n        var humanName = classType.name + '.' + methodName;\n  \n        if (methodName.startsWith(\"@@\")) {\n          methodName = Symbol[methodName.substring(2)];\n        }\n  \n        if (isPureVirtual) {\n          classType.registeredClass.pureVirtualFunctions.push(methodName);\n        }\n  \n        function unboundTypesHandler() {\n          throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);\n        }\n  \n        var proto = classType.registeredClass.instancePrototype;\n        var method = proto[methodName];\n        if (undefined === method || (undefined === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2)) {\n          // This is the first overload to be registered, OR we are replacing a\n          // function in the base class with a function in the derived class.\n          unboundTypesHandler.argCount = argCount - 2;\n          unboundTypesHandler.className = classType.name;\n          proto[methodName] = unboundTypesHandler;\n        } else {\n          // There was an existing function with the same name registered. Set up\n          // a function overload routing table.\n          ensureOverloadTable(proto, methodName, humanName);\n          proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;\n        }\n  \n        whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {\n          var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context, isAsync);\n  \n          // Replace the initial unbound-handler-stub function with the appropriate member function, now that all types\n          // are resolved. If multiple overloads are registered for this function, the function goes into an overload table.\n          if (undefined === proto[methodName].overloadTable) {\n            // Set argCount in case an overload is registered later\n            memberFunction.argCount = argCount - 2;\n            proto[methodName] = memberFunction;\n          } else {\n            proto[methodName].overloadTable[argCount - 2] = memberFunction;\n          }\n  \n          return [];\n        });\n        return [];\n      });\n    }\n\n  /** @constructor */\n  function HandleAllocator() {\n      // Reserve slot 0 so that 0 is always an invalid handle\n      this.allocated = [undefined];\n      this.freelist = [];\n      this.get = function(id) {\n        assert(this.allocated[id] !== undefined, 'invalid handle: ' + id);\n        return this.allocated[id];\n      };\n      this.allocate = function(handle) {\n        let id = this.freelist.pop() || this.allocated.length;\n        this.allocated[id] = handle;\n        return id;\n      };\n      this.free = function(id) {\n        assert(this.allocated[id] !== undefined);\n        // Set the slot to `undefined` rather than using `delete` here since\n        // apparently arrays with holes in them can be less efficient.\n        this.allocated[id] = undefined;\n        this.freelist.push(id);\n      };\n    }\n  var emval_handles = new HandleAllocator();;\n  function __emval_decref(handle) {\n      if (handle >= emval_handles.reserved && 0 === --emval_handles.get(handle).refcount) {\n        emval_handles.free(handle);\n      }\n    }\n  \n  \n  \n  function count_emval_handles() {\n      var count = 0;\n      for (var i = emval_handles.reserved; i < emval_handles.allocated.length; ++i) {\n        if (emval_handles.allocated[i] !== undefined) {\n          ++count;\n        }\n      }\n      return count;\n    }\n  \n  function init_emval() {\n      // reserve some special values. These never get de-allocated.\n      // The HandleAllocator takes care of reserving zero.\n      emval_handles.allocated.push(\n        {value: undefined},\n        {value: null},\n        {value: true},\n        {value: false},\n      );\n      emval_handles.reserved = emval_handles.allocated.length\n      Module['count_emval_handles'] = count_emval_handles;\n    }\n  var Emval = {toValue:(handle) => {\n        if (!handle) {\n            throwBindingError('Cannot use deleted val. handle = ' + handle);\n        }\n        return emval_handles.get(handle).value;\n      },toHandle:(value) => {\n        switch (value) {\n          case undefined: return 1;\n          case null: return 2;\n          case true: return 3;\n          case false: return 4;\n          default:{\n            return emval_handles.allocate({refcount: 1, value: value});\n          }\n        }\n      }};\n  \n  \n  \n  function __embind_register_emval(rawType, name) {\n      name = readLatin1String(name);\n      registerType(rawType, {\n        name: name,\n        'fromWireType': function(handle) {\n          var rv = Emval.toValue(handle);\n          __emval_decref(handle);\n          return rv;\n        },\n        'toWireType': function(destructors, value) {\n          return Emval.toHandle(value);\n        },\n        'argPackAdvance': 8,\n        'readValueFromPointer': simpleReadValueFromPointer,\n        destructorFunction: null, // This type does not need a destructor\n  \n        // TODO: do we need a deleteObject here?  write a test where\n        // emval is passed into JS via an interface\n      });\n    }\n\n  function embindRepr(v) {\n      if (v === null) {\n          return 'null';\n      }\n      var t = typeof v;\n      if (t === 'object' || t === 'array' || t === 'function') {\n          return v.toString();\n      } else {\n          return '' + v;\n      }\n    }\n  \n  function floatReadValueFromPointer(name, shift) {\n      switch (shift) {\n          case 2: return function(pointer) {\n              return this['fromWireType'](HEAPF32[pointer >> 2]);\n          };\n          case 3: return function(pointer) {\n              return this['fromWireType'](HEAPF64[pointer >> 3]);\n          };\n          default:\n              throw new TypeError(\"Unknown float type: \" + name);\n      }\n    }\n  \n  \n  \n  function __embind_register_float(rawType, name, size) {\n      var shift = getShiftFromSize(size);\n      name = readLatin1String(name);\n      registerType(rawType, {\n        name: name,\n        'fromWireType': function(value) {\n           return value;\n        },\n        'toWireType': function(destructors, value) {\n          if (typeof value != \"number\" && typeof value != \"boolean\") {\n            throw new TypeError('Cannot convert \"' + embindRepr(value) + '\" to ' + this.name);\n          }\n          // The VM will perform JS to Wasm value conversion, according to the spec:\n          // https://www.w3.org/TR/wasm-js-api-1/#towebassemblyvalue\n          return value;\n        },\n        'argPackAdvance': 8,\n        'readValueFromPointer': floatReadValueFromPointer(name, shift),\n        destructorFunction: null, // This type does not need a destructor\n      });\n    }\n\n  \n  \n  \n  \n  \n  \n  \n  function __embind_register_function(name, argCount, rawArgTypesAddr, signature, rawInvoker, fn, isAsync) {\n      var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);\n      name = readLatin1String(name);\n  \n      rawInvoker = embind__requireFunction(signature, rawInvoker);\n  \n      exposePublicSymbol(name, function() {\n        throwUnboundTypeError('Cannot call ' + name + ' due to unbound types', argTypes);\n      }, argCount - 1);\n  \n      whenDependentTypesAreResolved([], argTypes, function(argTypes) {\n        var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);\n        replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn, isAsync), argCount - 1);\n        return [];\n      });\n    }\n\n  \n  \n  function integerReadValueFromPointer(name, shift, signed) {\n      // integers are quite common, so generate very specialized functions\n      switch (shift) {\n          case 0: return signed ?\n              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :\n              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };\n          case 1: return signed ?\n              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :\n              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };\n          case 2: return signed ?\n              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :\n              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };\n          default:\n              throw new TypeError(\"Unknown integer type: \" + name);\n      }\n    }\n  \n  \n  function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {\n      name = readLatin1String(name);\n      // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come\n      // out as 'i32 -1'. Always treat those as max u32.\n      if (maxRange === -1) {\n          maxRange = 4294967295;\n      }\n  \n      var shift = getShiftFromSize(size);\n  \n      var fromWireType = (value) => value;\n  \n      if (minRange === 0) {\n          var bitshift = 32 - 8*size;\n          fromWireType = (value) => (value << bitshift) >>> bitshift;\n      }\n  \n      var isUnsignedType = (name.includes('unsigned'));\n      var checkAssertions = (value, toTypeName) => {\n        if (typeof value != \"number\" && typeof value != \"boolean\") {\n          throw new TypeError('Cannot convert \"' + embindRepr(value) + '\" to ' + toTypeName);\n        }\n        if (value < minRange || value > maxRange) {\n          throw new TypeError('Passing a number \"' + embindRepr(value) + '\" from JS side to C/C++ side to an argument of type \"' + name + '\", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');\n        }\n      }\n      var toWireType;\n      if (isUnsignedType) {\n        toWireType = function(destructors, value) {\n          checkAssertions(value, this.name);\n          return value >>> 0;\n        }\n      } else {\n        toWireType = function(destructors, value) {\n          checkAssertions(value, this.name);\n          // The VM will perform JS to Wasm value conversion, according to the spec:\n          // https://www.w3.org/TR/wasm-js-api-1/#towebassemblyvalue\n          return value;\n        }\n      }\n      registerType(primitiveType, {\n        name: name,\n        'fromWireType': fromWireType,\n        'toWireType': toWireType,\n        'argPackAdvance': 8,\n        'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),\n        destructorFunction: null, // This type does not need a destructor\n      });\n    }\n\n  \n  function __embind_register_memory_view(rawType, dataTypeIndex, name) {\n      var typeMapping = [\n        Int8Array,\n        Uint8Array,\n        Int16Array,\n        Uint16Array,\n        Int32Array,\n        Uint32Array,\n        Float32Array,\n        Float64Array,\n      ];\n  \n      var TA = typeMapping[dataTypeIndex];\n  \n      function decodeMemoryView(handle) {\n        handle = handle >> 2;\n        var heap = HEAPU32;\n        var size = heap[handle]; // in elements\n        var data = heap[handle + 1]; // byte offset into emscripten heap\n        return new TA(heap.buffer, data, size);\n      }\n  \n      name = readLatin1String(name);\n      registerType(rawType, {\n        name: name,\n        'fromWireType': decodeMemoryView,\n        'argPackAdvance': 8,\n        'readValueFromPointer': decodeMemoryView,\n      }, {\n        ignoreDuplicateRegistrations: true,\n      });\n    }\n\n  \n  \n  \n  \n  \n  \n  function __embind_register_std_string(rawType, name) {\n      name = readLatin1String(name);\n      var stdStringIsUTF8\n      //process only std::string bindings with UTF8 support, in contrast to e.g. std::basic_string<unsigned char>\n      = (name === \"std::string\");\n  \n      registerType(rawType, {\n        name: name,\n        'fromWireType': function(value) {\n          var length = HEAPU32[((value)>>2)];\n          var payload = value + 4;\n  \n          var str;\n          if (stdStringIsUTF8) {\n            var decodeStartPtr = payload;\n            // Looping here to support possible embedded '0' bytes\n            for (var i = 0; i <= length; ++i) {\n              var currentBytePtr = payload + i;\n              if (i == length || HEAPU8[currentBytePtr] == 0) {\n                var maxRead = currentBytePtr - decodeStartPtr;\n                var stringSegment = UTF8ToString(decodeStartPtr, maxRead);\n                if (str === undefined) {\n                  str = stringSegment;\n                } else {\n                  str += String.fromCharCode(0);\n                  str += stringSegment;\n                }\n                decodeStartPtr = currentBytePtr + 1;\n              }\n            }\n          } else {\n            var a = new Array(length);\n            for (var i = 0; i < length; ++i) {\n              a[i] = String.fromCharCode(HEAPU8[payload + i]);\n            }\n            str = a.join('');\n          }\n  \n          _free(value);\n  \n          return str;\n        },\n        'toWireType': function(destructors, value) {\n          if (value instanceof ArrayBuffer) {\n            value = new Uint8Array(value);\n          }\n  \n          var length;\n          var valueIsOfTypeString = (typeof value == 'string');\n  \n          if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) {\n            throwBindingError('Cannot pass non-string to std::string');\n          }\n          if (stdStringIsUTF8 && valueIsOfTypeString) {\n            length = lengthBytesUTF8(value);\n          } else {\n            length = value.length;\n          }\n  \n          // assumes 4-byte alignment\n          var base = _malloc(4 + length + 1);\n          var ptr = base + 4;\n          HEAPU32[((base)>>2)] = length;\n          if (stdStringIsUTF8 && valueIsOfTypeString) {\n            stringToUTF8(value, ptr, length + 1);\n          } else {\n            if (valueIsOfTypeString) {\n              for (var i = 0; i < length; ++i) {\n                var charCode = value.charCodeAt(i);\n                if (charCode > 255) {\n                  _free(ptr);\n                  throwBindingError('String has UTF-16 code units that do not fit in 8 bits');\n                }\n                HEAPU8[ptr + i] = charCode;\n              }\n            } else {\n              for (var i = 0; i < length; ++i) {\n                HEAPU8[ptr + i] = value[i];\n              }\n            }\n          }\n  \n          if (destructors !== null) {\n            destructors.push(_free, base);\n          }\n          return base;\n        },\n        'argPackAdvance': 8,\n        'readValueFromPointer': simpleReadValueFromPointer,\n        destructorFunction: function(ptr) { _free(ptr); },\n      });\n    }\n\n  \n  \n  \n  var UTF16Decoder = typeof TextDecoder != 'undefined' ? new TextDecoder('utf-16le') : undefined;;\n  function UTF16ToString(ptr, maxBytesToRead) {\n      assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');\n      var endPtr = ptr;\n      // TextDecoder needs to know the byte length in advance, it doesn't stop on\n      // null terminator by itself.\n      // Also, use the length info to avoid running tiny strings through\n      // TextDecoder, since .subarray() allocates garbage.\n      var idx = endPtr >> 1;\n      var maxIdx = idx + maxBytesToRead / 2;\n      // If maxBytesToRead is not passed explicitly, it will be undefined, and this\n      // will always evaluate to true. This saves on code size.\n      while (!(idx >= maxIdx) && HEAPU16[idx]) ++idx;\n      endPtr = idx << 1;\n  \n      if (endPtr - ptr > 32 && UTF16Decoder)\n        return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));\n  \n      // Fallback: decode without UTF16Decoder\n      var str = '';\n  \n      // If maxBytesToRead is not passed explicitly, it will be undefined, and the\n      // for-loop's condition will always evaluate to true. The loop is then\n      // terminated on the first null char.\n      for (var i = 0; !(i >= maxBytesToRead / 2); ++i) {\n        var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];\n        if (codeUnit == 0) break;\n        // fromCharCode constructs a character from a UTF-16 code unit, so we can\n        // pass the UTF16 string right through.\n        str += String.fromCharCode(codeUnit);\n      }\n  \n      return str;\n    }\n  \n  function stringToUTF16(str, outPtr, maxBytesToWrite) {\n      assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');\n      assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');\n      // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.\n      if (maxBytesToWrite === undefined) {\n        maxBytesToWrite = 0x7FFFFFFF;\n      }\n      if (maxBytesToWrite < 2) return 0;\n      maxBytesToWrite -= 2; // Null terminator.\n      var startPtr = outPtr;\n      var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;\n      for (var i = 0; i < numCharsToWrite; ++i) {\n        // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.\n        var codeUnit = str.charCodeAt(i); // possibly a lead surrogate\n        HEAP16[((outPtr)>>1)] = codeUnit;\n        outPtr += 2;\n      }\n      // Null-terminate the pointer to the HEAP.\n      HEAP16[((outPtr)>>1)] = 0;\n      return outPtr - startPtr;\n    }\n  \n  function lengthBytesUTF16(str) {\n      return str.length*2;\n    }\n  \n  function UTF32ToString(ptr, maxBytesToRead) {\n      assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');\n      var i = 0;\n  \n      var str = '';\n      // If maxBytesToRead is not passed explicitly, it will be undefined, and this\n      // will always evaluate to true. This saves on code size.\n      while (!(i >= maxBytesToRead / 4)) {\n        var utf32 = HEAP32[(((ptr)+(i*4))>>2)];\n        if (utf32 == 0) break;\n        ++i;\n        // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.\n        // See http://unicode.org/faq/utf_bom.html#utf16-3\n        if (utf32 >= 0x10000) {\n          var ch = utf32 - 0x10000;\n          str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));\n        } else {\n          str += String.fromCharCode(utf32);\n        }\n      }\n      return str;\n    }\n  \n  function stringToUTF32(str, outPtr, maxBytesToWrite) {\n      assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');\n      assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');\n      // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.\n      if (maxBytesToWrite === undefined) {\n        maxBytesToWrite = 0x7FFFFFFF;\n      }\n      if (maxBytesToWrite < 4) return 0;\n      var startPtr = outPtr;\n      var endPtr = startPtr + maxBytesToWrite - 4;\n      for (var i = 0; i < str.length; ++i) {\n        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.\n        // See http://unicode.org/faq/utf_bom.html#utf16-3\n        var codeUnit = str.charCodeAt(i); // possibly a lead surrogate\n        if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {\n          var trailSurrogate = str.charCodeAt(++i);\n          codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);\n        }\n        HEAP32[((outPtr)>>2)] = codeUnit;\n        outPtr += 4;\n        if (outPtr + 4 > endPtr) break;\n      }\n      // Null-terminate the pointer to the HEAP.\n      HEAP32[((outPtr)>>2)] = 0;\n      return outPtr - startPtr;\n    }\n  \n  function lengthBytesUTF32(str) {\n      var len = 0;\n      for (var i = 0; i < str.length; ++i) {\n        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.\n        // See http://unicode.org/faq/utf_bom.html#utf16-3\n        var codeUnit = str.charCodeAt(i);\n        if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.\n        len += 4;\n      }\n  \n      return len;\n    }\n  function __embind_register_std_wstring(rawType, charSize, name) {\n      name = readLatin1String(name);\n      var decodeString, encodeString, getHeap, lengthBytesUTF, shift;\n      if (charSize === 2) {\n        decodeString = UTF16ToString;\n        encodeString = stringToUTF16;\n        lengthBytesUTF = lengthBytesUTF16;\n        getHeap = () => HEAPU16;\n        shift = 1;\n      } else if (charSize === 4) {\n        decodeString = UTF32ToString;\n        encodeString = stringToUTF32;\n        lengthBytesUTF = lengthBytesUTF32;\n        getHeap = () => HEAPU32;\n        shift = 2;\n      }\n      registerType(rawType, {\n        name: name,\n        'fromWireType': function(value) {\n          // Code mostly taken from _embind_register_std_string fromWireType\n          var length = HEAPU32[value >> 2];\n          var HEAP = getHeap();\n          var str;\n  \n          var decodeStartPtr = value + 4;\n          // Looping here to support possible embedded '0' bytes\n          for (var i = 0; i <= length; ++i) {\n            var currentBytePtr = value + 4 + i * charSize;\n            if (i == length || HEAP[currentBytePtr >> shift] == 0) {\n              var maxReadBytes = currentBytePtr - decodeStartPtr;\n              var stringSegment = decodeString(decodeStartPtr, maxReadBytes);\n              if (str === undefined) {\n                str = stringSegment;\n              } else {\n                str += String.fromCharCode(0);\n                str += stringSegment;\n              }\n              decodeStartPtr = currentBytePtr + charSize;\n            }\n          }\n  \n          _free(value);\n  \n          return str;\n        },\n        'toWireType': function(destructors, value) {\n          if (!(typeof value == 'string')) {\n            throwBindingError('Cannot pass non-string to C++ string type ' + name);\n          }\n  \n          // assumes 4-byte alignment\n          var length = lengthBytesUTF(value);\n          var ptr = _malloc(4 + length + charSize);\n          HEAPU32[ptr >> 2] = length >> shift;\n  \n          encodeString(value, ptr + 4, length + charSize);\n  \n          if (destructors !== null) {\n            destructors.push(_free, ptr);\n          }\n          return ptr;\n        },\n        'argPackAdvance': 8,\n        'readValueFromPointer': simpleReadValueFromPointer,\n        destructorFunction: function(ptr) { _free(ptr); },\n      });\n    }\n\n  \n  function __embind_register_void(rawType, name) {\n      name = readLatin1String(name);\n      registerType(rawType, {\n          isVoid: true, // void return values can be optimized out sometimes\n          name: name,\n          'argPackAdvance': 0,\n          'fromWireType': function() {\n              return undefined;\n          },\n          'toWireType': function(destructors, o) {\n              // TODO: assert if anything else is given?\n              return undefined;\n          },\n      });\n    }\n\n  \n  \n  \n  function requireRegisteredType(rawType, humanName) {\n      var impl = registeredTypes[rawType];\n      if (undefined === impl) {\n          throwBindingError(humanName + \" has unknown type \" + getTypeName(rawType));\n      }\n      return impl;\n    }\n  function __emval_as(handle, returnType, destructorsRef) {\n      handle = Emval.toValue(handle);\n      returnType = requireRegisteredType(returnType, 'emval::as');\n      var destructors = [];\n      var rd = Emval.toHandle(destructors);\n      HEAPU32[((destructorsRef)>>2)] = rd;\n      return returnType['toWireType'](destructors, handle);\n    }\n\n  function emval_allocateDestructors(destructorsRef) {\n      var destructors = [];\n      HEAPU32[((destructorsRef)>>2)] = Emval.toHandle(destructors);\n      return destructors;\n    }\n  \n  var emval_symbols = {};\n  \n  function getStringOrSymbol(address) {\n      var symbol = emval_symbols[address];\n      if (symbol === undefined) {\n        return readLatin1String(address);\n      }\n      return symbol;\n    }\n  \n  var emval_methodCallers = [];\n  \n  function __emval_call_method(caller, handle, methodName, destructorsRef, args) {\n      caller = emval_methodCallers[caller];\n      handle = Emval.toValue(handle);\n      methodName = getStringOrSymbol(methodName);\n      return caller(handle, methodName, emval_allocateDestructors(destructorsRef), args);\n    }\n\n  \n  \n  \n  function __emval_call_void_method(caller, handle, methodName, args) {\n      caller = emval_methodCallers[caller];\n      handle = Emval.toValue(handle);\n      methodName = getStringOrSymbol(methodName);\n      caller(handle, methodName, null, args);\n    }\n\n\n  function emval_addMethodCaller(caller) {\n      var id = emval_methodCallers.length;\n      emval_methodCallers.push(caller);\n      return id;\n    }\n  \n  function emval_lookupTypes(argCount, argTypes) {\n      var a = new Array(argCount);\n      for (var i = 0; i < argCount; ++i) {\n        a[i] = requireRegisteredType(HEAPU32[(((argTypes)+(i * 4))>>2)],\n                                     \"parameter \" + i);\n      }\n      return a;\n    }\n  \n  \n  var emval_registeredMethods = [];\n  \n  function __emval_get_method_caller(argCount, argTypes) {\n      var types = emval_lookupTypes(argCount, argTypes);\n      var retType = types[0];\n      var signatureName = retType.name + \"_$\" + types.slice(1).map(function (t) { return t.name; }).join(\"_\") + \"$\";\n      var returnId = emval_registeredMethods[signatureName];\n      if (returnId !== undefined) {\n        return returnId;\n      }\n  \n      var params = [\"retType\"];\n      var args = [retType];\n  \n      var argsList = \"\"; // 'arg0, arg1, arg2, ... , argN'\n      for (var i = 0; i < argCount - 1; ++i) {\n        argsList += (i !== 0 ? \", \" : \"\") + \"arg\" + i;\n        params.push(\"argType\" + i);\n        args.push(types[1 + i]);\n      }\n  \n      var functionName = makeLegalFunctionName(\"methodCaller_\" + signatureName);\n      var functionBody =\n          \"return function \" + functionName + \"(handle, name, destructors, args) {\\n\";\n  \n      var offset = 0;\n      for (var i = 0; i < argCount - 1; ++i) {\n          functionBody +=\n          \"    var arg\" + i + \" = argType\" + i + \".readValueFromPointer(args\" + (offset ? (\"+\"+offset) : \"\") + \");\\n\";\n          offset += types[i + 1]['argPackAdvance'];\n      }\n      functionBody +=\n          \"    var rv = handle[name](\" + argsList + \");\\n\";\n      for (var i = 0; i < argCount - 1; ++i) {\n          if (types[i + 1]['deleteObject']) {\n              functionBody +=\n              \"    argType\" + i + \".deleteObject(arg\" + i + \");\\n\";\n          }\n      }\n      if (!retType.isVoid) {\n          functionBody +=\n          \"    return retType.toWireType(destructors, rv);\\n\";\n      }\n      functionBody +=\n          \"};\\n\";\n  \n      params.push(functionBody);\n      var invokerFunction = newFunc(Function, params).apply(null, args);\n      returnId = emval_addMethodCaller(invokerFunction);\n      emval_registeredMethods[signatureName] = returnId;\n      return returnId;\n    }\n\n  function __emval_get_property(handle, key) {\n      handle = Emval.toValue(handle);\n      key = Emval.toValue(key);\n      return Emval.toHandle(handle[key]);\n    }\n\n  function __emval_incref(handle) {\n      if (handle > 4) {\n        emval_handles.get(handle).refcount += 1;\n      }\n    }\n\n  function __emval_new_array() {\n      return Emval.toHandle([]);\n    }\n\n  function __emval_new_array_from_memory_view(view) {\n      view = Emval.toValue(view);\n      // using for..loop is faster than Array.from\n      var a = new Array(view.length);\n      for (var i = 0; i < view.length; i++) a[i] = view[i];\n      return Emval.toHandle(a);\n    }\n\n  \n  function __emval_new_cstring(v) {\n      return Emval.toHandle(getStringOrSymbol(v));\n    }\n\n  function __emval_new_object() {\n      return Emval.toHandle({});\n    }\n\n  \n  \n  function __emval_run_destructors(handle) {\n      var destructors = Emval.toValue(handle);\n      runDestructors(destructors);\n      __emval_decref(handle);\n    }\n\n  function __emval_set_property(handle, key, value) {\n      handle = Emval.toValue(handle);\n      key = Emval.toValue(key);\n      value = Emval.toValue(value);\n      handle[key] = value;\n    }\n\n  \n  function __emval_take_value(type, arg) {\n      type = requireRegisteredType(type, '_emval_take_value');\n      var v = type['readValueFromPointer'](arg);\n      return Emval.toHandle(v);\n    }\n\n  function _abort() {\n      abort('native code called abort()');\n    }\n\n  var readEmAsmArgsArray = [];\n  function readEmAsmArgs(sigPtr, buf) {\n      // Nobody should have mutated _readEmAsmArgsArray underneath us to be something else than an array.\n      assert(Array.isArray(readEmAsmArgsArray));\n      // The input buffer is allocated on the stack, so it must be stack-aligned.\n      assert(buf % 16 == 0);\n      readEmAsmArgsArray.length = 0;\n      var ch;\n      // Most arguments are i32s, so shift the buffer pointer so it is a plain\n      // index into HEAP32.\n      buf >>= 2;\n      while (ch = HEAPU8[sigPtr++]) {\n        var chr = String.fromCharCode(ch);\n        var validChars = ['d', 'f', 'i'];\n        assert(validChars.includes(chr), 'Invalid character ' + ch + '(\"' + chr + '\") in readEmAsmArgs! Use only [' + validChars + '], and do not specify \"v\" for void return argument.');\n        // Floats are always passed as doubles, and doubles and int64s take up 8\n        // bytes (two 32-bit slots) in memory, align reads to these:\n        buf += (ch != 105/*i*/) & buf;\n        readEmAsmArgsArray.push(\n          ch == 105/*i*/ ? HEAP32[buf] :\n         HEAPF64[buf++ >> 1]\n        );\n        ++buf;\n      }\n      return readEmAsmArgsArray;\n    }\n  function runEmAsmFunction(code, sigPtr, argbuf) {\n      var args = readEmAsmArgs(sigPtr, argbuf);\n      if (!ASM_CONSTS.hasOwnProperty(code)) abort('No EM_ASM constant found at address ' + code);\n      return ASM_CONSTS[code].apply(null, args);\n    }\n  function _emscripten_asm_const_int(code, sigPtr, argbuf) {\n      return runEmAsmFunction(code, sigPtr, argbuf);\n    }\n\n  function _emscripten_memcpy_big(dest, src, num) {\n      HEAPU8.copyWithin(dest, src, src + num);\n    }\n\n  function getHeapMax() {\n      // Stay one Wasm page short of 4GB: while e.g. Chrome is able to allocate\n      // full 4GB Wasm memories, the size will wrap back to 0 bytes in Wasm side\n      // for any code that deals with heap sizes, which would require special\n      // casing all heap size related code to treat 0 specially.\n      return 2147483648;\n    }\n  \n  function emscripten_realloc_buffer(size) {\n      var b = wasmMemory.buffer;\n      try {\n        // round size grow request up to wasm page size (fixed 64KB per spec)\n        wasmMemory.grow((size - b.byteLength + 65535) >>> 16); // .grow() takes a delta compared to the previous size\n        updateMemoryViews();\n        return 1 /*success*/;\n      } catch(e) {\n        err('emscripten_realloc_buffer: Attempted to grow heap from ' + b.byteLength  + ' bytes to ' + size + ' bytes, but got error: ' + e);\n      }\n      // implicit 0 return to save code size (caller will cast \"undefined\" into 0\n      // anyhow)\n    }\n  function _emscripten_resize_heap(requestedSize) {\n      var oldSize = HEAPU8.length;\n      requestedSize = requestedSize >>> 0;\n      // With multithreaded builds, races can happen (another thread might increase the size\n      // in between), so return a failure, and let the caller retry.\n      assert(requestedSize > oldSize);\n  \n      // Memory resize rules:\n      // 1.  Always increase heap size to at least the requested size, rounded up\n      //     to next page multiple.\n      // 2a. If MEMORY_GROWTH_LINEAR_STEP == -1, excessively resize the heap\n      //     geometrically: increase the heap size according to\n      //     MEMORY_GROWTH_GEOMETRIC_STEP factor (default +20%), At most\n      //     overreserve by MEMORY_GROWTH_GEOMETRIC_CAP bytes (default 96MB).\n      // 2b. If MEMORY_GROWTH_LINEAR_STEP != -1, excessively resize the heap\n      //     linearly: increase the heap size by at least\n      //     MEMORY_GROWTH_LINEAR_STEP bytes.\n      // 3.  Max size for the heap is capped at 2048MB-WASM_PAGE_SIZE, or by\n      //     MAXIMUM_MEMORY, or by ASAN limit, depending on which is smallest\n      // 4.  If we were unable to allocate as much memory, it may be due to\n      //     over-eager decision to excessively reserve due to (3) above.\n      //     Hence if an allocation fails, cut down on the amount of excess\n      //     growth, in an attempt to succeed to perform a smaller allocation.\n  \n      // A limit is set for how much we can grow. We should not exceed that\n      // (the wasm binary specifies it, so if we tried, we'd fail anyhow).\n      var maxHeapSize = getHeapMax();\n      if (requestedSize > maxHeapSize) {\n        err('Cannot enlarge memory, asked to go up to ' + requestedSize + ' bytes, but the limit is ' + maxHeapSize + ' bytes!');\n        return false;\n      }\n  \n      let alignUp = (x, multiple) => x + (multiple - x % multiple) % multiple;\n  \n      // Loop through potential heap size increases. If we attempt a too eager\n      // reservation that fails, cut down on the attempted size and reserve a\n      // smaller bump instead. (max 3 times, chosen somewhat arbitrarily)\n      for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {\n        var overGrownHeapSize = oldSize * (1 + 0.2 / cutDown); // ensure geometric growth\n        // but limit overreserving (default to capping at +96MB overgrowth at most)\n        overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296 );\n  \n        var newSize = Math.min(maxHeapSize, alignUp(Math.max(requestedSize, overGrownHeapSize), 65536));\n  \n        var replacement = emscripten_realloc_buffer(newSize);\n        if (replacement) {\n  \n          return true;\n        }\n      }\n      err('Failed to grow the heap from ' + oldSize + ' bytes to ' + newSize + ' bytes, not enough memory!');\n      return false;\n    }\n\n  var ENV = {};\n  \n  function getExecutableName() {\n      return thisProgram || './this.program';\n    }\n  function getEnvStrings() {\n      if (!getEnvStrings.strings) {\n        // Default values.\n        // Browser language detection #8751\n        var lang = ((typeof navigator == 'object' && navigator.languages && navigator.languages[0]) || 'C').replace('-', '_') + '.UTF-8';\n        var env = {\n          'USER': 'web_user',\n          'LOGNAME': 'web_user',\n          'PATH': '/',\n          'PWD': '/',\n          'HOME': '/home/web_user',\n          'LANG': lang,\n          '_': getExecutableName()\n        };\n        // Apply the user-provided values, if any.\n        for (var x in ENV) {\n          // x is a key in ENV; if ENV[x] is undefined, that means it was\n          // explicitly set to be so. We allow user code to do that to\n          // force variables with default values to remain unset.\n          if (ENV[x] === undefined) delete env[x];\n          else env[x] = ENV[x];\n        }\n        var strings = [];\n        for (var x in env) {\n          strings.push(x + '=' + env[x]);\n        }\n        getEnvStrings.strings = strings;\n      }\n      return getEnvStrings.strings;\n    }\n  \n  function stringToAscii(str, buffer) {\n      for (var i = 0; i < str.length; ++i) {\n        assert(str.charCodeAt(i) === (str.charCodeAt(i) & 0xff));\n        HEAP8[((buffer++)>>0)] = str.charCodeAt(i);\n      }\n      // Null-terminate the string\n      HEAP8[((buffer)>>0)] = 0;\n    }\n  \n  function _environ_get(__environ, environ_buf) {\n      var bufSize = 0;\n      getEnvStrings().forEach(function(string, i) {\n        var ptr = environ_buf + bufSize;\n        HEAPU32[(((__environ)+(i*4))>>2)] = ptr;\n        stringToAscii(string, ptr);\n        bufSize += string.length + 1;\n      });\n      return 0;\n    }\n\n  \n  function _environ_sizes_get(penviron_count, penviron_buf_size) {\n      var strings = getEnvStrings();\n      HEAPU32[((penviron_count)>>2)] = strings.length;\n      var bufSize = 0;\n      strings.forEach(function(string) {\n        bufSize += string.length + 1;\n      });\n      HEAPU32[((penviron_buf_size)>>2)] = bufSize;\n      return 0;\n    }\n\n  function _fd_close(fd) {\n  try {\n  \n      var stream = SYSCALLS.getStreamFromFD(fd);\n      FS.close(stream);\n      return 0;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return e.errno;\n  }\n  }\n\n  /** @param {number=} offset */\n  function doReadv(stream, iov, iovcnt, offset) {\n      var ret = 0;\n      for (var i = 0; i < iovcnt; i++) {\n        var ptr = HEAPU32[((iov)>>2)];\n        var len = HEAPU32[(((iov)+(4))>>2)];\n        iov += 8;\n        var curr = FS.read(stream, HEAP8,ptr, len, offset);\n        if (curr < 0) return -1;\n        ret += curr;\n        if (curr < len) break; // nothing more to read\n        if (typeof offset !== 'undefined') {\n          offset += curr;\n        }\n      }\n      return ret;\n    }\n  \n  function _fd_read(fd, iov, iovcnt, pnum) {\n  try {\n  \n      var stream = SYSCALLS.getStreamFromFD(fd);\n      var num = doReadv(stream, iov, iovcnt);\n      HEAPU32[((pnum)>>2)] = num;\n      return 0;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return e.errno;\n  }\n  }\n\n  function convertI32PairToI53Checked(lo, hi) {\n      assert(lo == (lo >>> 0) || lo == (lo|0)); // lo should either be a i32 or a u32\n      assert(hi === (hi|0));                    // hi should be a i32\n      return ((hi + 0x200000) >>> 0 < 0x400001 - !!lo) ? (lo >>> 0) + hi * 4294967296 : NaN;\n    }\n  \n  \n  \n  \n  function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {\n  try {\n  \n      var offset = convertI32PairToI53Checked(offset_low, offset_high); if (isNaN(offset)) return 61;\n      var stream = SYSCALLS.getStreamFromFD(fd);\n      FS.llseek(stream, offset, whence);\n      (tempI64 = [stream.position>>>0,(tempDouble=stream.position,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((newOffset)>>2)] = tempI64[0],HEAP32[(((newOffset)+(4))>>2)] = tempI64[1]);\n      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state\n      return 0;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return e.errno;\n  }\n  }\n\n  /** @param {number=} offset */\n  function doWritev(stream, iov, iovcnt, offset) {\n      var ret = 0;\n      for (var i = 0; i < iovcnt; i++) {\n        var ptr = HEAPU32[((iov)>>2)];\n        var len = HEAPU32[(((iov)+(4))>>2)];\n        iov += 8;\n        var curr = FS.write(stream, HEAP8,ptr, len, offset);\n        if (curr < 0) return -1;\n        ret += curr;\n        if (typeof offset !== 'undefined') {\n          offset += curr;\n        }\n      }\n      return ret;\n    }\n  \n  function _fd_write(fd, iov, iovcnt, pnum) {\n  try {\n  \n      var stream = SYSCALLS.getStreamFromFD(fd);\n      var num = doWritev(stream, iov, iovcnt);\n      HEAPU32[((pnum)>>2)] = num;\n      return 0;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return e.errno;\n  }\n  }\n\n  function isLeapYear(year) {\n        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);\n    }\n  \n  function arraySum(array, index) {\n      var sum = 0;\n      for (var i = 0; i <= index; sum += array[i++]) {\n        // no-op\n      }\n      return sum;\n    }\n  \n  \n  var MONTH_DAYS_LEAP = [31,29,31,30,31,30,31,31,30,31,30,31];\n  \n  var MONTH_DAYS_REGULAR = [31,28,31,30,31,30,31,31,30,31,30,31];\n  function addDays(date, days) {\n      var newDate = new Date(date.getTime());\n      while (days > 0) {\n        var leap = isLeapYear(newDate.getFullYear());\n        var currentMonth = newDate.getMonth();\n        var daysInCurrentMonth = (leap ? MONTH_DAYS_LEAP : MONTH_DAYS_REGULAR)[currentMonth];\n  \n        if (days > daysInCurrentMonth-newDate.getDate()) {\n          // we spill over to next month\n          days -= (daysInCurrentMonth-newDate.getDate()+1);\n          newDate.setDate(1);\n          if (currentMonth < 11) {\n            newDate.setMonth(currentMonth+1)\n          } else {\n            newDate.setMonth(0);\n            newDate.setFullYear(newDate.getFullYear()+1);\n          }\n        } else {\n          // we stay in current month\n          newDate.setDate(newDate.getDate()+days);\n          return newDate;\n        }\n      }\n  \n      return newDate;\n    }\n  \n  \n  \n  \n  function writeArrayToMemory(array, buffer) {\n      assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')\n      HEAP8.set(array, buffer);\n    }\n  \n  function _strftime(s, maxsize, format, tm) {\n      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);\n      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html\n  \n      var tm_zone = HEAP32[(((tm)+(40))>>2)];\n  \n      var date = {\n        tm_sec: HEAP32[((tm)>>2)],\n        tm_min: HEAP32[(((tm)+(4))>>2)],\n        tm_hour: HEAP32[(((tm)+(8))>>2)],\n        tm_mday: HEAP32[(((tm)+(12))>>2)],\n        tm_mon: HEAP32[(((tm)+(16))>>2)],\n        tm_year: HEAP32[(((tm)+(20))>>2)],\n        tm_wday: HEAP32[(((tm)+(24))>>2)],\n        tm_yday: HEAP32[(((tm)+(28))>>2)],\n        tm_isdst: HEAP32[(((tm)+(32))>>2)],\n        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],\n        tm_zone: tm_zone ? UTF8ToString(tm_zone) : ''\n      };\n  \n      var pattern = UTF8ToString(format);\n  \n      // expand format\n      var EXPANSION_RULES_1 = {\n        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013\n        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y\n        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d\n        '%h': '%b',                       // Equivalent to %b\n        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation\n        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation\n        '%T': '%H:%M:%S',                 // Replaced by the time\n        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation\n        '%X': '%H:%M:%S',                 // Replaced by the locale's appropriate time representation\n        // Modified Conversion Specifiers\n        '%Ec': '%c',                      // Replaced by the locale's alternative appropriate date and time representation.\n        '%EC': '%C',                      // Replaced by the name of the base year (period) in the locale's alternative representation.\n        '%Ex': '%m/%d/%y',                // Replaced by the locale's alternative date representation.\n        '%EX': '%H:%M:%S',                // Replaced by the locale's alternative time representation.\n        '%Ey': '%y',                      // Replaced by the offset from %EC (year only) in the locale's alternative representation.\n        '%EY': '%Y',                      // Replaced by the full alternative year representation.\n        '%Od': '%d',                      // Replaced by the day of the month, using the locale's alternative numeric symbols, filled as needed with leading zeros if there is any alternative symbol for zero; otherwise, with leading <space> characters.\n        '%Oe': '%e',                      // Replaced by the day of the month, using the locale's alternative numeric symbols, filled as needed with leading <space> characters.\n        '%OH': '%H',                      // Replaced by the hour (24-hour clock) using the locale's alternative numeric symbols.\n        '%OI': '%I',                      // Replaced by the hour (12-hour clock) using the locale's alternative numeric symbols.\n        '%Om': '%m',                      // Replaced by the month using the locale's alternative numeric symbols.\n        '%OM': '%M',                      // Replaced by the minutes using the locale's alternative numeric symbols.\n        '%OS': '%S',                      // Replaced by the seconds using the locale's alternative numeric symbols.\n        '%Ou': '%u',                      // Replaced by the weekday as a number in the locale's alternative representation (Monday=1).\n        '%OU': '%U',                      // Replaced by the week number of the year (Sunday as the first day of the week, rules corresponding to %U ) using the locale's alternative numeric symbols.\n        '%OV': '%V',                      // Replaced by the week number of the year (Monday as the first day of the week, rules corresponding to %V ) using the locale's alternative numeric symbols.\n        '%Ow': '%w',                      // Replaced by the number of the weekday (Sunday=0) using the locale's alternative numeric symbols.\n        '%OW': '%W',                      // Replaced by the week number of the year (Monday as the first day of the week) using the locale's alternative numeric symbols.\n        '%Oy': '%y',                      // Replaced by the year (offset from %C ) using the locale's alternative numeric symbols.\n      };\n      for (var rule in EXPANSION_RULES_1) {\n        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);\n      }\n  \n      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n  \n      function leadingSomething(value, digits, character) {\n        var str = typeof value == 'number' ? value.toString() : (value || '');\n        while (str.length < digits) {\n          str = character[0]+str;\n        }\n        return str;\n      }\n  \n      function leadingNulls(value, digits) {\n        return leadingSomething(value, digits, '0');\n      }\n  \n      function compareByDay(date1, date2) {\n        function sgn(value) {\n          return value < 0 ? -1 : (value > 0 ? 1 : 0);\n        }\n  \n        var compare;\n        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {\n          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {\n            compare = sgn(date1.getDate()-date2.getDate());\n          }\n        }\n        return compare;\n      }\n  \n      function getFirstWeekStartDate(janFourth) {\n          switch (janFourth.getDay()) {\n            case 0: // Sunday\n              return new Date(janFourth.getFullYear()-1, 11, 29);\n            case 1: // Monday\n              return janFourth;\n            case 2: // Tuesday\n              return new Date(janFourth.getFullYear(), 0, 3);\n            case 3: // Wednesday\n              return new Date(janFourth.getFullYear(), 0, 2);\n            case 4: // Thursday\n              return new Date(janFourth.getFullYear(), 0, 1);\n            case 5: // Friday\n              return new Date(janFourth.getFullYear()-1, 11, 31);\n            case 6: // Saturday\n              return new Date(janFourth.getFullYear()-1, 11, 30);\n          }\n      }\n  \n      function getWeekBasedYear(date) {\n          var thisDate = addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);\n  \n          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);\n          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);\n  \n          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);\n          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);\n  \n          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {\n            // this date is after the start of the first week of this year\n            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {\n              return thisDate.getFullYear()+1;\n            }\n            return thisDate.getFullYear();\n          }\n          return thisDate.getFullYear()-1;\n      }\n  \n      var EXPANSION_RULES_2 = {\n        '%a': function(date) {\n          return WEEKDAYS[date.tm_wday].substring(0,3);\n        },\n        '%A': function(date) {\n          return WEEKDAYS[date.tm_wday];\n        },\n        '%b': function(date) {\n          return MONTHS[date.tm_mon].substring(0,3);\n        },\n        '%B': function(date) {\n          return MONTHS[date.tm_mon];\n        },\n        '%C': function(date) {\n          var year = date.tm_year+1900;\n          return leadingNulls((year/100)|0,2);\n        },\n        '%d': function(date) {\n          return leadingNulls(date.tm_mday, 2);\n        },\n        '%e': function(date) {\n          return leadingSomething(date.tm_mday, 2, ' ');\n        },\n        '%g': function(date) {\n          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year.\n          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes\n          // January 4th, which is also the week that includes the first Thursday of the year, and\n          // is also the first week that contains at least four days in the year.\n          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of\n          // the last week of the preceding year; thus, for Saturday 2nd January 1999,\n          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th,\n          // or 31st is a Monday, it and any following days are part of week 1 of the following year.\n          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.\n  \n          return getWeekBasedYear(date).toString().substring(2);\n        },\n        '%G': function(date) {\n          return getWeekBasedYear(date);\n        },\n        '%H': function(date) {\n          return leadingNulls(date.tm_hour, 2);\n        },\n        '%I': function(date) {\n          var twelveHour = date.tm_hour;\n          if (twelveHour == 0) twelveHour = 12;\n          else if (twelveHour > 12) twelveHour -= 12;\n          return leadingNulls(twelveHour, 2);\n        },\n        '%j': function(date) {\n          // Day of the year (001-366)\n          return leadingNulls(date.tm_mday + arraySum(isLeapYear(date.tm_year+1900) ? MONTH_DAYS_LEAP : MONTH_DAYS_REGULAR, date.tm_mon-1), 3);\n        },\n        '%m': function(date) {\n          return leadingNulls(date.tm_mon+1, 2);\n        },\n        '%M': function(date) {\n          return leadingNulls(date.tm_min, 2);\n        },\n        '%n': function() {\n          return '\\n';\n        },\n        '%p': function(date) {\n          if (date.tm_hour >= 0 && date.tm_hour < 12) {\n            return 'AM';\n          }\n          return 'PM';\n        },\n        '%S': function(date) {\n          return leadingNulls(date.tm_sec, 2);\n        },\n        '%t': function() {\n          return '\\t';\n        },\n        '%u': function(date) {\n          return date.tm_wday || 7;\n        },\n        '%U': function(date) {\n          var days = date.tm_yday + 7 - date.tm_wday;\n          return leadingNulls(Math.floor(days / 7), 2);\n        },\n        '%V': function(date) {\n          // Replaced by the week number of the year (Monday as the first day of the week)\n          // as a decimal number [01,53]. If the week containing 1 January has four\n          // or more days in the new year, then it is considered week 1.\n          // Otherwise, it is the last week of the previous year, and the next week is week 1.\n          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]\n          var val = Math.floor((date.tm_yday + 7 - (date.tm_wday + 6) % 7 ) / 7);\n          // If 1 Jan is just 1-3 days past Monday, the previous week\n          // is also in this year.\n          if ((date.tm_wday + 371 - date.tm_yday - 2) % 7 <= 2) {\n            val++;\n          }\n          if (!val) {\n            val = 52;\n            // If 31 December of prev year a Thursday, or Friday of a\n            // leap year, then the prev year has 53 weeks.\n            var dec31 = (date.tm_wday + 7 - date.tm_yday - 1) % 7;\n            if (dec31 == 4 || (dec31 == 5 && isLeapYear(date.tm_year%400-1))) {\n              val++;\n            }\n          } else if (val == 53) {\n            // If 1 January is not a Thursday, and not a Wednesday of a\n            // leap year, then this year has only 52 weeks.\n            var jan1 = (date.tm_wday + 371 - date.tm_yday) % 7;\n            if (jan1 != 4 && (jan1 != 3 || !isLeapYear(date.tm_year)))\n              val = 1;\n          }\n          return leadingNulls(val, 2);\n        },\n        '%w': function(date) {\n          return date.tm_wday;\n        },\n        '%W': function(date) {\n          var days = date.tm_yday + 7 - ((date.tm_wday + 6) % 7);\n          return leadingNulls(Math.floor(days / 7), 2);\n        },\n        '%y': function(date) {\n          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]\n          return (date.tm_year+1900).toString().substring(2);\n        },\n        '%Y': function(date) {\n          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]\n          return date.tm_year+1900;\n        },\n        '%z': function(date) {\n          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).\n          // For example, \"-0430\" means 4 hours 30 minutes behind UTC (west of Greenwich).\n          var off = date.tm_gmtoff;\n          var ahead = off >= 0;\n          off = Math.abs(off) / 60;\n          // convert from minutes into hhmm format (which means 60 minutes = 100 units)\n          off = (off / 60)*100 + (off % 60);\n          return (ahead ? '+' : '-') + String(\"0000\" + off).slice(-4);\n        },\n        '%Z': function(date) {\n          return date.tm_zone;\n        },\n        '%%': function() {\n          return '%';\n        }\n      };\n  \n      // Replace %% with a pair of NULLs (which cannot occur in a C string), then\n      // re-inject them after processing.\n      pattern = pattern.replace(/%%/g, '\\0\\0')\n      for (var rule in EXPANSION_RULES_2) {\n        if (pattern.includes(rule)) {\n          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));\n        }\n      }\n      pattern = pattern.replace(/\\0\\0/g, '%')\n  \n      var bytes = intArrayFromString(pattern, false);\n      if (bytes.length > maxsize) {\n        return 0;\n      }\n  \n      writeArrayToMemory(bytes, s);\n      return bytes.length-1;\n    }\n  function _strftime_l(s, maxsize, format, tm, loc) {\n      return _strftime(s, maxsize, format, tm); // no locale support yet\n    }\n\n\n  var FSNode = /** @constructor */ function(parent, name, mode, rdev) {\n    if (!parent) {\n      parent = this;  // root node sets parent to itself\n    }\n    this.parent = parent;\n    this.mount = parent.mount;\n    this.mounted = null;\n    this.id = FS.nextInode++;\n    this.name = name;\n    this.mode = mode;\n    this.node_ops = {};\n    this.stream_ops = {};\n    this.rdev = rdev;\n  };\n  var readMode = 292/*292*/ | 73/*73*/;\n  var writeMode = 146/*146*/;\n  Object.defineProperties(FSNode.prototype, {\n   read: {\n    get: /** @this{FSNode} */function() {\n     return (this.mode & readMode) === readMode;\n    },\n    set: /** @this{FSNode} */function(val) {\n     val ? this.mode |= readMode : this.mode &= ~readMode;\n    }\n   },\n   write: {\n    get: /** @this{FSNode} */function() {\n     return (this.mode & writeMode) === writeMode;\n    },\n    set: /** @this{FSNode} */function(val) {\n     val ? this.mode |= writeMode : this.mode &= ~writeMode;\n    }\n   },\n   isFolder: {\n    get: /** @this{FSNode} */function() {\n     return FS.isDir(this.mode);\n    }\n   },\n   isDevice: {\n    get: /** @this{FSNode} */function() {\n     return FS.isChrdev(this.mode);\n    }\n   }\n  });\n  FS.FSNode = FSNode;\n  FS.staticInit();;\nERRNO_CODES = {\n      'EPERM': 63,\n      'ENOENT': 44,\n      'ESRCH': 71,\n      'EINTR': 27,\n      'EIO': 29,\n      'ENXIO': 60,\n      'E2BIG': 1,\n      'ENOEXEC': 45,\n      'EBADF': 8,\n      'ECHILD': 12,\n      'EAGAIN': 6,\n      'EWOULDBLOCK': 6,\n      'ENOMEM': 48,\n      'EACCES': 2,\n      'EFAULT': 21,\n      'ENOTBLK': 105,\n      'EBUSY': 10,\n      'EEXIST': 20,\n      'EXDEV': 75,\n      'ENODEV': 43,\n      'ENOTDIR': 54,\n      'EISDIR': 31,\n      'EINVAL': 28,\n      'ENFILE': 41,\n      'EMFILE': 33,\n      'ENOTTY': 59,\n      'ETXTBSY': 74,\n      'EFBIG': 22,\n      'ENOSPC': 51,\n      'ESPIPE': 70,\n      'EROFS': 69,\n      'EMLINK': 34,\n      'EPIPE': 64,\n      'EDOM': 18,\n      'ERANGE': 68,\n      'ENOMSG': 49,\n      'EIDRM': 24,\n      'ECHRNG': 106,\n      'EL2NSYNC': 156,\n      'EL3HLT': 107,\n      'EL3RST': 108,\n      'ELNRNG': 109,\n      'EUNATCH': 110,\n      'ENOCSI': 111,\n      'EL2HLT': 112,\n      'EDEADLK': 16,\n      'ENOLCK': 46,\n      'EBADE': 113,\n      'EBADR': 114,\n      'EXFULL': 115,\n      'ENOANO': 104,\n      'EBADRQC': 103,\n      'EBADSLT': 102,\n      'EDEADLOCK': 16,\n      'EBFONT': 101,\n      'ENOSTR': 100,\n      'ENODATA': 116,\n      'ETIME': 117,\n      'ENOSR': 118,\n      'ENONET': 119,\n      'ENOPKG': 120,\n      'EREMOTE': 121,\n      'ENOLINK': 47,\n      'EADV': 122,\n      'ESRMNT': 123,\n      'ECOMM': 124,\n      'EPROTO': 65,\n      'EMULTIHOP': 36,\n      'EDOTDOT': 125,\n      'EBADMSG': 9,\n      'ENOTUNIQ': 126,\n      'EBADFD': 127,\n      'EREMCHG': 128,\n      'ELIBACC': 129,\n      'ELIBBAD': 130,\n      'ELIBSCN': 131,\n      'ELIBMAX': 132,\n      'ELIBEXEC': 133,\n      'ENOSYS': 52,\n      'ENOTEMPTY': 55,\n      'ENAMETOOLONG': 37,\n      'ELOOP': 32,\n      'EOPNOTSUPP': 138,\n      'EPFNOSUPPORT': 139,\n      'ECONNRESET': 15,\n      'ENOBUFS': 42,\n      'EAFNOSUPPORT': 5,\n      'EPROTOTYPE': 67,\n      'ENOTSOCK': 57,\n      'ENOPROTOOPT': 50,\n      'ESHUTDOWN': 140,\n      'ECONNREFUSED': 14,\n      'EADDRINUSE': 3,\n      'ECONNABORTED': 13,\n      'ENETUNREACH': 40,\n      'ENETDOWN': 38,\n      'ETIMEDOUT': 73,\n      'EHOSTDOWN': 142,\n      'EHOSTUNREACH': 23,\n      'EINPROGRESS': 26,\n      'EALREADY': 7,\n      'EDESTADDRREQ': 17,\n      'EMSGSIZE': 35,\n      'EPROTONOSUPPORT': 66,\n      'ESOCKTNOSUPPORT': 137,\n      'EADDRNOTAVAIL': 4,\n      'ENETRESET': 39,\n      'EISCONN': 30,\n      'ENOTCONN': 53,\n      'ETOOMANYREFS': 141,\n      'EUSERS': 136,\n      'EDQUOT': 19,\n      'ESTALE': 72,\n      'ENOTSUP': 138,\n      'ENOMEDIUM': 148,\n      'EILSEQ': 25,\n      'EOVERFLOW': 61,\n      'ECANCELED': 11,\n      'ENOTRECOVERABLE': 56,\n      'EOWNERDEAD': 62,\n      'ESTRPIPE': 135,\n    };;\nembind_init_charCodes();\nBindingError = Module['BindingError'] = extendError(Error, 'BindingError');;\nInternalError = Module['InternalError'] = extendError(Error, 'InternalError');;\ninit_ClassHandle();\ninit_embind();;\ninit_RegisteredPointer();\nUnboundTypeError = Module['UnboundTypeError'] = extendError(Error, 'UnboundTypeError');;\ninit_emval();;\n// include: base64Utils.js\n// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149\n\n// This code was written by Tyler Akins and has been placed in the\n// public domain.  It would be nice if you left this header intact.\n// Base64 code from Tyler Akins -- http://rumkin.com\n\n/**\n * Decodes a base64 string.\n * @param {string} input The string to decode.\n */\nvar decodeBase64 = typeof atob == 'function' ? atob : function (input) {\n  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\n  var output = '';\n  var chr1, chr2, chr3;\n  var enc1, enc2, enc3, enc4;\n  var i = 0;\n  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\n  input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, '');\n  do {\n    enc1 = keyStr.indexOf(input.charAt(i++));\n    enc2 = keyStr.indexOf(input.charAt(i++));\n    enc3 = keyStr.indexOf(input.charAt(i++));\n    enc4 = keyStr.indexOf(input.charAt(i++));\n\n    chr1 = (enc1 << 2) | (enc2 >> 4);\n    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n    chr3 = ((enc3 & 3) << 6) | enc4;\n\n    output = output + String.fromCharCode(chr1);\n\n    if (enc3 !== 64) {\n      output = output + String.fromCharCode(chr2);\n    }\n    if (enc4 !== 64) {\n      output = output + String.fromCharCode(chr3);\n    }\n  } while (i < input.length);\n  return output;\n};\n\n// Converts a string of base64 into a byte array.\n// Throws error on invalid input.\nfunction intArrayFromBase64(s) {\n\n  try {\n    var decoded = decodeBase64(s);\n    var bytes = new Uint8Array(decoded.length);\n    for (var i = 0 ; i < decoded.length ; ++i) {\n      bytes[i] = decoded.charCodeAt(i);\n    }\n    return bytes;\n  } catch (_) {\n    throw new Error('Converting base64 string to bytes failed.');\n  }\n}\n\n// If filename is a base64 data URI, parses and returns data (Buffer on node,\n// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.\nfunction tryParseAsDataURI(filename) {\n  if (!isDataURI(filename)) {\n    return;\n  }\n\n  return intArrayFromBase64(filename.slice(dataURIPrefix.length));\n}\n\n\n// end include: base64Utils.js\nfunction checkIncomingModuleAPI() {\n  ignoredModuleProp('fetchSettings');\n}\nvar wasmImports = {\n  \"__assert_fail\": ___assert_fail,\n  \"__syscall_fcntl64\": ___syscall_fcntl64,\n  \"__syscall_fstat64\": ___syscall_fstat64,\n  \"__syscall_ioctl\": ___syscall_ioctl,\n  \"__syscall_lstat64\": ___syscall_lstat64,\n  \"__syscall_newfstatat\": ___syscall_newfstatat,\n  \"__syscall_openat\": ___syscall_openat,\n  \"__syscall_stat64\": ___syscall_stat64,\n  \"__throw_exception_with_stack_trace\": ___throw_exception_with_stack_trace,\n  \"_embind_register_bigint\": __embind_register_bigint,\n  \"_embind_register_bool\": __embind_register_bool,\n  \"_embind_register_class\": __embind_register_class,\n  \"_embind_register_class_class_function\": __embind_register_class_class_function,\n  \"_embind_register_class_constructor\": __embind_register_class_constructor,\n  \"_embind_register_class_function\": __embind_register_class_function,\n  \"_embind_register_emval\": __embind_register_emval,\n  \"_embind_register_float\": __embind_register_float,\n  \"_embind_register_function\": __embind_register_function,\n  \"_embind_register_integer\": __embind_register_integer,\n  \"_embind_register_memory_view\": __embind_register_memory_view,\n  \"_embind_register_std_string\": __embind_register_std_string,\n  \"_embind_register_std_wstring\": __embind_register_std_wstring,\n  \"_embind_register_void\": __embind_register_void,\n  \"_emval_as\": __emval_as,\n  \"_emval_call_method\": __emval_call_method,\n  \"_emval_call_void_method\": __emval_call_void_method,\n  \"_emval_decref\": __emval_decref,\n  \"_emval_get_method_caller\": __emval_get_method_caller,\n  \"_emval_get_property\": __emval_get_property,\n  \"_emval_incref\": __emval_incref,\n  \"_emval_new_array\": __emval_new_array,\n  \"_emval_new_array_from_memory_view\": __emval_new_array_from_memory_view,\n  \"_emval_new_cstring\": __emval_new_cstring,\n  \"_emval_new_object\": __emval_new_object,\n  \"_emval_run_destructors\": __emval_run_destructors,\n  \"_emval_set_property\": __emval_set_property,\n  \"_emval_take_value\": __emval_take_value,\n  \"abort\": _abort,\n  \"emscripten_asm_const_int\": _emscripten_asm_const_int,\n  \"emscripten_memcpy_big\": _emscripten_memcpy_big,\n  \"emscripten_resize_heap\": _emscripten_resize_heap,\n  \"environ_get\": _environ_get,\n  \"environ_sizes_get\": _environ_sizes_get,\n  \"fd_close\": _fd_close,\n  \"fd_read\": _fd_read,\n  \"fd_seek\": _fd_seek,\n  \"fd_write\": _fd_write,\n  \"strftime_l\": _strftime_l,\n  \"syncIdb_js\": syncIdb_js\n};\nvar asm = createWasm();\n/** @type {function(...*):?} */\nvar ___wasm_call_ctors = createExportWrapper(\"__wasm_call_ctors\");\n/** @type {function(...*):?} */\nvar _malloc = createExportWrapper(\"malloc\");\n/** @type {function(...*):?} */\nvar _free = Module[\"_free\"] = createExportWrapper(\"free\");\n/** @type {function(...*):?} */\nvar ___getTypeName = Module[\"___getTypeName\"] = createExportWrapper(\"__getTypeName\");\n/** @type {function(...*):?} */\nvar __embind_initialize_bindings = Module[\"__embind_initialize_bindings\"] = createExportWrapper(\"_embind_initialize_bindings\");\n/** @type {function(...*):?} */\nvar ___errno_location = createExportWrapper(\"__errno_location\");\n/** @type {function(...*):?} */\nvar _fflush = Module[\"_fflush\"] = createExportWrapper(\"fflush\");\n/** @type {function(...*):?} */\nvar ___trap = function() {\n  return (___trap = Module[\"asm\"][\"__trap\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _emscripten_stack_init = function() {\n  return (_emscripten_stack_init = Module[\"asm\"][\"emscripten_stack_init\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _emscripten_stack_get_free = function() {\n  return (_emscripten_stack_get_free = Module[\"asm\"][\"emscripten_stack_get_free\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _emscripten_stack_get_base = function() {\n  return (_emscripten_stack_get_base = Module[\"asm\"][\"emscripten_stack_get_base\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _emscripten_stack_get_end = function() {\n  return (_emscripten_stack_get_end = Module[\"asm\"][\"emscripten_stack_get_end\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar stackSave = createExportWrapper(\"stackSave\");\n/** @type {function(...*):?} */\nvar stackRestore = createExportWrapper(\"stackRestore\");\n/** @type {function(...*):?} */\nvar stackAlloc = createExportWrapper(\"stackAlloc\");\n/** @type {function(...*):?} */\nvar _emscripten_stack_get_current = function() {\n  return (_emscripten_stack_get_current = Module[\"asm\"][\"emscripten_stack_get_current\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar ___cxa_decrement_exception_refcount = Module[\"___cxa_decrement_exception_refcount\"] = createExportWrapper(\"__cxa_decrement_exception_refcount\");\n/** @type {function(...*):?} */\nvar ___cxa_increment_exception_refcount = Module[\"___cxa_increment_exception_refcount\"] = createExportWrapper(\"__cxa_increment_exception_refcount\");\n/** @type {function(...*):?} */\nvar ___cxa_demangle = createExportWrapper(\"__cxa_demangle\");\n/** @type {function(...*):?} */\nvar ___thrown_object_from_unwind_exception = Module[\"___thrown_object_from_unwind_exception\"] = createExportWrapper(\"__thrown_object_from_unwind_exception\");\n/** @type {function(...*):?} */\nvar ___get_exception_message = Module[\"___get_exception_message\"] = createExportWrapper(\"__get_exception_message\");\n/** @type {function(...*):?} */\nvar dynCall_jiji = Module[\"dynCall_jiji\"] = createExportWrapper(\"dynCall_jiji\");\n/** @type {function(...*):?} */\nvar dynCall_viijii = Module[\"dynCall_viijii\"] = createExportWrapper(\"dynCall_viijii\");\n/** @type {function(...*):?} */\nvar dynCall_iiiiij = Module[\"dynCall_iiiiij\"] = createExportWrapper(\"dynCall_iiiiij\");\n/** @type {function(...*):?} */\nvar dynCall_iiiiijj = Module[\"dynCall_iiiiijj\"] = createExportWrapper(\"dynCall_iiiiijj\");\n/** @type {function(...*):?} */\nvar dynCall_iiiiiijj = Module[\"dynCall_iiiiiijj\"] = createExportWrapper(\"dynCall_iiiiiijj\");\nvar ___start_em_js = Module['___start_em_js'] = 44648;\nvar ___stop_em_js = Module['___stop_em_js'] = 44983;\n\n// include: postamble.js\n// === Auto-generated postamble setup entry stuff ===\n\nvar missingLibrarySymbols = [\n  'exitJS',\n  'ydayFromDate',\n  'inetPton4',\n  'inetNtop4',\n  'inetPton6',\n  'inetNtop6',\n  'readSockaddr',\n  'writeSockaddr',\n  'getHostByName',\n  'traverseStack',\n  'getCallstack',\n  'emscriptenLog',\n  'convertPCtoSourceLocation',\n  'runMainThreadEmAsm',\n  'jstoi_q',\n  'jstoi_s',\n  'listenOnce',\n  'autoResumeAudioContext',\n  'handleException',\n  'runtimeKeepalivePush',\n  'runtimeKeepalivePop',\n  'callUserCallback',\n  'maybeExit',\n  'safeSetTimeout',\n  'asmjsMangle',\n  'getNativeTypeSize',\n  'STACK_SIZE',\n  'STACK_ALIGN',\n  'POINTER_SIZE',\n  'ASSERTIONS',\n  'writeI53ToI64',\n  'writeI53ToI64Clamped',\n  'writeI53ToI64Signaling',\n  'writeI53ToU64Clamped',\n  'writeI53ToU64Signaling',\n  'readI53FromI64',\n  'readI53FromU64',\n  'convertI32PairToI53',\n  'convertU32PairToI53',\n  'getCFunc',\n  'ccall',\n  'cwrap',\n  'uleb128Encode',\n  'sigToWasmTypes',\n  'generateFuncType',\n  'convertJsFunctionToWasm',\n  'getEmptyTableSlot',\n  'updateTableMap',\n  'getFunctionAddress',\n  'addFunction',\n  'removeFunction',\n  'reallyNegative',\n  'unSign',\n  'strLen',\n  'reSign',\n  'formatString',\n  'AsciiToString',\n  'stringToNewUTF8',\n  'getSocketFromFD',\n  'getSocketAddress',\n  'registerKeyEventCallback',\n  'maybeCStringToJsString',\n  'findEventTarget',\n  'findCanvasEventTarget',\n  'getBoundingClientRect',\n  'fillMouseEventData',\n  'registerMouseEventCallback',\n  'registerWheelEventCallback',\n  'registerUiEventCallback',\n  'registerFocusEventCallback',\n  'fillDeviceOrientationEventData',\n  'registerDeviceOrientationEventCallback',\n  'fillDeviceMotionEventData',\n  'registerDeviceMotionEventCallback',\n  'screenOrientation',\n  'fillOrientationChangeEventData',\n  'registerOrientationChangeEventCallback',\n  'fillFullscreenChangeEventData',\n  'registerFullscreenChangeEventCallback',\n  'JSEvents_requestFullscreen',\n  'JSEvents_resizeCanvasForFullscreen',\n  'registerRestoreOldStyle',\n  'hideEverythingExceptGivenElement',\n  'restoreHiddenElements',\n  'setLetterbox',\n  'softFullscreenResizeWebGLRenderTarget',\n  'doRequestFullscreen',\n  'fillPointerlockChangeEventData',\n  'registerPointerlockChangeEventCallback',\n  'registerPointerlockErrorEventCallback',\n  'requestPointerLock',\n  'fillVisibilityChangeEventData',\n  'registerVisibilityChangeEventCallback',\n  'registerTouchEventCallback',\n  'fillGamepadEventData',\n  'registerGamepadEventCallback',\n  'registerBeforeUnloadEventCallback',\n  'fillBatteryEventData',\n  'battery',\n  'registerBatteryEventCallback',\n  'setCanvasElementSize',\n  'getCanvasElementSize',\n  'checkWasiClock',\n  'wasiRightsToMuslOFlags',\n  'wasiOFlagsToMuslOFlags',\n  'createDyncallWrapper',\n  'setImmediateWrapped',\n  'clearImmediateWrapped',\n  'polyfillSetImmediate',\n  'getPromise',\n  'makePromise',\n  'makePromiseCallback',\n  'setMainLoop',\n  '_setNetworkCallback',\n  'heapObjectForWebGLType',\n  'heapAccessShiftForWebGLHeap',\n  'webgl_enable_ANGLE_instanced_arrays',\n  'webgl_enable_OES_vertex_array_object',\n  'webgl_enable_WEBGL_draw_buffers',\n  'webgl_enable_WEBGL_multi_draw',\n  'emscriptenWebGLGet',\n  'computeUnpackAlignedImageSize',\n  'colorChannelsInGlTextureFormat',\n  'emscriptenWebGLGetTexPixelData',\n  '__glGenObject',\n  'emscriptenWebGLGetUniform',\n  'webglGetUniformLocation',\n  'webglPrepareUniformLocationsBeforeFirstUse',\n  'webglGetLeftBracePos',\n  'emscriptenWebGLGetVertexAttrib',\n  '__glGetActiveAttribOrUniform',\n  'writeGLArray',\n  'registerWebGlEventCallback',\n  'runAndAbortIfError',\n  'SDL_unicode',\n  'SDL_ttfContext',\n  'SDL_audio',\n  'GLFW_Window',\n  'ALLOC_NORMAL',\n  'ALLOC_STACK',\n  'allocate',\n  'writeStringToMemory',\n  'writeAsciiToMemory',\n  'registerInheritedInstance',\n  'unregisterInheritedInstance',\n  'enumReadValueFromPointer',\n  'validateThis',\n  'craftEmvalAllocator',\n  'emval_get_global',\n];\nmissingLibrarySymbols.forEach(missingLibrarySymbol)\n\nvar unexportedSymbols = [\n  'run',\n  'addOnPreRun',\n  'addOnInit',\n  'addOnPreMain',\n  'addOnExit',\n  'addOnPostRun',\n  'addRunDependency',\n  'removeRunDependency',\n  'FS_createFolder',\n  'FS_createPath',\n  'FS_createDataFile',\n  'FS_createPreloadedFile',\n  'FS_createLazyFile',\n  'FS_createLink',\n  'FS_createDevice',\n  'FS_unlink',\n  'out',\n  'err',\n  'callMain',\n  'abort',\n  'keepRuntimeAlive',\n  'wasmMemory',\n  'stackAlloc',\n  'stackSave',\n  'stackRestore',\n  'getTempRet0',\n  'setTempRet0',\n  'writeStackCookie',\n  'checkStackCookie',\n  'intArrayFromBase64',\n  'tryParseAsDataURI',\n  'ptrToString',\n  'zeroMemory',\n  'getHeapMax',\n  'emscripten_realloc_buffer',\n  'ENV',\n  'MONTH_DAYS_REGULAR',\n  'MONTH_DAYS_LEAP',\n  'MONTH_DAYS_REGULAR_CUMULATIVE',\n  'MONTH_DAYS_LEAP_CUMULATIVE',\n  'isLeapYear',\n  'arraySum',\n  'addDays',\n  'ERRNO_CODES',\n  'ERRNO_MESSAGES',\n  'setErrNo',\n  'DNS',\n  'Protocols',\n  'Sockets',\n  'initRandomFill',\n  'randomFill',\n  'timers',\n  'warnOnce',\n  'UNWIND_CACHE',\n  'readEmAsmArgsArray',\n  'readEmAsmArgs',\n  'runEmAsmFunction',\n  'getExecutableName',\n  'dynCallLegacy',\n  'getDynCaller',\n  'dynCall',\n  'asyncLoad',\n  'alignMemory',\n  'mmapAlloc',\n  'HandleAllocator',\n  'convertI32PairToI53Checked',\n  'freeTableIndexes',\n  'functionsInTableMap',\n  'setValue',\n  'getValue',\n  'PATH',\n  'PATH_FS',\n  'UTF8Decoder',\n  'UTF8ArrayToString',\n  'UTF8ToString',\n  'stringToUTF8Array',\n  'stringToUTF8',\n  'lengthBytesUTF8',\n  'intArrayFromString',\n  'intArrayToString',\n  'stringToAscii',\n  'UTF16Decoder',\n  'UTF16ToString',\n  'stringToUTF16',\n  'lengthBytesUTF16',\n  'UTF32ToString',\n  'stringToUTF32',\n  'lengthBytesUTF32',\n  'stringToUTF8OnStack',\n  'writeArrayToMemory',\n  'SYSCALLS',\n  'JSEvents',\n  'specialHTMLTargets',\n  'currentFullscreenStrategy',\n  'restoreOldWindowedStyle',\n  'demangle',\n  'demangleAll',\n  'jsStackTrace',\n  'stackTrace',\n  'ExitStatus',\n  'getEnvStrings',\n  'doReadv',\n  'doWritev',\n  'dlopenMissingError',\n  'promiseMap',\n  'getExceptionMessageCommon',\n  'getCppExceptionTag',\n  'getCppExceptionThrownObjectFromWebAssemblyException',\n  'incrementExceptionRefcount',\n  'decrementExceptionRefcount',\n  'getExceptionMessage',\n  'Browser',\n  'wget',\n  'FS',\n  'MEMFS',\n  'TTY',\n  'PIPEFS',\n  'SOCKFS',\n  'tempFixedLengthArray',\n  'miniTempWebGLFloatBuffers',\n  'miniTempWebGLIntBuffers',\n  'GL',\n  'emscripten_webgl_power_preferences',\n  'AL',\n  'GLUT',\n  'EGL',\n  'GLEW',\n  'IDBStore',\n  'SDL',\n  'SDL_gfx',\n  'GLFW',\n  'allocateUTF8',\n  'allocateUTF8OnStack',\n  'InternalError',\n  'BindingError',\n  'UnboundTypeError',\n  'PureVirtualError',\n  'init_embind',\n  'throwInternalError',\n  'throwBindingError',\n  'throwUnboundTypeError',\n  'ensureOverloadTable',\n  'exposePublicSymbol',\n  'replacePublicSymbol',\n  'extendError',\n  'createNamedFunction',\n  'embindRepr',\n  'registeredInstances',\n  'getBasestPointer',\n  'getInheritedInstance',\n  'getInheritedInstanceCount',\n  'getLiveInheritedInstances',\n  'registeredTypes',\n  'awaitingDependencies',\n  'typeDependencies',\n  'registeredPointers',\n  'registerType',\n  'whenDependentTypesAreResolved',\n  'embind_charCodes',\n  'embind_init_charCodes',\n  'readLatin1String',\n  'getTypeName',\n  'heap32VectorToArray',\n  'requireRegisteredType',\n  'getShiftFromSize',\n  'integerReadValueFromPointer',\n  'floatReadValueFromPointer',\n  'simpleReadValueFromPointer',\n  'runDestructors',\n  'newFunc',\n  'craftInvokerFunction',\n  'embind__requireFunction',\n  'tupleRegistrations',\n  'structRegistrations',\n  'genericPointerToWireType',\n  'constNoSmartPtrRawPointerToWireType',\n  'nonConstNoSmartPtrRawPointerToWireType',\n  'init_RegisteredPointer',\n  'RegisteredPointer',\n  'RegisteredPointer_getPointee',\n  'RegisteredPointer_destructor',\n  'RegisteredPointer_deleteObject',\n  'RegisteredPointer_fromWireType',\n  'runDestructor',\n  'releaseClassHandle',\n  'finalizationRegistry',\n  'detachFinalizer_deps',\n  'detachFinalizer',\n  'attachFinalizer',\n  'makeClassHandle',\n  'init_ClassHandle',\n  'ClassHandle',\n  'ClassHandle_isAliasOf',\n  'throwInstanceAlreadyDeleted',\n  'ClassHandle_clone',\n  'ClassHandle_delete',\n  'deletionQueue',\n  'ClassHandle_isDeleted',\n  'ClassHandle_deleteLater',\n  'flushPendingDeletes',\n  'delayFunction',\n  'setDelayFunction',\n  'RegisteredClass',\n  'shallowCopyInternalPointer',\n  'downcastPointer',\n  'upcastPointer',\n  'char_0',\n  'char_9',\n  'makeLegalFunctionName',\n  'emval_handles',\n  'emval_symbols',\n  'init_emval',\n  'count_emval_handles',\n  'getStringOrSymbol',\n  'Emval',\n  'emval_newers',\n  'emval_lookupTypes',\n  'emval_allocateDestructors',\n  'emval_methodCallers',\n  'emval_addMethodCaller',\n  'emval_registeredMethods',\n  'IDBFS',\n];\nunexportedSymbols.forEach(unexportedRuntimeSymbol);\n\n\n\nvar calledRun;\n\ndependenciesFulfilled = function runCaller() {\n  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)\n  if (!calledRun) run();\n  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled\n};\n\nfunction stackCheckInit() {\n  // This is normally called automatically during __wasm_call_ctors but need to\n  // get these values before even running any of the ctors so we call it redundantly\n  // here.\n  _emscripten_stack_init();\n  // TODO(sbc): Move writeStackCookie to native to to avoid this.\n  writeStackCookie();\n}\n\nfunction run() {\n\n  if (runDependencies > 0) {\n    return;\n  }\n\n    stackCheckInit();\n\n  preRun();\n\n  // a preRun added a dependency, run will be called later\n  if (runDependencies > 0) {\n    return;\n  }\n\n  function doRun() {\n    // run may have just been called through dependencies being fulfilled just in this very frame,\n    // or while the async setStatus time below was happening\n    if (calledRun) return;\n    calledRun = true;\n    Module['calledRun'] = true;\n\n    if (ABORT) return;\n\n    initRuntime();\n\n    readyPromiseResolve(Module);\n    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();\n\n    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module[\"onRuntimeInitialized\"]');\n\n    postRun();\n  }\n\n  if (Module['setStatus']) {\n    Module['setStatus']('Running...');\n    setTimeout(function() {\n      setTimeout(function() {\n        Module['setStatus']('');\n      }, 1);\n      doRun();\n    }, 1);\n  } else\n  {\n    doRun();\n  }\n  checkStackCookie();\n}\n\nfunction checkUnflushedContent() {\n  // Compiler settings do not allow exiting the runtime, so flushing\n  // the streams is not possible. but in ASSERTIONS mode we check\n  // if there was something to flush, and if so tell the user they\n  // should request that the runtime be exitable.\n  // Normally we would not even include flush() at all, but in ASSERTIONS\n  // builds we do so just for this check, and here we see if there is any\n  // content to flush, that is, we check if there would have been\n  // something a non-ASSERTIONS build would have not seen.\n  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0\n  // mode (which has its own special function for this; otherwise, all\n  // the code is inside libc)\n  var oldOut = out;\n  var oldErr = err;\n  var has = false;\n  out = err = (x) => {\n    has = true;\n  }\n  try { // it doesn't matter if it fails\n    _fflush(0);\n    // also flush in the JS FS layer\n    ['stdout', 'stderr'].forEach(function(name) {\n      var info = FS.analyzePath('/dev/' + name);\n      if (!info) return;\n      var stream = info.object;\n      var rdev = stream.rdev;\n      var tty = TTY.ttys[rdev];\n      if (tty && tty.output && tty.output.length) {\n        has = true;\n      }\n    });\n  } catch(e) {}\n  out = oldOut;\n  err = oldErr;\n  if (has) {\n    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');\n  }\n}\n\nif (Module['preInit']) {\n  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];\n  while (Module['preInit'].length > 0) {\n    Module['preInit'].pop()();\n  }\n}\n\nrun();\n\n\n// end include: postamble.js\n\n\n  return hnswlib.ready\n}\n\n);\n})();\nexport default hnswlib;"],"names":["hnswlib","_scriptDir","readyPromiseResolve","readyPromiseReject","Module","Promise","resolve","reject","forEach","prop","Object","getOwnPropertyDescriptor","defineProperty","get","abort","set","moduleOverrides","assign","thisProgram","ENVIRONMENT_IS_WEB","Error","read_","readAsync","scriptDirectory","document","currentScript","src","indexOf","substr","replace","lastIndexOf","window","importScripts","url","xhr","XMLHttpRequest","open","send","responseText","err","data","tryParseAsDataURI","array","ret","i","length","chr","assert","String","fromCharCode","push","join","intArrayToString","onload","onerror","responseType","status","response","buffer","wasmBinary","wasmMemory","out","console","log","bind","warn","checkIncomingModuleAPI","legacyModuleProp","WebAssembly","HEAP8","HEAPU8","HEAP16","HEAPU16","HEAP32","HEAPU32","HEAPF32","HEAPF64","wasmTable","ABORT","condition","text","updateMemoryViews","b","Int8Array","Int16Array","Int32Array","Uint8Array","Uint16Array","Uint32Array","Float32Array","Float64Array","checkStackCookie","max","_emscripten_stack_get_end","cookie1","cookie2","ptrToString","undefined","prototype","subarray","h16","h8","__ATPRERUN__","__ATINIT__","__ATPOSTRUN__","runtimeInitialized","Math","imul","fround","clz32","trunc","runDependencies","runDependencyWatcher","dependenciesFulfilled","runDependencyTracking","getUniqueRunDependency","id","orig","random","addRunDependency","setInterval","clearInterval","shown","dep","removeRunDependency","callback","what","___trap","e","RuntimeError","wasmBinaryFile","path","tempDouble","tempI64","sym","msg","dataURIPrefix","isDataURI","filename","startsWith","createExportWrapper","name","fixedasm","displayName","asm","apply","arguments","getBinary","file","binary","instantiateArrayBuffer","binaryFile","imports","receiver","fetch","credentials","then","catch","getBinaryPromise","instantiate","instance","reason","newName","configurable","isExportedByForceFilesystem","unexportedRuntimeSymbol","globalThis","warnOnce","ASM_CONSTS","$0","$1","type","UTF8ToString","directory","allocatedDir","_malloc","stringToUTF8","jsAllocatedDir","FS","mkdir","mount","IDBFS","_free","callRuntimeCallbacks","callbacks","shift","getCppExceptionTag","withStackSave","f","stack","stackSave","stackRestore","lengthBytesUTF8","str","len","c","charCodeAt","stringToUTF8Array","heap","outIdx","maxBytesToWrite","startIdx","endIdx","u","outPtr","UTF8Decoder","TextDecoder","UTF8ArrayToString","heapOrArray","idx","maxBytesToRead","endPtr","decode","u0","u1","u2","ch","ptr","demangle","func","recursionGuard","s","buf","size","stackAlloc","stringToUTF8OnStack","___cxa_demangle","getExceptionMessage","ex","unwind_header","getArg","___thrown_object_from_unwind_exception","getCppExceptionThrownObjectFromWebAssemblyException","type_addr_addr","message_addr_addr","___get_exception_message","message","type_addr","message_addr","getExceptionMessageCommon","toString","padStart","PATH","isAbs","charAt","splitPath","exec","slice","normalizeArray","parts","allowAboveRoot","up","last","splice","unshift","normalize","isAbsolute","trailingSlash","split","filter","p","dirname","result","root","dir","basename","lastSlash","paths","Array","call","join2","l","r","randomFill","view","crypto","getRandomValues","initRandomFill","PATH_FS","resolvedPath","resolvedAbsolute","cwd","TypeError","relative","from","to","trim","arr","start","end","fromParts","toParts","min","samePartsLength","outputParts","concat","intArrayFromString","stringy","dontAddNull","u8array","numBytesWritten","TTY","ttys","init","shutdown","register","dev","ops","input","output","registerDevice","stream_ops","stream","tty","node","rdev","ErrnoError","seekable","close","fsync","read","offset","pos","get_char","bytesRead","timestamp","Date","now","write","put_char","default_tty_ops","prompt","readline","val","default_tty1_ops","mmapAlloc","MEMFS","ops_table","createNode","parent","mode","isBlkdev","isFIFO","getattr","node_ops","setattr","lookup","mknod","rename","unlink","rmdir","readdir","symlink","llseek","allocate","mmap","msync","link","readlink","chrdev","chrdev_stream_ops","isDir","contents","isFile","usedBytes","isLink","isChrdev","getFileDataAsTypedArray","expandFileStorage","newCapacity","prevCapacity","oldContents","resizeFileStorage","newSize","attr","ino","nlink","uid","gid","atime","mtime","ctime","blksize","blocks","ceil","genericErrors","old_node","new_dir","new_name","new_node","lookupNode","entries","key","hasOwnProperty","newname","oldpath","position","canOwn","ArrayBuffer","whence","prot","flags","allocated","byteOffset","mmapFlags","dbs","indexedDB","mozIndexedDB","webkitIndexedDB","msIndexedDB","DB_VERSION","DB_STORE_NAME","syncfs","populate","getLocalSet","local","getRemoteSet","remote","dst","reconcile","quit","values","value","getDB","req","db","onupgradeneeded","fileStore","target","transaction","objectStoreNames","contains","objectStore","createObjectStore","indexNames","createIndex","unique","onsuccess","this","error","preventDefault","isRealDir","toAbsolute","check","mountpoint","map","stat","pop","index","openKeyCursor","event","cursor","primaryKey","continue","loadLocalEntry","lookupPath","storeLocalEntry","entry","mkdirTree","writeFile","chmod","utime","removeLocalEntry","loadRemoteEntry","store","storeRemoteEntry","put","removeRemoteEntry","delete","total","create","keys","e2","getTime","remove","errored","done","oncomplete","sort","reverse","ERRNO_MESSAGES","ERRNO_CODES","mounts","devices","streams","nextInode","nameTable","currentPath","initialized","ignorePermissions","filesystems","syncFSRequests","opts","follow_mount","recurse_count","current","current_path","islast","isMountpoint","mounted","follow","count","getPath","isRoot","hashName","parentid","hash","hashAddNode","name_next","hashRemoveNode","errCode","mayLookup","nodeName","FSNode","destroyNode","isSocket","flagModes","modeStringToFlags","flagsToPermissionString","flag","perms","nodePermissions","includes","mayCreate","mayDelete","isdir","errno","mayOpen","MAX_OPEN_FDS","nextfd","fd_start","fd_end","fd","getStream","createStream","FSStream","shared","defineProperties","object","isRead","isWrite","isAppend","closeStream","device","getDevice","major","minor","makedev","ma","mi","getMounts","m","completed","doCallback","pseudo","mountRoot","unmount","next","dirs","d","mkdev","newpath","old_path","new_path","old_dir","old_dirname","new_dirname","old_name","dontFollow","lstat","lchmod","fchmod","chown","lchown","fchown","truncate","ftruncate","created","ungotten","readFiles","isClosed","getdents","seeking","bytesWritten","munmap","ioctl","cmd","arg","readFile","encoding","actualNumBytes","isView","byteLength","chdir","createDefaultDirectories","createDefaultDevices","randomBuffer","randomLeft","randomByte","createDevice","createSpecialDirectories","proc_self","createStandardStreams","stdin","stdout","stderr","ensureErrnoError","setErrno","code","writable","x","y","constructor","staticInit","_fflush","getMode","canRead","canWrite","findObject","dontResolveLastLink","analyzePath","exists","parentExists","parentPath","parentObject","createPath","part","createFile","properties","createDataFile","forceLoadFile","obj","isDevice","isFolder","createLazyFile","LazyUint8Array","lengthKnown","chunks","chunkOffset","chunkSize","chunkNum","getter","setDataGetter","cacheLength","header","datalength","Number","getResponseHeader","hasByteServing","usesGzip","lazyArray","setRequestHeader","overrideMimeType","doXHR","_length","_chunkSize","writeChunks","fn","createPreloadedFile","dontCreateFile","preFinish","fullname","processData","byteArray","finish","Browser","handledByPreloadPlugin","noRunDep","arrayBuffer","asyncLoad","absolutePath","createFolder","createLink","joinPath","standardizePath","SYSCALLS","DEFAULT_POLLMASK","calculateAt","dirfd","allowEmpty","getStreamFromFD","doStat","abs","floor","doMsync","addr","varargs","getStr","getShiftFromSize","embind_charCodes","readLatin1String","awaitingDependencies","registeredTypes","typeDependencies","char_0","char_9","makeLegalFunctionName","createNamedFunction","body","extendError","baseErrorType","errorName","errorClass","BindingError","throwBindingError","InternalError","throwInternalError","whenDependentTypesAreResolved","myTypes","dependentTypes","getTypeConverters","onComplete","typeConverters","myTypeConverters","registerType","unregisteredTypes","registered","dt","rawType","registeredInstance","options","ignoreDuplicateRegistrations","cb","ClassHandle_isAliasOf","other","ClassHandle","leftClass","$$","ptrType","registeredClass","left","rightClass","right","baseClass","upcast","throwInstanceAlreadyDeleted","finalizationRegistry","detachFinalizer","handle","releaseClassHandle","smartPtr","smartPtrType","rawDestructor","runDestructor","downcastPointer","ptrClass","desiredClass","rv","downcast","registeredPointers","getInheritedInstanceCount","registeredInstances","getLiveInheritedInstances","k","deletionQueue","flushPendingDeletes","deleteScheduled","delayFunction","setDelayFunction","getInheritedInstance","class_","getBasestPointer","makeClassHandle","record","attachFinalizer","RegisteredPointer_fromWireType","rawPointer","getPointee","destructor","makeDefaultHandle","isSmartPointer","instancePrototype","pointeeType","toType","actualType","getActualType","registeredPointerRecord","isConst","constPointerType","pointerType","dp","FinalizationRegistry","info","leakWarning","cls","captureStackTrace","unregister","ClassHandle_clone","preservePointerOnDelete","o","clone","getPrototypeOf","ClassHandle_delete","ClassHandle_isDeleted","ClassHandle_deleteLater","ensureOverloadTable","proto","methodName","humanName","overloadTable","prevFunc","argCount","exposePublicSymbol","numArguments","RegisteredClass","pureVirtualFunctions","upcastPointer","constNoSmartPtrRawPointerToWireType","destructors","isReference","embindRepr","handleClass","genericPointerToWireType","rawConstructor","sharingPolicy","clonedHandle","rawShare","Emval","toHandle","nonConstNoSmartPtrRawPointerToWireType","simpleReadValueFromPointer","pointer","RegisteredPointer_getPointee","rawGetPointee","RegisteredPointer_destructor","RegisteredPointer_deleteObject","RegisteredPointer","destructorFunction","replacePublicSymbol","wasmTableMirror","getWasmTableEntry","funcPtr","dynCall","sig","args","substring","dynCallLegacy","embind__requireFunction","signature","rawFunction","fp","argCache","getDynCaller","UnboundTypeError","getTypeName","___getTypeName","throwUnboundTypeError","types","unboundTypes","seen","visit","runDestructors","del","newFunc","argumentList","Function","dummy","craftInvokerFunction","argTypes","classType","cppInvokerFunc","cppTargetFunc","isAsync","isClassMethodFunc","needsDestructorStack","returns","argsList","argsListWired","invokerFnBody","dtorStack","args1","args2","paramName","heap32VectorToArray","firstElement","emval_handles","freelist","free","__emval_decref","reserved","refcount","count_emval_handles","toValue","v","t","floatReadValueFromPointer","integerReadValueFromPointer","signed","UTF16Decoder","UTF16ToString","maxIdx","codeUnit","stringToUTF16","startPtr","numCharsToWrite","lengthBytesUTF16","UTF32ToString","utf32","stringToUTF32","lengthBytesUTF32","requireRegisteredType","impl","emval_symbols","getStringOrSymbol","address","symbol","emval_methodCallers","emval_registeredMethods","readEmAsmArgsArray","runEmAsmFunction","sigPtr","argbuf","isArray","validChars","readEmAsmArgs","emscripten_realloc_buffer","grow","ENV","getEnvStrings","strings","env","navigator","languages","isLeapYear","year","MONTH_DAYS_LEAP","MONTH_DAYS_REGULAR","_strftime","maxsize","format","tm","tm_zone","date","tm_sec","tm_min","tm_hour","tm_mday","tm_mon","tm_year","tm_wday","tm_yday","tm_isdst","tm_gmtoff","pattern","EXPANSION_RULES_1","rule","RegExp","WEEKDAYS","MONTHS","leadingSomething","digits","character","leadingNulls","compareByDay","date1","date2","sgn","compare","getFullYear","getMonth","getDate","getFirstWeekStartDate","janFourth","getDay","getWeekBasedYear","thisDate","days","newDate","leap","currentMonth","daysInCurrentMonth","setDate","setMonth","setFullYear","addDays","janFourthThisYear","janFourthNextYear","firstWeekStartThisYear","firstWeekStartNextYear","EXPANSION_RULES_2","twelveHour","sum","arraySum","jan1","dec31","off","ahead","bytes","readMode","writeMode","codes","embind_init_charCodes","decodeBase64","atob","chr1","chr2","chr3","enc2","enc3","enc4","keyStr","decoded","_","intArrayFromBase64","wasmImports","line","___errno_location","op","argp","nofollow","Exception","traceStack","primitiveType","minRange","maxRange","trueValue","falseValue","wt","rawPointerType","rawConstPointerType","baseClassRawType","getActualTypeSignature","upcastSignature","downcastSignature","destructorSignature","legalFunctionName","base","basePrototype","constructor_body","referenceConverter","pointerConverter","constPointerConverter","rawClassType","rawArgTypesAddr","invokerSignature","rawInvoker","rawArgTypes","unboundTypesHandler","Symbol","invokerArgsArray","invoker","context","isPureVirtual","method","className","memberFunction","fromWireType","bitshift","isUnsignedType","checkAssertions","toTypeName","dataTypeIndex","TA","decodeMemoryView","stdStringIsUTF8","payload","decodeStartPtr","currentBytePtr","stringSegment","a","valueIsOfTypeString","Uint8ClampedArray","charCode","charSize","decodeString","encodeString","getHeap","lengthBytesUTF","HEAP","isVoid","returnType","destructorsRef","rd","caller","emval_allocateDestructors","emval_lookupTypes","retType","signatureName","returnId","params","functionBody","emval_addMethodCaller","dest","num","copyWithin","requestedSize","oldSize","multiple","maxHeapSize","cutDown","overGrownHeapSize","__environ","environ_buf","bufSize","string","stringToAscii","penviron_count","penviron_buf_size","iov","iovcnt","pnum","curr","doReadv","offset_low","offset_high","newOffset","hi","lo","NaN","isNaN","doWritev","loc","populateFromFS","setTimeout","setIdbfsSynced","receiveInstance","module","exports","trueModule","instantiateStreaming","createWasm","_emscripten_stack_init","librarySymbol","calledRun","stackCheckInit","writeStackCookie","run","doRun","postRun","preRun","runCaller","ready"],"sourceRoot":""}